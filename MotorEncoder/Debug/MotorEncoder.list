
MotorEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca14  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800cb28  0800cb28  0001cb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d058  0800d058  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d058  0800d058  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d058  0800d058  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d058  0800d058  0001d058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e14  200001d8  0800d238  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001fec  0800d238  00021fec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b421  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004711  00000000  00000000  0003b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cd  00000000  00000000  000414a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2ef  00000000  00000000  0004266d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c806  00000000  00000000  0005e95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009934b  00000000  00000000  0007b162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000744c  00000000  00000000  001144b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb0c 	.word	0x0800cb0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800cb0c 	.word	0x0800cb0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <CAN_Config_filtering>:
	if(HAL_CAN_AddTxMessage(&hcan, &Txheader, data, &TxMailbox)!=HAL_OK){
		Error_Handler();
	}
}
void CAN_Config_filtering(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank=0;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh=0x0000;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow= 0x0000;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh= 0x0000;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <CAN_Config_filtering+0x48>)
 80010c4:	f001 f95f 	bl	8002386 <HAL_CAN_ConfigFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <CAN_Config_filtering+0x3e>
	{
		Error_Handler();
 80010ce:	f000 fb33 	bl	8001738 <Error_Handler>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000021c 	.word	0x2000021c

080010e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef *hcan){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rcdata)==HAL_OK){
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f001 fa56 	bl	80025a0 <HAL_CAN_GetRxMessage>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Can_RecFlag=1;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Can_RecFlag=0;
	}
}
 8001100:	e002      	b.n	8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		Can_RecFlag=0;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000210 	.word	0x20000210
 8001114:	200001f4 	.word	0x200001f4
 8001118:	20000218 	.word	0x20000218

0800111c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_CAN_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <MX_CAN_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_CAN_Init+0x64>)
 8001128:	2204      	movs	r2, #4
 800112a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_CAN_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_CAN_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_CAN_Init+0x64>)
 800113a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800113e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_CAN_Init+0x64>)
 8001142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001146:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_CAN_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_CAN_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_CAN_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_CAN_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_CAN_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_CAN_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_CAN_Init+0x64>)
 800116e:	f001 f80f 	bl	8002190 <HAL_CAN_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001178:	f000 fade 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000021c 	.word	0x2000021c
 8001184:	40006400 	.word	0x40006400

08001188 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <HAL_CAN_MspInit+0xd0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d153      	bne.n	8001250 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_CAN_MspInit+0xd4>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	4a2b      	ldr	r2, [pc, #172]	; (800125c <HAL_CAN_MspInit+0xd4>)
 80011ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b2:	61d3      	str	r3, [r2, #28]
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <HAL_CAN_MspInit+0xd4>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_CAN_MspInit+0xd4>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <HAL_CAN_MspInit+0xd4>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_CAN_MspInit+0xd4>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	481c      	ldr	r0, [pc, #112]	; (8001260 <HAL_CAN_MspInit+0xd8>)
 80011ee:	f001 fe21 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <HAL_CAN_MspInit+0xd8>)
 8001208:	f001 fe14 	bl	8002e34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_CAN_MspInit+0xdc>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_CAN_MspInit+0xdc>)
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2105      	movs	r1, #5
 8001234:	2013      	movs	r0, #19
 8001236:	f001 fdd2 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800123a:	2013      	movs	r0, #19
 800123c:	f001 fdeb 	bl	8002e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2105      	movs	r1, #5
 8001244:	2014      	movs	r0, #20
 8001246:	f001 fdca 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800124a:	2014      	movs	r0, #20
 800124c:	f001 fde3 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40006400 	.word	0x40006400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40010000 	.word	0x40010000

08001268 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mControl_PIDTas */
  mControl_PIDTasHandle = osThreadNew(Control_PIDTask, NULL, &mControl_PIDTas_attributes);
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <MX_FREERTOS_Init+0x38>)
 800126e:	2100      	movs	r1, #0
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <MX_FREERTOS_Init+0x3c>)
 8001272:	f003 feed 	bl	8005050 <osThreadNew>
 8001276:	4603      	mov	r3, r0
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <MX_FREERTOS_Init+0x40>)
 800127a:	6013      	str	r3, [r2, #0]

  /* creation of mCAN_RecTask */
  mCAN_RecTaskHandle = osThreadNew(CAN_RecTask, NULL, &mCAN_RecTask_attributes);
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <MX_FREERTOS_Init+0x44>)
 800127e:	2100      	movs	r1, #0
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_FREERTOS_Init+0x48>)
 8001282:	f003 fee5 	bl	8005050 <osThreadNew>
 8001286:	4603      	mov	r3, r0
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <MX_FREERTOS_Init+0x4c>)
 800128a:	6013      	str	r3, [r2, #0]

  /* creation of myCAN_TransmitT */
  myCAN_TransmitTHandle = osThreadNew(CAN_TransmitTask, NULL, &myCAN_TransmitT_attributes);
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <MX_FREERTOS_Init+0x50>)
 800128e:	2100      	movs	r1, #0
 8001290:	480a      	ldr	r0, [pc, #40]	; (80012bc <MX_FREERTOS_Init+0x54>)
 8001292:	f003 fedd 	bl	8005050 <osThreadNew>
 8001296:	4603      	mov	r3, r0
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <MX_FREERTOS_Init+0x58>)
 800129a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800cb94 	.word	0x0800cb94
 80012a4:	080012c5 	.word	0x080012c5
 80012a8:	2000038c 	.word	0x2000038c
 80012ac:	0800cbb8 	.word	0x0800cbb8
 80012b0:	080013e5 	.word	0x080013e5
 80012b4:	20000390 	.word	0x20000390
 80012b8:	0800cbdc 	.word	0x0800cbdc
 80012bc:	080013f9 	.word	0x080013f9
 80012c0:	20000394 	.word	0x20000394

080012c4 <Control_PIDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Control_PIDTask */
void Control_PIDTask(void *argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af08      	add	r7, sp, #32
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Control_PIDTask */
	uint32_t Time=20;
 80012cc:	2314      	movs	r3, #20
 80012ce:	60fb      	str	r3, [r7, #12]
	VelSetpoint = 5;
 80012d0:	4937      	ldr	r1, [pc, #220]	; (80013b0 <Control_PIDTask+0xec>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <Control_PIDTask+0xf0>)
 80012d8:	e9c1 2300 	strd	r2, r3, [r1]
	VNH3SP30_Init(&driver);
 80012dc:	4836      	ldr	r0, [pc, #216]	; (80013b8 <Control_PIDTask+0xf4>)
 80012de:	f006 fbfc 	bl	8007ada <VNH3SP30_Init>
	Encoder_Init(&Enco);
 80012e2:	4836      	ldr	r0, [pc, #216]	; (80013bc <Control_PIDTask+0xf8>)
 80012e4:	f006 fb22 	bl	800792c <Encoder_Init>
	PID(&TPID, &speed, &PIDOut, &VelSetpoint, 4, 0, 3, _PID_P_ON_E, _PID_CD_DIRECT);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9307      	str	r3, [sp, #28]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9306      	str	r3, [sp, #24]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <Control_PIDTask+0xfc>)
 80012f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <Control_PIDTask+0x100>)
 800130c:	e9cd 2300 	strd	r2, r3, [sp]
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <Control_PIDTask+0xec>)
 8001312:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <Control_PIDTask+0x104>)
 8001314:	492d      	ldr	r1, [pc, #180]	; (80013cc <Control_PIDTask+0x108>)
 8001316:	482e      	ldr	r0, [pc, #184]	; (80013d0 <Control_PIDTask+0x10c>)
 8001318:	f006 fc92 	bl	8007c40 <PID>
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 800131c:	2101      	movs	r1, #1
 800131e:	482c      	ldr	r0, [pc, #176]	; (80013d0 <Control_PIDTask+0x10c>)
 8001320:	f006 fdc0 	bl	8007ea4 <PID_SetMode>
	PID_SetSampleTime(&TPID, Time);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4619      	mov	r1, r3
 8001328:	4829      	ldr	r0, [pc, #164]	; (80013d0 <Control_PIDTask+0x10c>)
 800132a:	f006 ff29 	bl	8008180 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, -1, 1);
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <Control_PIDTask+0x110>)
 8001334:	e9cd 2300 	strd	r2, r3, [sp]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <Control_PIDTask+0x114>)
 800133e:	4824      	ldr	r0, [pc, #144]	; (80013d0 <Control_PIDTask+0x10c>)
 8001340:	f006 fdce 	bl	8007ee0 <PID_SetOutputLimits>
  /* Infinite loop */
  for(;;)
  {
	  if(Servo==1){
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <Control_PIDTask+0x118>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d12c      	bne.n	80013a8 <Control_PIDTask+0xe4>
	  PWM += PIDOut;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <Control_PIDTask+0x11c>)
 8001350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <Control_PIDTask+0x104>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7fe ff07 	bl	800016c <__adddf3>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	491f      	ldr	r1, [pc, #124]	; (80013e0 <Control_PIDTask+0x11c>)
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
	  VNH3SP30_SetSpeed(&driver,PWM);
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <Control_PIDTask+0x11c>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fb61 	bl	8000a38 <__aeabi_d2iz>
 8001376:	4603      	mov	r3, r0
 8001378:	b21b      	sxth	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <Control_PIDTask+0xf4>)
 800137e:	f006 fbbb 	bl	8007af8 <VNH3SP30_SetSpeed>
	  Encoder_CaculateSpeed(&Enco,Time);
 8001382:	68f9      	ldr	r1, [r7, #12]
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <Control_PIDTask+0xf8>)
 8001386:	f006 fb27 	bl	80079d8 <Encoder_CaculateSpeed>
	  speed=Get_Speed(&Enco);
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <Control_PIDTask+0xf8>)
 800138c:	f006 fb9a 	bl	8007ac4 <Get_Speed>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f848 	bl	8000428 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	490b      	ldr	r1, [pc, #44]	; (80013cc <Control_PIDTask+0x108>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
	  PID_Compute(&TPID);
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <Control_PIDTask+0x10c>)
 80013a4:	f006 fc94 	bl	8007cd0 <PID_Compute>
	  }
	  osDelay(Time);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f003 fefb 	bl	80051a4 <osDelay>
	  if(Servo==1){
 80013ae:	e7c9      	b.n	8001344 <Control_PIDTask+0x80>
 80013b0:	20000248 	.word	0x20000248
 80013b4:	40140000 	.word	0x40140000
 80013b8:	200002e8 	.word	0x200002e8
 80013bc:	20000250 	.word	0x20000250
 80013c0:	40080000 	.word	0x40080000
 80013c4:	40100000 	.word	0x40100000
 80013c8:	20000268 	.word	0x20000268
 80013cc:	20000260 	.word	0x20000260
 80013d0:	20000278 	.word	0x20000278
 80013d4:	3ff00000 	.word	0x3ff00000
 80013d8:	bff00000 	.word	0xbff00000
 80013dc:	20000388 	.word	0x20000388
 80013e0:	20000270 	.word	0x20000270

080013e4 <CAN_RecTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_RecTask */
void CAN_RecTask(void *argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//		uint32_t len =sprintf(msg,"Steecontrol: %d | SPWM: %d\r\n",(int16_t)SteeringControl,(int16_t)SPWM);
//		HAL_UART_Transmit(&huart2,(uint8_t*) msg, len, HAL_MAX_DELAY);
    osDelay(50);
 80013ec:	2032      	movs	r0, #50	; 0x32
 80013ee:	f003 fed9 	bl	80051a4 <osDelay>
 80013f2:	e7fb      	b.n	80013ec <CAN_RecTask+0x8>
 80013f4:	0000      	movs	r0, r0
	...

080013f8 <CAN_TransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_TransmitTask */
void CAN_TransmitTask(void *argument)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af08      	add	r7, sp, #32
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_TransmitTask */
	SteeSetpoint = 0;
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <CAN_TransmitTask+0xe8>)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
	SPWM=STRAIGHTANGLE;
 800140e:	4935      	ldr	r1, [pc, #212]	; (80014e4 <CAN_TransmitTask+0xec>)
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <CAN_TransmitTask+0xf0>)
 8001416:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t Time=15;
 800141a:	230f      	movs	r3, #15
 800141c:	60fb      	str	r3, [r7, #12]
	PID(&SPID, &SteeringControl, &SteeOut, &SteeSetpoint, KP ,KI,KD , _PID_P_ON_E, _PID_CD_DIRECT);
 800141e:	2300      	movs	r3, #0
 8001420:	9307      	str	r3, [sp, #28]
 8001422:	2301      	movs	r3, #1
 8001424:	9306      	str	r3, [sp, #24]
 8001426:	a328      	add	r3, pc, #160	; (adr r3, 80014c8 <CAN_TransmitTask+0xd0>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001430:	a327      	add	r3, pc, #156	; (adr r3, 80014d0 <CAN_TransmitTask+0xd8>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800143a:	a327      	add	r3, pc, #156	; (adr r3, 80014d8 <CAN_TransmitTask+0xe0>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	e9cd 2300 	strd	r2, r3, [sp]
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <CAN_TransmitTask+0xe8>)
 8001446:	4a29      	ldr	r2, [pc, #164]	; (80014ec <CAN_TransmitTask+0xf4>)
 8001448:	4929      	ldr	r1, [pc, #164]	; (80014f0 <CAN_TransmitTask+0xf8>)
 800144a:	482a      	ldr	r0, [pc, #168]	; (80014f4 <CAN_TransmitTask+0xfc>)
 800144c:	f006 fbf8 	bl	8007c40 <PID>
	PID_SetMode(&SPID, _PID_MODE_AUTOMATIC);
 8001450:	2101      	movs	r1, #1
 8001452:	4828      	ldr	r0, [pc, #160]	; (80014f4 <CAN_TransmitTask+0xfc>)
 8001454:	f006 fd26 	bl	8007ea4 <PID_SetMode>
	PID_SetSampleTime(&SPID, Time);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4619      	mov	r1, r3
 800145c:	4825      	ldr	r0, [pc, #148]	; (80014f4 <CAN_TransmitTask+0xfc>)
 800145e:	f006 fe8f 	bl	8008180 <PID_SetSampleTime>
	PID_SetOutputLimits(&SPID, -5, 5);
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <CAN_TransmitTask+0x100>)
 8001468:	e9cd 2300 	strd	r2, r3, [sp]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <CAN_TransmitTask+0x104>)
 8001472:	4820      	ldr	r0, [pc, #128]	; (80014f4 <CAN_TransmitTask+0xfc>)
 8001474:	f006 fd34 	bl	8007ee0 <PID_SetOutputLimits>
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,STRAIGHTANGLE);
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <CAN_TransmitTask+0x108>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2249      	movs	r2, #73	; 0x49
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	  if(Can_RecFlag==1){
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <CAN_TransmitTask+0x10c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d119      	bne.n	80014bc <CAN_TransmitTask+0xc4>
//	  	  }
//	  	  if(SPWM<RIGHTLIMIT)
//	  	  {
//	  		SPWM=RIGHTLIMIT;
//	  	  }
		  Steering_PIDControl(rcdata, &Steering, &SteeringControl, &SPWM, &SteeOut);
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <CAN_TransmitTask+0xf4>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <CAN_TransmitTask+0xec>)
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <CAN_TransmitTask+0xf8>)
 8001490:	491d      	ldr	r1, [pc, #116]	; (8001508 <CAN_TransmitTask+0x110>)
 8001492:	481e      	ldr	r0, [pc, #120]	; (800150c <CAN_TransmitTask+0x114>)
 8001494:	f006 feb0 	bl	80081f8 <Steering_PIDControl>
		  Servo=1;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <CAN_TransmitTask+0x118>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
		  PID_Compute(&SPID);
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <CAN_TransmitTask+0xfc>)
 80014a0:	f006 fc16 	bl	8007cd0 <PID_Compute>
		  Steering_Control(SPWM);
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <CAN_TransmitTask+0xec>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff faeb 	bl	8000a88 <__aeabi_d2uiz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 ff08 	bl	80082cc <Steering_Control>
	  	  }
	  osDelay(Time);
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f003 fe71 	bl	80051a4 <osDelay>
	  if(Can_RecFlag==1){
 80014c2:	e7dd      	b.n	8001480 <CAN_TransmitTask+0x88>
 80014c4:	f3af 8000 	nop.w
 80014c8:	2c3c9eed 	.word	0x2c3c9eed
 80014cc:	3fc59ad4 	.word	0x3fc59ad4
 80014d0:	2c3c9eed 	.word	0x2c3c9eed
 80014d4:	40259ad4 	.word	0x40259ad4
 80014d8:	2c3c9eed 	.word	0x2c3c9eed
 80014dc:	40059ad4 	.word	0x40059ad4
 80014e0:	200002f0 	.word	0x200002f0
 80014e4:	20000300 	.word	0x20000300
 80014e8:	40524000 	.word	0x40524000
 80014ec:	200002f8 	.word	0x200002f8
 80014f0:	20000380 	.word	0x20000380
 80014f4:	20000310 	.word	0x20000310
 80014f8:	40140000 	.word	0x40140000
 80014fc:	c0140000 	.word	0xc0140000
 8001500:	20000474 	.word	0x20000474
 8001504:	20000218 	.word	0x20000218
 8001508:	20000308 	.word	0x20000308
 800150c:	20000210 	.word	0x20000210
 8001510:	20000388 	.word	0x20000388

08001514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a2d      	ldr	r2, [pc, #180]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001546:	f043 0320 	orr.w	r3, r3, #32
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4816      	ldr	r0, [pc, #88]	; (80015e8 <MX_GPIO_Init+0xd4>)
 8001590:	f001 fdd4 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <MX_GPIO_Init+0xd8>)
 800159c:	f001 fdce 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <MX_GPIO_Init+0xd4>)
 80015ba:	f001 fc3b 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_GPIO_Init+0xd8>)
 80015d8:	f001 fc2c 	bl	8002e34 <HAL_GPIO_Init>

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 fd9a 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f846 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f7ff ff8a 	bl	8001514 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001600:	f000 faea 	bl	8001bd8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001604:	f000 fa3c 	bl	8001a80 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001608:	f000 fb3a 	bl	8001c80 <MX_TIM4_Init>
  MX_CAN_Init();
 800160c:	f7ff fd86 	bl	800111c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001610:	f000 fc7a 	bl	8001f08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001614:	f000 fca2 	bl	8001f5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001618:	2100      	movs	r1, #0
 800161a:	4815      	ldr	r0, [pc, #84]	; (8001670 <main+0x80>)
 800161c:	f002 fae0 	bl	8003be0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001620:	2100      	movs	r1, #0
 8001622:	4814      	ldr	r0, [pc, #80]	; (8001674 <main+0x84>)
 8001624:	f002 fadc 	bl	8003be0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001628:	210c      	movs	r1, #12
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <main+0x84>)
 800162c:	f002 fad8 	bl	8003be0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001630:	213c      	movs	r1, #60	; 0x3c
 8001632:	4811      	ldr	r0, [pc, #68]	; (8001678 <main+0x88>)
 8001634:	f002 fc18 	bl	8003e68 <HAL_TIM_Encoder_Start_IT>
  CAN_Config_filtering();
 8001638:	f7ff fd2c 	bl	8001094 <CAN_Config_filtering>
 if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 800163c:	2103      	movs	r1, #3
 800163e:	480f      	ldr	r0, [pc, #60]	; (800167c <main+0x8c>)
 8001640:	f001 f8cf 	bl	80027e2 <HAL_CAN_ActivateNotification>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <main+0x60>
	 printf("Start CAN IT Error");
 800164a:	480d      	ldr	r0, [pc, #52]	; (8001680 <main+0x90>)
 800164c:	f007 fdc4 	bl	80091d8 <iprintf>
 }
  if(HAL_CAN_Start(&hcan)!=HAL_OK){
 8001650:	480a      	ldr	r0, [pc, #40]	; (800167c <main+0x8c>)
 8001652:	f000 ff61 	bl	8002518 <HAL_CAN_Start>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <main+0x72>
	 printf("Start CAN Error");
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <main+0x94>)
 800165e:	f007 fdbb 	bl	80091d8 <iprintf>
 }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001662:	f003 fc8f 	bl	8004f84 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001666:	f7ff fdff 	bl	8001268 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800166a:	f003 fcbd 	bl	8004fe8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800166e:	e7fe      	b.n	800166e <main+0x7e>
 8001670:	20000474 	.word	0x20000474
 8001674:	200003e4 	.word	0x200003e4
 8001678:	2000042c 	.word	0x2000042c
 800167c:	2000021c 	.word	0x2000021c
 8001680:	0800cb58 	.word	0x0800cb58
 8001684:	0800cb6c 	.word	0x0800cb6c

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	; 0x40
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	2228      	movs	r2, #40	; 0x28
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f007 fe13 	bl	80092c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016bc:	2302      	movs	r3, #2
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fd4b 	bl	800316c <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016dc:	f000 f82c 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2302      	movs	r3, #2
 80016e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2102      	movs	r1, #2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 ffb8 	bl	8003670 <HAL_RCC_ClockConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001706:	f000 f817 	bl	8001738 <Error_Handler>
  }
}
 800170a:	bf00      	nop
 800170c:	3740      	adds	r7, #64	; 0x40
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001726:	f000 fd17 	bl	8002158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40000400 	.word	0x40000400

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_MspInit+0x68>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_MspInit+0x68>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_MspInit+0x68>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_MspInit+0x68>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_MspInit+0x68>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x68>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	210f      	movs	r1, #15
 800177e:	f06f 0001 	mvn.w	r0, #1
 8001782:	f001 fb2c 	bl	8002dde <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_MspInit+0x6c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_MspInit+0x6c>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	; 0x38
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_InitTick+0xe8>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a33      	ldr	r2, [pc, #204]	; (800189c <HAL_InitTick+0xe8>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_InitTick+0xe8>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e2:	f107 0210 	add.w	r2, r7, #16
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 f8af 	bl	8003950 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017fc:	f002 f880 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8001800:	6378      	str	r0, [r7, #52]	; 0x34
 8001802:	e004      	b.n	800180e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001804:	f002 f87c 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8001808:	4603      	mov	r3, r0
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_InitTick+0xec>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9b      	lsrs	r3, r3, #18
 8001818:	3b01      	subs	r3, #1
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_InitTick+0xf0>)
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <HAL_InitTick+0xf4>)
 8001820:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_InitTick+0xf0>)
 8001824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001828:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800182a:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_InitTick+0xf0>)
 800182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_InitTick+0xf0>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_InitTick+0xf0>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_InitTick+0xf0>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001842:	4818      	ldr	r0, [pc, #96]	; (80018a4 <HAL_InitTick+0xf0>)
 8001844:	f002 f8d2 	bl	80039ec <HAL_TIM_Base_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800184e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11b      	bne.n	800188e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001856:	4813      	ldr	r0, [pc, #76]	; (80018a4 <HAL_InitTick+0xf0>)
 8001858:	f002 f918 	bl	8003a8c <HAL_TIM_Base_Start_IT>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001866:	2b00      	cmp	r3, #0
 8001868:	d111      	bne.n	800188e <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800186a:	201d      	movs	r0, #29
 800186c:	f001 fad3 	bl	8002e16 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b0f      	cmp	r3, #15
 8001874:	d808      	bhi.n	8001888 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001876:	2200      	movs	r2, #0
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	201d      	movs	r0, #29
 800187c:	f001 faaf 	bl	8002dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_InitTick+0xf8>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e002      	b.n	800188e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800188e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001892:	4618      	mov	r0, r3
 8001894:	3738      	adds	r7, #56	; 0x38
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	431bde83 	.word	0x431bde83
 80018a4:	20000398 	.word	0x20000398
 80018a8:	40000400 	.word	0x40000400
 80018ac:	20000004 	.word	0x20000004

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
	...

080018dc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80018e2:	f000 ffa3 	bl	800282c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000021c 	.word	0x2000021c

080018f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018f6:	f000 ff99 	bl	800282c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000021c 	.word	0x2000021c

08001904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM2_IRQHandler+0x10>)
 800190a:	f002 fb5b 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000042c 	.word	0x2000042c

08001918 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM3_IRQHandler+0x10>)
 800191e:	f002 fb51 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000398 	.word	0x20000398

0800192c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <_kill>:

int _kill(int pid, int sig)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001944:	f007 fd10 	bl	8009368 <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	2216      	movs	r2, #22
 800194c:	601a      	str	r2, [r3, #0]
  return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_exit>:

void _exit (int status)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001962:	f04f 31ff 	mov.w	r1, #4294967295
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffe7 	bl	800193a <_kill>
  while (1) {}    /* Make sure we hang here */
 800196c:	e7fe      	b.n	800196c <_exit+0x12>

0800196e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e00a      	b.n	8001996 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001980:	f3af 8000 	nop.w
 8001984:	4601      	mov	r1, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	b2ca      	uxtb	r2, r1
 800198e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	dbf0      	blt.n	8001980 <_read+0x12>
  }

  return len;
 800199e:	687b      	ldr	r3, [r7, #4]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <_isatty>:

int _isatty(int file)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f007 fc96 	bl	8009368 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20005000 	.word	0x20005000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	200003e0 	.word	0x200003e0
 8001a70:	20001ff0 	.word	0x20001ff0

08001a74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b096      	sub	sp, #88	; 0x58
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f007 fc02 	bl	80092c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001ac0:	4a44      	ldr	r2, [pc, #272]	; (8001bd4 <MX_TIM1_Init+0x154>)
 8001ac2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001ac6:	2247      	movs	r2, #71	; 0x47
 8001ac8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001ad2:	2263      	movs	r2, #99	; 0x63
 8001ad4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ae8:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001aea:	f001 ff7f 	bl	80039ec <HAL_TIM_Base_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001af4:	f7ff fe20 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001afe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b02:	4619      	mov	r1, r3
 8001b04:	4832      	ldr	r0, [pc, #200]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001b06:	f002 fc27 	bl	8004358 <HAL_TIM_ConfigClockSource>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001b10:	f7ff fe12 	bl	8001738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b14:	482e      	ldr	r0, [pc, #184]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001b16:	f002 f80b 	bl	8003b30 <HAL_TIM_PWM_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b20:	f7ff fe0a 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b30:	4619      	mov	r1, r3
 8001b32:	4827      	ldr	r0, [pc, #156]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001b34:	f002 ff96 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001b3e:	f7ff fdfb 	bl	8001738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b42:	2360      	movs	r3, #96	; 0x60
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	2200      	movs	r2, #0
 8001b64:	4619      	mov	r1, r3
 8001b66:	481a      	ldr	r0, [pc, #104]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001b68:	f002 fb34 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001b72:	f7ff fde1 	bl	8001738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4814      	ldr	r0, [pc, #80]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001b80:	f002 fb28 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001b8a:	f7ff fdd5 	bl	8001738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001bb2:	f002 ffb5 	bl	8004b20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001bbc:	f7ff fdbc 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <MX_TIM1_Init+0x150>)
 8001bc2:	f000 f94b 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8001bc6:	bf00      	nop
 8001bc8:	3758      	adds	r7, #88	; 0x58
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003e4 	.word	0x200003e4
 8001bd4:	40012c00 	.word	0x40012c00

08001bd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f007 fb6b 	bl	80092c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c48:	f002 f86c 	bl	8003d24 <HAL_TIM_Encoder_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c52:	f7ff fd71 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c64:	f002 fefe 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c6e:	f7ff fd63 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	; 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000042c 	.word	0x2000042c

08001c80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	f107 0320 	add.w	r3, r7, #32
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
 8001cac:	615a      	str	r2, [r3, #20]
 8001cae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cb2:	4a2e      	ldr	r2, [pc, #184]	; (8001d6c <MX_TIM4_Init+0xec>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1439;
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cb8:	f240 529f 	movw	r2, #1439	; 0x59f
 8001cbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cd8:	4823      	ldr	r0, [pc, #140]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cda:	f001 fe87 	bl	80039ec <HAL_TIM_Base_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001ce4:	f7ff fd28 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481c      	ldr	r0, [pc, #112]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001cf6:	f002 fb2f 	bl	8004358 <HAL_TIM_ConfigClockSource>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001d00:	f7ff fd1a 	bl	8001738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d04:	4818      	ldr	r0, [pc, #96]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001d06:	f001 ff13 	bl	8003b30 <HAL_TIM_PWM_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001d10:	f7ff fd12 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	4619      	mov	r1, r3
 8001d22:	4811      	ldr	r0, [pc, #68]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001d24:	f002 fe9e 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d2e:	f7ff fd03 	bl	8001738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d32:	2360      	movs	r3, #96	; 0x60
 8001d34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2200      	movs	r2, #0
 8001d46:	4619      	mov	r1, r3
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001d4a:	f002 fa43 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d54:	f7ff fcf0 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <MX_TIM4_Init+0xe8>)
 8001d5a:	f000 f87f 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8001d5e:	bf00      	nop
 8001d60:	3738      	adds	r7, #56	; 0x38
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000474 	.word	0x20000474
 8001d6c:	40000800 	.word	0x40000800

08001d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_TIM_Base_MspInit+0x58>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10c      	bne.n	8001d9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_TIM_Base_MspInit+0x5c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_TIM_Base_MspInit+0x5c>)
 8001d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8c:	6193      	str	r3, [r2, #24]
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_TIM_Base_MspInit+0x5c>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d9a:	e010      	b.n	8001dbe <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_TIM_Base_MspInit+0x60>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10b      	bne.n	8001dbe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_TIM_Base_MspInit+0x5c>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_TIM_Base_MspInit+0x5c>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_TIM_Base_MspInit+0x5c>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40000800 	.word	0x40000800

08001dd4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d12b      	bne.n	8001e4c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_TIM_Encoder_MspInit+0x80>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <HAL_TIM_Encoder_MspInit+0x80>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	61d3      	str	r3, [r2, #28]
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_TIM_Encoder_MspInit+0x80>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e24:	2303      	movs	r3, #3
 8001e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	4808      	ldr	r0, [pc, #32]	; (8001e58 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e38:	f000 fffc 	bl	8002e34 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2105      	movs	r1, #5
 8001e40:	201c      	movs	r0, #28
 8001e42:	f000 ffcc 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e46:	201c      	movs	r0, #28
 8001e48:	f000 ffe5 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800

08001e5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_TIM_MspPostInit+0x98>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d119      	bne.n	8001eb0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001e94:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4814      	ldr	r0, [pc, #80]	; (8001efc <HAL_TIM_MspPostInit+0xa0>)
 8001eaa:	f000 ffc3 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001eae:	e01c      	b.n	8001eea <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_TIM_MspPostInit+0xa4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d117      	bne.n	8001eea <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4807      	ldr	r0, [pc, #28]	; (8001f04 <HAL_TIM_MspPostInit+0xa8>)
 8001ee6:	f000 ffa5 	bl	8002e34 <HAL_GPIO_Init>
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010800 	.word	0x40010800
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40010c00 	.word	0x40010c00

08001f08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <MX_USART1_UART_Init+0x50>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_USART1_UART_Init+0x4c>)
 8001f40:	f002 fe51 	bl	8004be6 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f4a:	f7ff fbf5 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200004bc 	.word	0x200004bc
 8001f58:	40013800 	.word	0x40013800

08001f5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <MX_USART2_UART_Init+0x50>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_USART2_UART_Init+0x4c>)
 8001f94:	f002 fe27 	bl	8004be6 <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f9e:	f7ff fbcb 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000504 	.word	0x20000504
 8001fac:	40004400 	.word	0x40004400

08001fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0318 	add.w	r3, r7, #24
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <HAL_UART_MspInit+0xf8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d132      	bne.n	8002036 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f107 0318 	add.w	r3, r7, #24
 8002012:	4619      	mov	r1, r3
 8002014:	4826      	ldr	r0, [pc, #152]	; (80020b0 <HAL_UART_MspInit+0x100>)
 8002016:	f000 ff0d 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800201a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4619      	mov	r1, r3
 800202e:	4820      	ldr	r0, [pc, #128]	; (80020b0 <HAL_UART_MspInit+0x100>)
 8002030:	f000 ff00 	bl	8002e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002034:	e034      	b.n	80020a0 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_UART_MspInit+0x104>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d12f      	bne.n	80020a0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8002046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204a:	61d3      	str	r3, [r2, #28]
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_UART_MspInit+0xfc>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_UART_MspInit+0xfc>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a13      	ldr	r2, [pc, #76]	; (80020ac <HAL_UART_MspInit+0xfc>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_UART_MspInit+0xfc>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002070:	2304      	movs	r3, #4
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	4619      	mov	r1, r3
 8002082:	480b      	ldr	r0, [pc, #44]	; (80020b0 <HAL_UART_MspInit+0x100>)
 8002084:	f000 fed6 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002088:	2308      	movs	r3, #8
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0318 	add.w	r3, r7, #24
 8002098:	4619      	mov	r1, r3
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <HAL_UART_MspInit+0x100>)
 800209c:	f000 feca 	bl	8002e34 <HAL_GPIO_Init>
}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40004400 	.word	0x40004400

080020b8 <_write>:
}

/* USER CODE BEGIN 1 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, UART_Delay);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	230a      	movs	r3, #10
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <_write+0x24>)
 80020ce:	f002 fdda 	bl	8004c86 <HAL_UART_Transmit>
  return len;
 80020d2:	687b      	ldr	r3, [r7, #4]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200004bc 	.word	0x200004bc

080020e0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 80020e0:	f7ff fcc8 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480b      	ldr	r0, [pc, #44]	; (8002114 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020e6:	490c      	ldr	r1, [pc, #48]	; (8002118 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020e8:	4a0c      	ldr	r2, [pc, #48]	; (800211c <LoopFillZerobss+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020fc:	4c09      	ldr	r4, [pc, #36]	; (8002124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f007 f933 	bl	8009374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210e:	f7ff fa6f 	bl	80015f0 <main>
  bx lr
 8002112:	4770      	bx	lr
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800211c:	0800d060 	.word	0x0800d060
  ldr r2, =_sbss
 8002120:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002124:	20001fec 	.word	0x20001fec

08002128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC1_2_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_Init+0x28>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_Init+0x28>)
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 fe43 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	200f      	movs	r0, #15
 8002144:	f7ff fb36 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fafc 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_IncTick+0x1c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_IncTick+0x20>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_IncTick+0x20>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000008 	.word	0x20000008
 8002178:	2000054c 	.word	0x2000054c

0800217c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_GetTick+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	2000054c 	.word	0x2000054c

08002190 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0ed      	b.n	800237e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe ffea 	bl	8001188 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff ffda 	bl	800217c <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ca:	e012      	b.n	80021f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021cc:	f7ff ffd6 	bl	800217c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b0a      	cmp	r3, #10
 80021d8:	d90b      	bls.n	80021f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2205      	movs	r2, #5
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0c5      	b.n	800237e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0e5      	beq.n	80021cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0202 	bic.w	r2, r2, #2
 800220e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002210:	f7ff ffb4 	bl	800217c <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002216:	e012      	b.n	800223e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002218:	f7ff ffb0 	bl	800217c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b0a      	cmp	r3, #10
 8002224:	d90b      	bls.n	800223e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2205      	movs	r2, #5
 8002236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e09f      	b.n	800237e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e5      	bne.n	8002218 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e1b      	ldrb	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e007      	b.n	8002276 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e5b      	ldrb	r3, [r3, #25]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e007      	b.n	80022a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e9b      	ldrb	r3, [r3, #26]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0220 	bic.w	r2, r2, #32
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7edb      	ldrb	r3, [r3, #27]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0210 	bic.w	r2, r2, #16
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e007      	b.n	80022f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0210 	orr.w	r2, r2, #16
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7f1b      	ldrb	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e007      	b.n	800231e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7f5b      	ldrb	r3, [r3, #29]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0204 	orr.w	r2, r2, #4
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0204 	bic.w	r2, r2, #4
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	ea42 0103 	orr.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002386:	b480      	push	{r7}
 8002388:	b087      	sub	sp, #28
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d003      	beq.n	80023ac <HAL_CAN_ConfigFilter+0x26>
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	f040 80aa 	bne.w	8002500 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2201      	movs	r2, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d123      	bne.n	800242e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	401a      	ands	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002408:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3248      	adds	r2, #72	; 0x48
 800240e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002422:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002424:	6979      	ldr	r1, [r7, #20]
 8002426:	3348      	adds	r3, #72	; 0x48
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d122      	bne.n	800247c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	431a      	orrs	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002456:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3248      	adds	r2, #72	; 0x48
 800245c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002470:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002472:	6979      	ldr	r1, [r7, #20]
 8002474:	3348      	adds	r3, #72	; 0x48
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002496:	e007      	b.n	80024a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024c2:	e007      	b.n	80024d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d107      	bne.n	80024ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024f2:	f023 0201 	bic.w	r2, r3, #1
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e006      	b.n	800250e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d12e      	bne.n	800258a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002544:	f7ff fe1a 	bl	800217c <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800254a:	e012      	b.n	8002572 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800254c:	f7ff fe16 	bl	800217c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d90b      	bls.n	8002572 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e012      	b.n	8002598 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1e5      	bne.n	800254c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e006      	b.n	8002598 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d003      	beq.n	80025c4 <HAL_CAN_GetRxMessage+0x24>
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	f040 8103 	bne.w	80027ca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d116      	bne.n	8002606 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0f7      	b.n	80027d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0e8      	b.n	80027d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	331b      	adds	r3, #27
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0204 	and.w	r2, r3, #4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10c      	bne.n	800263e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	331b      	adds	r3, #27
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0d5b      	lsrs	r3, r3, #21
 8002634:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e00b      	b.n	8002656 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	331b      	adds	r3, #27
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	331b      	adds	r3, #27
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0202 	and.w	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	331b      	adds	r3, #27
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2208      	movs	r2, #8
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	e00b      	b.n	80026a4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	331b      	adds	r3, #27
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	4413      	add	r3, r2
 8002698:	3304      	adds	r3, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 020f 	and.w	r2, r3, #15
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	331b      	adds	r3, #27
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	3304      	adds	r3, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	331b      	adds	r3, #27
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0a1a      	lsrs	r2, r3, #8
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0c1a      	lsrs	r2, r3, #16
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3302      	adds	r3, #2
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e1a      	lsrs	r2, r3, #24
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3303      	adds	r3, #3
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4413      	add	r3, r2
 8002742:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3304      	adds	r3, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4413      	add	r3, r2
 800275a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0a1a      	lsrs	r2, r3, #8
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3305      	adds	r3, #5
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	4413      	add	r3, r2
 8002774:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0c1a      	lsrs	r2, r3, #16
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	3306      	adds	r3, #6
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4413      	add	r3, r2
 800278e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e1a      	lsrs	r2, r3, #24
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3307      	adds	r3, #7
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d108      	bne.n	80027b6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0220 	orr.w	r2, r2, #32
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	e007      	b.n	80027c6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e006      	b.n	80027d8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d002      	beq.n	8002800 <HAL_CAN_ActivateNotification+0x1e>
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d109      	bne.n	8002814 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6959      	ldr	r1, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e006      	b.n	8002822 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d07c      	beq.n	800296c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f983 	bl	8002b9a <HAL_CAN_TxMailbox0CompleteCallback>
 8002894:	e016      	b.n	80028c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	e00c      	b.n	80028c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	e002      	b.n	80028c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f986 	bl	8002bd0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d024      	beq.n	8002918 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f962 	bl	8002bac <HAL_CAN_TxMailbox1CompleteCallback>
 80028e8:	e016      	b.n	8002918 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
 80028fc:	e00c      	b.n	8002918 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e002      	b.n	8002918 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f965 	bl	8002be2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800292a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f941 	bl	8002bbe <HAL_CAN_TxMailbox2CompleteCallback>
 800293c:	e016      	b.n	800296c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	e00c      	b.n	800296c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	e002      	b.n	800296c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f944 	bl	8002bf4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002986:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2210      	movs	r2, #16
 800298e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2208      	movs	r2, #8
 80029aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f92a 	bl	8002c06 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe fb88 	bl	80010e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2210      	movs	r2, #16
 80029f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f90a 	bl	8002c2a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8f2 	bl	8002c18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8f3 	bl	8002c3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2208      	movs	r2, #8
 8002a70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8eb 	bl	8002c4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d07b      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d072      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d043      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d03e      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002afa:	2b60      	cmp	r3, #96	; 0x60
 8002afc:	d02b      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x32a>
 8002afe:	2b60      	cmp	r3, #96	; 0x60
 8002b00:	d82e      	bhi.n	8002b60 <HAL_CAN_IRQHandler+0x334>
 8002b02:	2b50      	cmp	r3, #80	; 0x50
 8002b04:	d022      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x320>
 8002b06:	2b50      	cmp	r3, #80	; 0x50
 8002b08:	d82a      	bhi.n	8002b60 <HAL_CAN_IRQHandler+0x334>
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d019      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x316>
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d826      	bhi.n	8002b60 <HAL_CAN_IRQHandler+0x334>
 8002b12:	2b30      	cmp	r3, #48	; 0x30
 8002b14:	d010      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x30c>
 8002b16:	2b30      	cmp	r3, #48	; 0x30
 8002b18:	d822      	bhi.n	8002b60 <HAL_CAN_IRQHandler+0x334>
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d002      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x2f8>
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d005      	beq.n	8002b2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b22:	e01d      	b.n	8002b60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b2c:	e019      	b.n	8002b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	f043 0310 	orr.w	r3, r3, #16
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b36:	e014      	b.n	8002b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b40:	e00f      	b.n	8002b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b4a:	e00a      	b.n	8002b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b54:	e005      	b.n	8002b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b5e:	e000      	b.n	8002b62 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2204      	movs	r2, #4
 8002b78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f867 	bl	8002c60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
	...

08002c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c90:	4013      	ands	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca6:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	60d3      	str	r3, [r2, #12]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0307 	and.w	r3, r3, #7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db0b      	blt.n	8002d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4906      	ldr	r1, [pc, #24]	; (8002d0c <__NVIC_EnableIRQ+0x34>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
         );
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff4f 	bl	8002c74 <__NVIC_SetPriorityGrouping>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff64 	bl	8002cbc <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ffb2 	bl	8002d64 <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff81 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff57 	bl	8002cd8 <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e46:	e169      	b.n	800311c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8158 	bne.w	8003116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a9a      	ldr	r2, [pc, #616]	; (80030d4 <HAL_GPIO_Init+0x2a0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d05e      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e70:	4a98      	ldr	r2, [pc, #608]	; (80030d4 <HAL_GPIO_Init+0x2a0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d875      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e76:	4a98      	ldr	r2, [pc, #608]	; (80030d8 <HAL_GPIO_Init+0x2a4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d058      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e7c:	4a96      	ldr	r2, [pc, #600]	; (80030d8 <HAL_GPIO_Init+0x2a4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d86f      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e82:	4a96      	ldr	r2, [pc, #600]	; (80030dc <HAL_GPIO_Init+0x2a8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d052      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e88:	4a94      	ldr	r2, [pc, #592]	; (80030dc <HAL_GPIO_Init+0x2a8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d869      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e8e:	4a94      	ldr	r2, [pc, #592]	; (80030e0 <HAL_GPIO_Init+0x2ac>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04c      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e94:	4a92      	ldr	r2, [pc, #584]	; (80030e0 <HAL_GPIO_Init+0x2ac>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d863      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e9a:	4a92      	ldr	r2, [pc, #584]	; (80030e4 <HAL_GPIO_Init+0x2b0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d046      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002ea0:	4a90      	ldr	r2, [pc, #576]	; (80030e4 <HAL_GPIO_Init+0x2b0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d85d      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d82a      	bhi.n	8002f00 <HAL_GPIO_Init+0xcc>
 8002eaa:	2b12      	cmp	r3, #18
 8002eac:	d859      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <HAL_GPIO_Init+0x80>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002f2f 	.word	0x08002f2f
 8002eb8:	08002f09 	.word	0x08002f09
 8002ebc:	08002f1b 	.word	0x08002f1b
 8002ec0:	08002f5d 	.word	0x08002f5d
 8002ec4:	08002f63 	.word	0x08002f63
 8002ec8:	08002f63 	.word	0x08002f63
 8002ecc:	08002f63 	.word	0x08002f63
 8002ed0:	08002f63 	.word	0x08002f63
 8002ed4:	08002f63 	.word	0x08002f63
 8002ed8:	08002f63 	.word	0x08002f63
 8002edc:	08002f63 	.word	0x08002f63
 8002ee0:	08002f63 	.word	0x08002f63
 8002ee4:	08002f63 	.word	0x08002f63
 8002ee8:	08002f63 	.word	0x08002f63
 8002eec:	08002f63 	.word	0x08002f63
 8002ef0:	08002f63 	.word	0x08002f63
 8002ef4:	08002f63 	.word	0x08002f63
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f06:	e02c      	b.n	8002f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	623b      	str	r3, [r7, #32]
          break;
 8002f0e:	e029      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	3304      	adds	r3, #4
 8002f16:	623b      	str	r3, [r7, #32]
          break;
 8002f18:	e024      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	3308      	adds	r3, #8
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e01f      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e01a      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f36:	2304      	movs	r3, #4
 8002f38:	623b      	str	r3, [r7, #32]
          break;
 8002f3a:	e013      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f44:	2308      	movs	r3, #8
 8002f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	611a      	str	r2, [r3, #16]
          break;
 8002f4e:	e009      	b.n	8002f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f50:	2308      	movs	r3, #8
 8002f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	615a      	str	r2, [r3, #20]
          break;
 8002f5a:	e003      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
          break;
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          break;
 8002f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2bff      	cmp	r3, #255	; 0xff
 8002f68:	d801      	bhi.n	8002f6e <HAL_GPIO_Init+0x13a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	e001      	b.n	8002f72 <HAL_GPIO_Init+0x13e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d802      	bhi.n	8002f80 <HAL_GPIO_Init+0x14c>
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	e002      	b.n	8002f86 <HAL_GPIO_Init+0x152>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	3b08      	subs	r3, #8
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	210f      	movs	r1, #15
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80b1 	beq.w	8003116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fcc:	4a48      	ldr	r2, [pc, #288]	; (80030f0 <HAL_GPIO_Init+0x2bc>)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4013      	ands	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <HAL_GPIO_Init+0x2c0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_GPIO_Init+0x1ec>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <HAL_GPIO_Init+0x2c4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00d      	beq.n	800301c <HAL_GPIO_Init+0x1e8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3e      	ldr	r2, [pc, #248]	; (80030fc <HAL_GPIO_Init+0x2c8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <HAL_GPIO_Init+0x1e4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3d      	ldr	r2, [pc, #244]	; (8003100 <HAL_GPIO_Init+0x2cc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_GPIO_Init+0x1e0>
 8003010:	2303      	movs	r3, #3
 8003012:	e006      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003014:	2304      	movs	r3, #4
 8003016:	e004      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003018:	2302      	movs	r3, #2
 800301a:	e002      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003020:	2300      	movs	r3, #0
 8003022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003024:	f002 0203 	and.w	r2, r2, #3
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	4093      	lsls	r3, r2
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003032:	492f      	ldr	r1, [pc, #188]	; (80030f0 <HAL_GPIO_Init+0x2bc>)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	3302      	adds	r3, #2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	492c      	ldr	r1, [pc, #176]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800305a:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	43db      	mvns	r3, r3
 8003062:	4928      	ldr	r1, [pc, #160]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003064:	4013      	ands	r3, r2
 8003066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	4922      	ldr	r1, [pc, #136]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	60cb      	str	r3, [r1, #12]
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	43db      	mvns	r3, r3
 800308a:	491e      	ldr	r1, [pc, #120]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800308c:	4013      	ands	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4918      	ldr	r1, [pc, #96]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	4914      	ldr	r1, [pc, #80]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d021      	beq.n	8003108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	490e      	ldr	r1, [pc, #56]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e021      	b.n	8003116 <HAL_GPIO_Init+0x2e2>
 80030d2:	bf00      	nop
 80030d4:	10320000 	.word	0x10320000
 80030d8:	10310000 	.word	0x10310000
 80030dc:	10220000 	.word	0x10220000
 80030e0:	10210000 	.word	0x10210000
 80030e4:	10120000 	.word	0x10120000
 80030e8:	10110000 	.word	0x10110000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40010800 	.word	0x40010800
 80030f8:	40010c00 	.word	0x40010c00
 80030fc:	40011000 	.word	0x40011000
 8003100:	40011400 	.word	0x40011400
 8003104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_GPIO_Init+0x304>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	43db      	mvns	r3, r3
 8003110:	4909      	ldr	r1, [pc, #36]	; (8003138 <HAL_GPIO_Init+0x304>)
 8003112:	4013      	ands	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	3301      	adds	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f ae8e 	bne.w	8002e48 <HAL_GPIO_Init+0x14>
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	372c      	adds	r7, #44	; 0x2c
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
 8003148:	4613      	mov	r3, r2
 800314a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800314c:	787b      	ldrb	r3, [r7, #1]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003158:	e003      	b.n	8003162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	041a      	lsls	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e272      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8087 	beq.w	800329a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800318c:	4b92      	ldr	r3, [pc, #584]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b04      	cmp	r3, #4
 8003196:	d00c      	beq.n	80031b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003198:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d112      	bne.n	80031ca <HAL_RCC_OscConfig+0x5e>
 80031a4:	4b8c      	ldr	r3, [pc, #560]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b0:	d10b      	bne.n	80031ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b2:	4b89      	ldr	r3, [pc, #548]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d06c      	beq.n	8003298 <HAL_RCC_OscConfig+0x12c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d168      	bne.n	8003298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e24c      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x76>
 80031d4:	4b80      	ldr	r3, [pc, #512]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a7f      	ldr	r2, [pc, #508]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	e02e      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x98>
 80031ea:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7a      	ldr	r2, [pc, #488]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b78      	ldr	r3, [pc, #480]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a77      	ldr	r2, [pc, #476]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e01d      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0xbc>
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a71      	ldr	r2, [pc, #452]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0xd4>
 8003228:	4b6b      	ldr	r3, [pc, #428]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6a      	ldr	r2, [pc, #424]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a67      	ldr	r2, [pc, #412]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe ff98 	bl	800217c <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe ff94 	bl	800217c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e200      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0xe4>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe ff84 	bl	800217c <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003278:	f7fe ff80 	bl	800217c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1ec      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x10c>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a6:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d11c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x18c>
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1c0      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4939      	ldr	r1, [pc, #228]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	e03a      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe ff39 	bl	800217c <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330e:	f7fe ff35 	bl	800217c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1a1      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4927      	ldr	r1, [pc, #156]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <HAL_RCC_OscConfig+0x270>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe ff18 	bl	800217c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003350:	f7fe ff14 	bl	800217c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e180      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03a      	beq.n	80033f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d019      	beq.n	80033b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_RCC_OscConfig+0x274>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003388:	f7fe fef8 	bl	800217c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003390:	f7fe fef4 	bl	800217c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e160      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ae:	2001      	movs	r0, #1
 80033b0:	f000 fafe 	bl	80039b0 <RCC_Delay>
 80033b4:	e01c      	b.n	80033f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_RCC_OscConfig+0x274>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe fede 	bl	800217c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c2:	e00f      	b.n	80033e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe feda 	bl	800217c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d908      	bls.n	80033e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e146      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	42420000 	.word	0x42420000
 80033e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	4b92      	ldr	r3, [pc, #584]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e9      	bne.n	80033c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a6 	beq.w	800354a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003402:	4b8b      	ldr	r3, [pc, #556]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10d      	bne.n	800342a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	4b88      	ldr	r3, [pc, #544]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4a87      	ldr	r2, [pc, #540]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	61d3      	str	r3, [r2, #28]
 800341a:	4b85      	ldr	r3, [pc, #532]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b82      	ldr	r3, [pc, #520]	; (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d118      	bne.n	8003468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003436:	4b7f      	ldr	r3, [pc, #508]	; (8003634 <HAL_RCC_OscConfig+0x4c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7e      	ldr	r2, [pc, #504]	; (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fe fe9b 	bl	800217c <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344a:	f7fe fe97 	bl	800217c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e103      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b75      	ldr	r3, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x4c8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x312>
 8003470:	4b6f      	ldr	r3, [pc, #444]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a6e      	ldr	r2, [pc, #440]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	e02d      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x334>
 8003486:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a69      	ldr	r2, [pc, #420]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	4b67      	ldr	r3, [pc, #412]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a66      	ldr	r2, [pc, #408]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	e01c      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCC_OscConfig+0x356>
 80034a8:	4b61      	ldr	r3, [pc, #388]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a60      	ldr	r2, [pc, #384]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	4b5e      	ldr	r3, [pc, #376]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a5d      	ldr	r2, [pc, #372]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e00b      	b.n	80034da <HAL_RCC_OscConfig+0x36e>
 80034c2:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a5a      	ldr	r2, [pc, #360]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	4b58      	ldr	r3, [pc, #352]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a57      	ldr	r2, [pc, #348]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d015      	beq.n	800350e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fe fe4b 	bl	800217c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe fe47 	bl	800217c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0b1      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ee      	beq.n	80034ea <HAL_RCC_OscConfig+0x37e>
 800350c:	e014      	b.n	8003538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe fe35 	bl	800217c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe fe31 	bl	800217c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	; 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e09b      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	4b40      	ldr	r3, [pc, #256]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ee      	bne.n	8003516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4b3c      	ldr	r3, [pc, #240]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4a3b      	ldr	r2, [pc, #236]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8087 	beq.w	8003662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003554:	4b36      	ldr	r3, [pc, #216]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d061      	beq.n	8003624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d146      	bne.n	80035f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b33      	ldr	r3, [pc, #204]	; (8003638 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe fe05 	bl	800217c <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fe01 	bl	800217c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e06d      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003588:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d108      	bne.n	80035b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4921      	ldr	r1, [pc, #132]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b0:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a19      	ldr	r1, [r3, #32]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	430b      	orrs	r3, r1
 80035c2:	491b      	ldr	r1, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c8:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fe fdd5 	bl	800217c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fdd1 	bl	800217c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03d      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x46a>
 80035f4:	e035      	b.n	8003662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_RCC_OscConfig+0x4cc>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fe fdbe 	bl	800217c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe fdba 	bl	800217c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e026      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x498>
 8003622:	e01e      	b.n	8003662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e019      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
 8003638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x500>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000

08003670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0d0      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d910      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4965      	ldr	r1, [pc, #404]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0b8      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a58      	ldr	r2, [pc, #352]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	494d      	ldr	r1, [pc, #308]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d040      	beq.n	8003790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d115      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e073      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e06b      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374e:	4b39      	ldr	r3, [pc, #228]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4936      	ldr	r1, [pc, #216]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003760:	f7fe fd0c 	bl	800217c <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	e00a      	b.n	800377e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003768:	f7fe fd08 	bl	800217c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	; 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e053      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 020c 	and.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	429a      	cmp	r2, r3
 800378e:	d1eb      	bne.n	8003768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d210      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4922      	ldr	r1, [pc, #136]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e032      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4916      	ldr	r1, [pc, #88]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037fe:	f000 f821 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003802:	4602      	mov	r2, r0
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	490a      	ldr	r1, [pc, #40]	; (8003838 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	5ccb      	ldrb	r3, [r1, r3]
 8003812:	fa22 f303 	lsr.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1cc>)
 8003818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1d0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd ffc8 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40022000 	.word	0x40022000
 8003834:	40021000 	.word	0x40021000
 8003838:	0800cc00 	.word	0x0800cc00
 800383c:	20000000 	.word	0x20000000
 8003840:	20000004 	.word	0x20000004

08003844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x30>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x36>
 8003872:	e027      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003876:	613b      	str	r3, [r7, #16]
      break;
 8003878:	e027      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	0c9b      	lsrs	r3, r3, #18
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003884:	5cd3      	ldrb	r3, [r2, r3]
 8003886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	0c5b      	lsrs	r3, r3, #17
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 80038a6:	fb03 f202 	mul.w	r2, r3, r2
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e004      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	613b      	str	r3, [r7, #16]
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetSysClockFreq+0x98>)
 80038c6:	613b      	str	r3, [r7, #16]
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	693b      	ldr	r3, [r7, #16]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	007a1200 	.word	0x007a1200
 80038e0:	0800cc18 	.word	0x0800cc18
 80038e4:	0800cc28 	.word	0x0800cc28
 80038e8:	003d0900 	.word	0x003d0900

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b02      	ldr	r3, [pc, #8]	; (80038fc <HAL_RCC_GetHCLKFreq+0x10>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff2 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	0800cc10 	.word	0x0800cc10

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffde 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0adb      	lsrs	r3, r3, #11
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	0800cc10 	.word	0x0800cc10

08003950 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	220f      	movs	r2, #15
 800395e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_GetClockConfig+0x58>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0203 	and.w	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <HAL_RCC_GetClockConfig+0x58>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_GetClockConfig+0x58>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCC_GetClockConfig+0x58>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	08db      	lsrs	r3, r3, #3
 800398a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_GetClockConfig+0x5c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40022000 	.word	0x40022000

080039b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <RCC_Delay+0x34>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <RCC_Delay+0x38>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0a5b      	lsrs	r3, r3, #9
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039cc:	bf00      	nop
  }
  while (Delay --);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	60fa      	str	r2, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f9      	bne.n	80039cc <RCC_Delay+0x1c>
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	20000000 	.word	0x20000000
 80039e8:	10624dd3 	.word	0x10624dd3

080039ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e041      	b.n	8003a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe f9ac 	bl	8001d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 fd76 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e03a      	b.n	8003b1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_TIM_Base_Start_IT+0x98>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x58>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d009      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x58>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x58>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d111      	bne.n	8003b08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d010      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	e007      	b.n	8003b18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800

08003b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e041      	b.n	8003bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f839 	bl	8003bce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f000 fcd4 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_TIM_PWM_Start+0x24>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e022      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d109      	bne.n	8003c1e <HAL_TIM_PWM_Start+0x3e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	e015      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_PWM_Start+0x58>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e008      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e05e      	b.n	8003d10 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x82>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x92>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fec2 	bl	8004a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_TIM_PWM_Start+0x138>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_TIM_PWM_Start+0x138>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <HAL_TIM_PWM_Start+0xfa>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d009      	beq.n	8003cda <HAL_TIM_PWM_Start+0xfa>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <HAL_TIM_PWM_Start+0x13c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_TIM_PWM_Start+0xfa>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <HAL_TIM_PWM_Start+0x140>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d111      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d010      	beq.n	8003d0e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfc:	e007      	b.n	8003d0e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800

08003d24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e093      	b.n	8003e60 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fe f841 	bl	8001dd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d68:	f023 0307 	bic.w	r3, r3, #7
 8003d6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 fbcf 	bl	800451c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	4313      	orrs	r3, r2
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003dc4:	f023 030c 	bic.w	r3, r3, #12
 8003dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	4313      	orrs	r3, r2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	011a      	lsls	r2, r3, #4
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	031b      	lsls	r3, r3, #12
 8003df4:	4313      	orrs	r3, r2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d110      	bne.n	8003eba <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e9e:	7b7b      	ldrb	r3, [r7, #13]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e089      	b.n	8003fbc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb8:	e031      	b.n	8003f1e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d110      	bne.n	8003ee2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec0:	7bbb      	ldrb	r3, [r7, #14]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ec6:	7b3b      	ldrb	r3, [r7, #12]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d001      	beq.n	8003ed0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e075      	b.n	8003fbc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee0:	e01d      	b.n	8003f1e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d108      	bne.n	8003efa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee8:	7bbb      	ldrb	r3, [r7, #14]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	7b7b      	ldrb	r3, [r7, #13]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ef4:	7b3b      	ldrb	r3, [r7, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e05e      	b.n	8003fbc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d010      	beq.n	8003f4c <HAL_TIM_Encoder_Start_IT+0xe4>
 8003f2a:	e01f      	b.n	8003f6c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fd71 	bl	8004a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0202 	orr.w	r2, r2, #2
 8003f48:	60da      	str	r2, [r3, #12]
      break;
 8003f4a:	e02e      	b.n	8003faa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	2104      	movs	r1, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fd61 	bl	8004a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0204 	orr.w	r2, r2, #4
 8003f68:	60da      	str	r2, [r3, #12]
      break;
 8003f6a:	e01e      	b.n	8003faa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	2100      	movs	r1, #0
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fd51 	bl	8004a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	2104      	movs	r1, #4
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd4a 	bl	8004a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0202 	orr.w	r2, r2, #2
 8003f96:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0204 	orr.w	r2, r2, #4
 8003fa6:	60da      	str	r2, [r3, #12]
      break;
 8003fa8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d122      	bne.n	8004020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d11b      	bne.n	8004020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0202 	mvn.w	r2, #2
 8003ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f003 fca4 	bl	8007954 <HAL_TIM_IC_CaptureCallback>
 800400c:	e005      	b.n	800401a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa69 	bl	80044e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fa6f 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b04      	cmp	r3, #4
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0204 	mvn.w	r2, #4
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f003 fc7a 	bl	8007954 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa3f 	bl	80044e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fa45 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b08      	cmp	r3, #8
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b08      	cmp	r3, #8
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0208 	mvn.w	r2, #8
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2204      	movs	r2, #4
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f003 fc50 	bl	8007954 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa15 	bl	80044e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa1b 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0210 	mvn.w	r2, #16
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2208      	movs	r2, #8
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f003 fc26 	bl	8007954 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9eb 	bl	80044e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f9f1 	bl	80044f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0201 	mvn.w	r2, #1
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd fae6 	bl	8001714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fd30 	bl	8004bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9b5 	bl	800450a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0220 	mvn.w	r2, #32
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fcfb 	bl	8004bc2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0ae      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	f200 809f 	bhi.w	8004340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800423d 	.word	0x0800423d
 800420c:	08004341 	.word	0x08004341
 8004210:	08004341 	.word	0x08004341
 8004214:	08004341 	.word	0x08004341
 8004218:	0800427d 	.word	0x0800427d
 800421c:	08004341 	.word	0x08004341
 8004220:	08004341 	.word	0x08004341
 8004224:	08004341 	.word	0x08004341
 8004228:	080042bf 	.word	0x080042bf
 800422c:	08004341 	.word	0x08004341
 8004230:	08004341 	.word	0x08004341
 8004234:	08004341 	.word	0x08004341
 8004238:	080042ff 	.word	0x080042ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f9cc 	bl	80045e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0208 	orr.w	r2, r2, #8
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0204 	bic.w	r2, r2, #4
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	619a      	str	r2, [r3, #24]
      break;
 800427a:	e064      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fa12 	bl	80046ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6999      	ldr	r1, [r3, #24]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	619a      	str	r2, [r3, #24]
      break;
 80042bc:	e043      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fa5b 	bl	8004780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0208 	orr.w	r2, r2, #8
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0204 	bic.w	r2, r2, #4
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	61da      	str	r2, [r3, #28]
      break;
 80042fc:	e023      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 faa5 	bl	8004854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	021a      	lsls	r2, r3, #8
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	61da      	str	r2, [r3, #28]
      break;
 800433e:	e002      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
      break;
 8004344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIM_ConfigClockSource+0x1c>
 8004370:	2302      	movs	r3, #2
 8004372:	e0b4      	b.n	80044de <HAL_TIM_ConfigClockSource+0x186>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800439a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ac:	d03e      	beq.n	800442c <HAL_TIM_ConfigClockSource+0xd4>
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b2:	f200 8087 	bhi.w	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	f000 8086 	beq.w	80044ca <HAL_TIM_ConfigClockSource+0x172>
 80043be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c2:	d87f      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043c4:	2b70      	cmp	r3, #112	; 0x70
 80043c6:	d01a      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0xa6>
 80043c8:	2b70      	cmp	r3, #112	; 0x70
 80043ca:	d87b      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043cc:	2b60      	cmp	r3, #96	; 0x60
 80043ce:	d050      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x11a>
 80043d0:	2b60      	cmp	r3, #96	; 0x60
 80043d2:	d877      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b50      	cmp	r3, #80	; 0x50
 80043d6:	d03c      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0xfa>
 80043d8:	2b50      	cmp	r3, #80	; 0x50
 80043da:	d873      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d058      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x13a>
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d86f      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043e4:	2b30      	cmp	r3, #48	; 0x30
 80043e6:	d064      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043e8:	2b30      	cmp	r3, #48	; 0x30
 80043ea:	d86b      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d060      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d867      	bhi.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05c      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d05a      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x15a>
 80043fc:	e062      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440e:	f000 fae6 	bl	80049de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	609a      	str	r2, [r3, #8]
      break;
 800442a:	e04f      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	f000 facf 	bl	80049de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800444e:	609a      	str	r2, [r3, #8]
      break;
 8004450:	e03c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	461a      	mov	r2, r3
 8004460:	f000 fa46 	bl	80048f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2150      	movs	r1, #80	; 0x50
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fa9d 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 8004470:	e02c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800447e:	461a      	mov	r2, r3
 8004480:	f000 fa64 	bl	800494c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2160      	movs	r1, #96	; 0x60
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fa8d 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 8004490:	e01c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	461a      	mov	r2, r3
 80044a0:	f000 fa26 	bl	80048f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2140      	movs	r1, #64	; 0x40
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fa7d 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 80044b0:	e00c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f000 fa74 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 80044c2:	e003      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      break;
 80044c8:	e000      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <TIM_Base_SetConfig+0xb8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <TIM_Base_SetConfig+0x30>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d007      	beq.n	800454c <TIM_Base_SetConfig+0x30>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <TIM_Base_SetConfig+0xbc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_Base_SetConfig+0x30>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a25      	ldr	r2, [pc, #148]	; (80045dc <TIM_Base_SetConfig+0xc0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d108      	bne.n	800455e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <TIM_Base_SetConfig+0xb8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00b      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d007      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <TIM_Base_SetConfig+0xbc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_Base_SetConfig+0x62>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <TIM_Base_SetConfig+0xc0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <TIM_Base_SetConfig+0xb8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d103      	bne.n	80045c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	615a      	str	r2, [r3, #20]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800

080045e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 0201 	bic.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0302 	bic.w	r3, r3, #2
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <TIM_OC1_SetConfig+0xc8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10c      	bne.n	8004656 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0308 	bic.w	r3, r3, #8
 8004642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 0304 	bic.w	r3, r3, #4
 8004654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <TIM_OC1_SetConfig+0xc8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d111      	bne.n	8004682 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800466c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	621a      	str	r2, [r3, #32]
}
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00

080046ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 0210 	bic.w	r2, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0320 	bic.w	r3, r3, #32
 80046f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a1d      	ldr	r2, [pc, #116]	; (800477c <TIM_OC2_SetConfig+0xd0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10d      	bne.n	8004728 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a14      	ldr	r2, [pc, #80]	; (800477c <TIM_OC2_SetConfig+0xd0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d113      	bne.n	8004758 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	40012c00 	.word	0x40012c00

08004780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <TIM_OC3_SetConfig+0xd0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10d      	bne.n	80047fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <TIM_OC3_SetConfig+0xd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d113      	bne.n	800482a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40012c00 	.word	0x40012c00

08004854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800489e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0f      	ldr	r2, [pc, #60]	; (80048ec <TIM_OC4_SetConfig+0x98>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d109      	bne.n	80048c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr
 80048ec:	40012c00 	.word	0x40012c00

080048f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 030a 	bic.w	r3, r3, #10
 800492c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f023 0210 	bic.w	r2, r3, #16
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004988:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f043 0307 	orr.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	609a      	str	r2, [r3, #8]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2201      	movs	r2, #1
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a1a      	ldr	r2, [r3, #32]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e046      	b.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d009      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10c      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800

08004b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e03d      	b.n	8004bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e042      	b.n	8004c7e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fd f9cf 	bl	8001fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2224      	movs	r2, #36	; 0x24
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f91c 	bl	8004e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08a      	sub	sp, #40	; 0x28
 8004c8a:	af02      	add	r7, sp, #8
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d16d      	bne.n	8004d82 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_UART_Transmit+0x2c>
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e066      	b.n	8004d84 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2221      	movs	r2, #33	; 0x21
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc4:	f7fd fa5a 	bl	800217c <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	d108      	bne.n	8004cf2 <HAL_UART_Transmit+0x6c>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e003      	b.n	8004cfa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cfa:	e02a      	b.n	8004d52 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2200      	movs	r2, #0
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f840 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e036      	b.n	8004d84 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d2a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	3302      	adds	r3, #2
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	e007      	b.n	8004d44 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	781a      	ldrb	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3301      	adds	r3, #1
 8004d42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1cf      	bne.n	8004cfc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2140      	movs	r1, #64	; 0x40
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f810 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e006      	b.n	8004d84 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e000      	b.n	8004d84 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
  }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b090      	sub	sp, #64	; 0x40
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	e050      	b.n	8004e40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d04c      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004dac:	f7fd f9e6 	bl	800217c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d241      	bcs.n	8004e40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ddc:	637a      	str	r2, [r7, #52]	; 0x34
 8004dde:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e5      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3314      	adds	r3, #20
 8004e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e10:	623a      	str	r2, [r7, #32]
 8004e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	69f9      	ldr	r1, [r7, #28]
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e00f      	b.n	8004e60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d09f      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3740      	adds	r7, #64	; 0x40
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ea2:	f023 030c 	bic.w	r3, r3, #12
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	430b      	orrs	r3, r1
 8004eae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <UART_SetConfig+0x114>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ed0:	f7fe fd2a 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	e002      	b.n	8004ede <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fe fd12 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004edc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009a      	lsls	r2, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <UART_SetConfig+0x118>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	0119      	lsls	r1, r3, #4
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009a      	lsls	r2, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <UART_SetConfig+0x118>)
 8004f16:	fba3 0302 	umull	r0, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	2064      	movs	r0, #100	; 0x64
 8004f1e:	fb00 f303 	mul.w	r3, r0, r3
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	3332      	adds	r3, #50	; 0x32
 8004f28:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <UART_SetConfig+0x118>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f34:	4419      	add	r1, r3
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009a      	lsls	r2, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <UART_SetConfig+0x118>)
 8004f4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2064      	movs	r0, #100	; 0x64
 8004f56:	fb00 f303 	mul.w	r3, r0, r3
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	3332      	adds	r3, #50	; 0x32
 8004f60:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <UART_SetConfig+0x118>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	440a      	add	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40013800 	.word	0x40013800
 8004f80:	51eb851f 	.word	0x51eb851f

08004f84 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f8a:	f3ef 8305 	mrs	r3, IPSR
 8004f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10f      	bne.n	8004fb6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	607b      	str	r3, [r7, #4]
  return(result);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <osKernelInitialize+0x32>
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <osKernelInitialize+0x60>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d109      	bne.n	8004fbe <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004faa:	f3ef 8311 	mrs	r3, BASEPRI
 8004fae:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004fb6:	f06f 0305 	mvn.w	r3, #5
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e00c      	b.n	8004fd8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <osKernelInitialize+0x60>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <osKernelInitialize+0x60>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e002      	b.n	8004fd8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	20000550 	.word	0x20000550

08004fe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fee:	f3ef 8305 	mrs	r3, IPSR
 8004ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10f      	bne.n	800501a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffe:	607b      	str	r3, [r7, #4]
  return(result);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <osKernelStart+0x32>
 8005006:	4b11      	ldr	r3, [pc, #68]	; (800504c <osKernelStart+0x64>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d109      	bne.n	8005022 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800500e:	f3ef 8311 	mrs	r3, BASEPRI
 8005012:	603b      	str	r3, [r7, #0]
  return(result);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <osKernelStart+0x3a>
    stat = osErrorISR;
 800501a:	f06f 0305 	mvn.w	r3, #5
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e00e      	b.n	8005040 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <osKernelStart+0x64>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800502a:	4b08      	ldr	r3, [pc, #32]	; (800504c <osKernelStart+0x64>)
 800502c:	2202      	movs	r2, #2
 800502e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005030:	f001 f878 	bl	8006124 <vTaskStartScheduler>
      stat = osOK;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e002      	b.n	8005040 <osKernelStart+0x58>
    } else {
      stat = osError;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000550 	.word	0x20000550

08005050 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b092      	sub	sp, #72	; 0x48
 8005054:	af04      	add	r7, sp, #16
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005060:	f3ef 8305 	mrs	r3, IPSR
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 8094 	bne.w	8005196 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506e:	f3ef 8310 	mrs	r3, PRIMASK
 8005072:	623b      	str	r3, [r7, #32]
  return(result);
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f040 808d 	bne.w	8005196 <osThreadNew+0x146>
 800507c:	4b48      	ldr	r3, [pc, #288]	; (80051a0 <osThreadNew+0x150>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d106      	bne.n	8005092 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	61fb      	str	r3, [r7, #28]
  return(result);
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 8082 	bne.w	8005196 <osThreadNew+0x146>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d07e      	beq.n	8005196 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800509c:	2318      	movs	r3, #24
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80050a0:	2300      	movs	r3, #0
 80050a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80050a4:	f107 031b 	add.w	r3, r7, #27
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d045      	beq.n	8005142 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <osThreadNew+0x74>
        name = attr->name;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <osThreadNew+0x9a>
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	2b38      	cmp	r3, #56	; 0x38
 80050dc:	d805      	bhi.n	80050ea <osThreadNew+0x9a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <osThreadNew+0x9e>
        return (NULL);
 80050ea:	2300      	movs	r3, #0
 80050ec:	e054      	b.n	8005198 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00e      	beq.n	8005124 <osThreadNew+0xd4>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b5b      	cmp	r3, #91	; 0x5b
 800510c:	d90a      	bls.n	8005124 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <osThreadNew+0xd4>
        mem = 1;
 800511e:	2301      	movs	r3, #1
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
 8005122:	e010      	b.n	8005146 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10c      	bne.n	8005146 <osThreadNew+0xf6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d108      	bne.n	8005146 <osThreadNew+0xf6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <osThreadNew+0xf6>
          mem = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005140:	e001      	b.n	8005146 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	2b01      	cmp	r3, #1
 800514a:	d110      	bne.n	800516e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005154:	9202      	str	r2, [sp, #8]
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005160:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fe12 	bl	8005d8c <xTaskCreateStatic>
 8005168:	4603      	mov	r3, r0
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e013      	b.n	8005196 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d110      	bne.n	8005196 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	b29a      	uxth	r2, r3
 8005178:	f107 0314 	add.w	r3, r7, #20
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fe5c 	bl	8005e44 <xTaskCreate>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d001      	beq.n	8005196 <osThreadNew+0x146>
          hTask = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005196:	697b      	ldr	r3, [r7, #20]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3738      	adds	r7, #56	; 0x38
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000550 	.word	0x20000550

080051a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ac:	f3ef 8305 	mrs	r3, IPSR
 80051b0:	613b      	str	r3, [r7, #16]
  return(result);
 80051b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10f      	bne.n	80051d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b8:	f3ef 8310 	mrs	r3, PRIMASK
 80051bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <osDelay+0x34>
 80051c4:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <osDelay+0x58>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d109      	bne.n	80051e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051cc:	f3ef 8311 	mrs	r3, BASEPRI
 80051d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <osDelay+0x3c>
    stat = osErrorISR;
 80051d8:	f06f 0305 	mvn.w	r3, #5
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e007      	b.n	80051f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 ff66 	bl	80060bc <vTaskDelay>
    }
  }

  return (stat);
 80051f0:	697b      	ldr	r3, [r7, #20]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000550 	.word	0x20000550

08005200 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a06      	ldr	r2, [pc, #24]	; (8005228 <vApplicationGetIdleTaskMemory+0x28>)
 8005210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4a05      	ldr	r2, [pc, #20]	; (800522c <vApplicationGetIdleTaskMemory+0x2c>)
 8005216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	20000554 	.word	0x20000554
 800522c:	200005b0 	.word	0x200005b0

08005230 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a07      	ldr	r2, [pc, #28]	; (800525c <vApplicationGetTimerTaskMemory+0x2c>)
 8005240:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4a06      	ldr	r2, [pc, #24]	; (8005260 <vApplicationGetTimerTaskMemory+0x30>)
 8005246:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800524e:	601a      	str	r2, [r3, #0]
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	200007b0 	.word	0x200007b0
 8005260:	2000080c 	.word	0x2000080c

08005264 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f103 0208 	add.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f04f 32ff 	mov.w	r2, #4294967295
 800527c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f103 0208 	add.w	r2, r3, #8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f103 0208 	add.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	d103      	bne.n	8005320 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e00c      	b.n	800533a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3308      	adds	r3, #8
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e002      	b.n	800532e <vListInsert+0x2e>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	d2f6      	bcs.n	8005328 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6892      	ldr	r2, [r2, #8]
 8005386:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6852      	ldr	r2, [r2, #4]
 8005390:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d103      	bne.n	80053a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
	...

080053c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053ee:	f001 ffc5 	bl	800737c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	3b01      	subs	r3, #1
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	22ff      	movs	r2, #255	; 0xff
 8005432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	22ff      	movs	r2, #255	; 0xff
 800543a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d114      	bne.n	800546e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01a      	beq.n	8005482 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3310      	adds	r3, #16
 8005450:	4618      	mov	r0, r3
 8005452:	f001 f8f1 	bl	8006638 <xTaskRemoveFromEventList>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d012      	beq.n	8005482 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <xQueueGenericReset+0xcc>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	e009      	b.n	8005482 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3310      	adds	r3, #16
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fef6 	bl	8005264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3324      	adds	r3, #36	; 0x24
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fef1 	bl	8005264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005482:	f001 ffab 	bl	80073dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005486:	2301      	movs	r3, #1
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	; 0x38
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <xQueueGenericCreateStatic+0x52>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <xQueueGenericCreateStatic+0x56>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericCreateStatic+0x58>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	623b      	str	r3, [r7, #32]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <xQueueGenericCreateStatic+0x7e>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <xQueueGenericCreateStatic+0x82>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueGenericCreateStatic+0x84>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	61fb      	str	r3, [r7, #28]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005532:	2350      	movs	r3, #80	; 0x50
 8005534:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b50      	cmp	r3, #80	; 0x50
 800553a:	d00a      	beq.n	8005552 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	61bb      	str	r3, [r7, #24]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005564:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f805 	bl	8005582 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e002      	b.n	80055a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055b0:	2101      	movs	r1, #1
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f7ff ff06 	bl	80053c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	; 0x38
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055d6:	2300      	movs	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <xQueueGenericSend+0x32>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <xQueueGenericSend+0x40>
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <xQueueGenericSend+0x44>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <xQueueGenericSend+0x46>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <xQueueGenericSend+0x60>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d103      	bne.n	8005636 <xQueueGenericSend+0x6e>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <xQueueGenericSend+0x72>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xQueueGenericSend+0x74>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <xQueueGenericSend+0x8e>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	623b      	str	r3, [r7, #32]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005656:	f001 f9b1 	bl	80069bc <xTaskGetSchedulerState>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <xQueueGenericSend+0x9e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <xQueueGenericSend+0xa2>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <xQueueGenericSend+0xa4>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xQueueGenericSend+0xbe>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	61fb      	str	r3, [r7, #28]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005686:	f001 fe79 	bl	800737c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <xQueueGenericSend+0xd4>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d129      	bne.n	80056f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056a2:	f000 fa07 	bl	8005ab4 <prvCopyDataToQueue>
 80056a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 ffbf 	bl	8006638 <xTaskRemoveFromEventList>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056c0:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <xQueueGenericSend+0x1f8>)
 80056c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	e00a      	b.n	80056e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056d8:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <xQueueGenericSend+0x1f8>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056e8:	f001 fe78 	bl	80073dc <vPortExitCritical>
				return pdPASS;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e063      	b.n	80057b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056f6:	f001 fe71 	bl	80073dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e05c      	b.n	80057b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fff9 	bl	8006700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800570e:	2301      	movs	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005712:	f001 fe63 	bl	80073dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005716:	f000 fd6b 	bl	80061f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800571a:	f001 fe2f 	bl	800737c <vPortEnterCritical>
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005724:	b25b      	sxtb	r3, r3
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d103      	bne.n	8005734 <xQueueGenericSend+0x16c>
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800573a:	b25b      	sxtb	r3, r3
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d103      	bne.n	800574a <xQueueGenericSend+0x182>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800574a:	f001 fe47 	bl	80073dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800574e:	1d3a      	adds	r2, r7, #4
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f000 ffe8 	bl	800672c <xTaskCheckForTimeOut>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d124      	bne.n	80057ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005764:	f000 fa9e 	bl	8005ca4 <prvIsQueueFull>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	3310      	adds	r3, #16
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f000 ff0e 	bl	8006598 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800577c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800577e:	f000 fa29 	bl	8005bd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005782:	f000 fd43 	bl	800620c <xTaskResumeAll>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	f47f af7c 	bne.w	8005686 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <xQueueGenericSend+0x1f8>)
 8005790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	e772      	b.n	8005686 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a2:	f000 fa17 	bl	8005bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057a6:	f000 fd31 	bl	800620c <xTaskResumeAll>
 80057aa:	e76c      	b.n	8005686 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ae:	f000 fa11 	bl	8005bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057b2:	f000 fd2b 	bl	800620c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057b6:	2300      	movs	r3, #0
		}
	}
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3738      	adds	r7, #56	; 0x38
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d103      	bne.n	8005800 <xQueueGenericSendFromISR+0x3c>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <xQueueGenericSendFromISR+0x40>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <xQueueGenericSendFromISR+0x42>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	623b      	str	r3, [r7, #32]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d103      	bne.n	800582e <xQueueGenericSendFromISR+0x6a>
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <xQueueGenericSendFromISR+0x6e>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <xQueueGenericSendFromISR+0x70>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	61fb      	str	r3, [r7, #28]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800584e:	f001 fe57 	bl	8007500 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005852:	f3ef 8211 	mrs	r2, BASEPRI
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	61ba      	str	r2, [r7, #24]
 8005868:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800586a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <xQueueGenericSendFromISR+0xbc>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d12c      	bne.n	80058da <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005890:	f000 f910 	bl	8005ab4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005894:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d112      	bne.n	80058c4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	3324      	adds	r3, #36	; 0x24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fec4 	bl	8006638 <xTaskRemoveFromEventList>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00e      	beq.n	80058d4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e007      	b.n	80058d4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058c8:	3301      	adds	r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	b25a      	sxtb	r2, r3
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058d4:	2301      	movs	r3, #1
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058d8:	e001      	b.n	80058de <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3738      	adds	r7, #56	; 0x38
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08c      	sub	sp, #48	; 0x30
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <xQueueReceive+0x30>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	623b      	str	r3, [r7, #32]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <xQueueReceive+0x3e>
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <xQueueReceive+0x42>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <xQueueReceive+0x44>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xQueueReceive+0x5e>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	61fb      	str	r3, [r7, #28]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005952:	f001 f833 	bl	80069bc <xTaskGetSchedulerState>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <xQueueReceive+0x6e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <xQueueReceive+0x72>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <xQueueReceive+0x74>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <xQueueReceive+0x8e>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61bb      	str	r3, [r7, #24]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005982:	f001 fcfb 	bl	800737c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01f      	beq.n	80059d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005996:	f000 f8f7 	bl	8005b88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00f      	beq.n	80059ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	3310      	adds	r3, #16
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fe42 	bl	8006638 <xTaskRemoveFromEventList>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059ba:	4b3d      	ldr	r3, [pc, #244]	; (8005ab0 <xQueueReceive+0x1bc>)
 80059bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059ca:	f001 fd07 	bl	80073dc <vPortExitCritical>
				return pdPASS;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e069      	b.n	8005aa6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059d8:	f001 fd00 	bl	80073dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059dc:	2300      	movs	r3, #0
 80059de:	e062      	b.n	8005aa6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059e6:	f107 0310 	add.w	r3, r7, #16
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fe88 	bl	8006700 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059f0:	2301      	movs	r3, #1
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059f4:	f001 fcf2 	bl	80073dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059f8:	f000 fbfa 	bl	80061f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059fc:	f001 fcbe 	bl	800737c <vPortEnterCritical>
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d103      	bne.n	8005a16 <xQueueReceive+0x122>
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d103      	bne.n	8005a2c <xQueueReceive+0x138>
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a2c:	f001 fcd6 	bl	80073dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a30:	1d3a      	adds	r2, r7, #4
 8005a32:	f107 0310 	add.w	r3, r7, #16
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fe77 	bl	800672c <xTaskCheckForTimeOut>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d123      	bne.n	8005a8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a46:	f000 f917 	bl	8005c78 <prvIsQueueEmpty>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d017      	beq.n	8005a80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fd9d 	bl	8006598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a60:	f000 f8b8 	bl	8005bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a64:	f000 fbd2 	bl	800620c <xTaskResumeAll>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d189      	bne.n	8005982 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a6e:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <xQueueReceive+0x1bc>)
 8005a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	e780      	b.n	8005982 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a82:	f000 f8a7 	bl	8005bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a86:	f000 fbc1 	bl	800620c <xTaskResumeAll>
 8005a8a:	e77a      	b.n	8005982 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a8e:	f000 f8a1 	bl	8005bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a92:	f000 fbbb 	bl	800620c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a98:	f000 f8ee 	bl	8005c78 <prvIsQueueEmpty>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f43f af6f 	beq.w	8005982 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005aa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3730      	adds	r7, #48	; 0x30
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10d      	bne.n	8005aee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d14d      	bne.n	8005b76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 ff8a 	bl	80069f8 <xTaskPriorityDisinherit>
 8005ae4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	605a      	str	r2, [r3, #4]
 8005aec:	e043      	b.n	8005b76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d119      	bne.n	8005b28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6898      	ldr	r0, [r3, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	461a      	mov	r2, r3
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	f003 fc6d 	bl	80093de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	441a      	add	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d32b      	bcc.n	8005b76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	609a      	str	r2, [r3, #8]
 8005b26:	e026      	b.n	8005b76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68d8      	ldr	r0, [r3, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	461a      	mov	r2, r3
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	f003 fc53 	bl	80093de <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	425b      	negs	r3, r3
 8005b42:	441a      	add	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d207      	bcs.n	8005b64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	425b      	negs	r3, r3
 8005b5e:	441a      	add	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d105      	bne.n	8005b76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d018      	beq.n	8005bcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	441a      	add	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d303      	bcc.n	8005bbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68d9      	ldr	r1, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6838      	ldr	r0, [r7, #0]
 8005bc8:	f003 fc09 	bl	80093de <memcpy>
	}
}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bdc:	f001 fbce 	bl	800737c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005be8:	e011      	b.n	8005c0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d012      	beq.n	8005c18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3324      	adds	r3, #36	; 0x24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fd1e 	bl	8006638 <xTaskRemoveFromEventList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c02:	f000 fdf5 	bl	80067f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dce9      	bgt.n	8005bea <prvUnlockQueue+0x16>
 8005c16:	e000      	b.n	8005c1a <prvUnlockQueue+0x46>
					break;
 8005c18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	22ff      	movs	r2, #255	; 0xff
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c22:	f001 fbdb 	bl	80073dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c26:	f001 fba9 	bl	800737c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c32:	e011      	b.n	8005c58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3310      	adds	r3, #16
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fcf9 	bl	8006638 <xTaskRemoveFromEventList>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c4c:	f000 fdd0 	bl	80067f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dce9      	bgt.n	8005c34 <prvUnlockQueue+0x60>
 8005c60:	e000      	b.n	8005c64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	22ff      	movs	r2, #255	; 0xff
 8005c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c6c:	f001 fbb6 	bl	80073dc <vPortExitCritical>
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c80:	f001 fb7c 	bl	800737c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e001      	b.n	8005c96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c96:	f001 fba1 	bl	80073dc <vPortExitCritical>

	return xReturn;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cac:	f001 fb66 	bl	800737c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d102      	bne.n	8005cc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e001      	b.n	8005cc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cc6:	f001 fb89 	bl	80073dc <vPortExitCritical>

	return xReturn;
 8005cca:	68fb      	ldr	r3, [r7, #12]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e014      	b.n	8005d0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ce4:	4a0e      	ldr	r2, [pc, #56]	; (8005d20 <vQueueAddToRegistry+0x4c>)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cf0:	490b      	ldr	r1, [pc, #44]	; (8005d20 <vQueueAddToRegistry+0x4c>)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <vQueueAddToRegistry+0x4c>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4413      	add	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d06:	e006      	b.n	8005d16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b07      	cmp	r3, #7
 8005d12:	d9e7      	bls.n	8005ce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr
 8005d20:	20000c0c 	.word	0x20000c0c

08005d24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d34:	f001 fb22 	bl	800737c <vPortEnterCritical>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3e:	b25b      	sxtb	r3, r3
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d103      	bne.n	8005d4e <vQueueWaitForMessageRestricted+0x2a>
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	d103      	bne.n	8005d64 <vQueueWaitForMessageRestricted+0x40>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d64:	f001 fb3a 	bl	80073dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	3324      	adds	r3, #36	; 0x24
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fc31 	bl	80065e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	f7ff ff28 	bl	8005bd4 <prvUnlockQueue>
	}
 8005d84:	bf00      	nop
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08e      	sub	sp, #56	; 0x38
 8005d90:	af04      	add	r7, sp, #16
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	623b      	str	r3, [r7, #32]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61fb      	str	r3, [r7, #28]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dd2:	235c      	movs	r3, #92	; 0x5c
 8005dd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b5c      	cmp	r3, #92	; 0x5c
 8005dda:	d00a      	beq.n	8005df2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61bb      	str	r3, [r7, #24]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01e      	beq.n	8005e36 <xTaskCreateStatic+0xaa>
 8005df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01b      	beq.n	8005e36 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e10:	2300      	movs	r3, #0
 8005e12:	9303      	str	r3, [sp, #12]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	f107 0314 	add.w	r3, r7, #20
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f850 	bl	8005ece <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e30:	f000 f8d4 	bl	8005fdc <prvAddNewTaskToReadyList>
 8005e34:	e001      	b.n	8005e3a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e3a:	697b      	ldr	r3, [r7, #20]
	}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	; 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	; 0x30
 8005e48:	af04      	add	r7, sp, #16
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 fb8f 	bl	800757c <pvPortMalloc>
 8005e5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e66:	205c      	movs	r0, #92	; 0x5c
 8005e68:	f001 fb88 	bl	800757c <pvPortMalloc>
 8005e6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30
 8005e7a:	e005      	b.n	8005e88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e7c:	6978      	ldr	r0, [r7, #20]
 8005e7e:	f001 fc41 	bl	8007704 <vPortFree>
 8005e82:	e001      	b.n	8005e88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d017      	beq.n	8005ebe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9303      	str	r3, [sp, #12]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	9302      	str	r3, [sp, #8]
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f80e 	bl	8005ece <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb2:	69f8      	ldr	r0, [r7, #28]
 8005eb4:	f000 f892 	bl	8005fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e002      	b.n	8005ec4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b088      	sub	sp, #32
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	21a5      	movs	r1, #165	; 0xa5
 8005ee8:	f003 f9eb 	bl	80092c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f023 0307 	bic.w	r3, r3, #7
 8005f04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	617b      	str	r3, [r7, #20]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	e012      	b.n	8005f52 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	7819      	ldrb	r1, [r3, #0]
 8005f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	3334      	adds	r3, #52	; 0x34
 8005f3c:	460a      	mov	r2, r1
 8005f3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d006      	beq.n	8005f5a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b0f      	cmp	r3, #15
 8005f56:	d9e9      	bls.n	8005f2c <prvInitialiseNewTask+0x5e>
 8005f58:	e000      	b.n	8005f5c <prvInitialiseNewTask+0x8e>
		{
			break;
 8005f5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	2b37      	cmp	r3, #55	; 0x37
 8005f68:	d901      	bls.n	8005f6e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f6a:	2337      	movs	r3, #55	; 0x37
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	3304      	adds	r3, #4
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff f98c 	bl	80052a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	3318      	adds	r3, #24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff f987 	bl	80052a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2200      	movs	r2, #0
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	69b8      	ldr	r0, [r7, #24]
 8005fbe:	f001 f8ef 	bl	80071a0 <pxPortInitialiseStack>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd4:	bf00      	nop
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fe4:	f001 f9ca 	bl	800737c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fe8:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8005ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ffa:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <prvAddNewTaskToReadyList+0xc4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d110      	bne.n	800602a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006008:	f000 fc16 	bl	8006838 <prvInitialiseTaskLists>
 800600c:	e00d      	b.n	800602a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800600e:	4b26      	ldr	r3, [pc, #152]	; (80060a8 <prvAddNewTaskToReadyList+0xcc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006016:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	d802      	bhi.n	800602a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800602a:	4b20      	ldr	r3, [pc, #128]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 8006032:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <prvAddNewTaskToReadyList+0xd0>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <prvAddNewTaskToReadyList+0xd4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d903      	bls.n	8006050 <prvAddNewTaskToReadyList+0x74>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <prvAddNewTaskToReadyList+0xd4>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <prvAddNewTaskToReadyList+0xd8>)
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7ff f927 	bl	80052ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800606c:	f001 f9b6 	bl	80073dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <prvAddNewTaskToReadyList+0xcc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <prvAddNewTaskToReadyList+0xc8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	429a      	cmp	r2, r3
 8006084:	d207      	bcs.n	8006096 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvAddNewTaskToReadyList+0xdc>)
 8006088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20001120 	.word	0x20001120
 80060a4:	20000c4c 	.word	0x20000c4c
 80060a8:	2000112c 	.word	0x2000112c
 80060ac:	2000113c 	.word	0x2000113c
 80060b0:	20001128 	.word	0x20001128
 80060b4:	20000c50 	.word	0x20000c50
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d017      	beq.n	80060fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <vTaskDelay+0x60>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <vTaskDelay+0x30>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60bb      	str	r3, [r7, #8]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060ec:	f000 f880 	bl	80061f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060f0:	2100      	movs	r1, #0
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fcee 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060f8:	f000 f888 	bl	800620c <xTaskResumeAll>
 80060fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d107      	bne.n	8006114 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <vTaskDelay+0x64>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20001148 	.word	0x20001148
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006132:	463a      	mov	r2, r7
 8006134:	1d39      	adds	r1, r7, #4
 8006136:	f107 0308 	add.w	r3, r7, #8
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff f860 	bl	8005200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	9202      	str	r2, [sp, #8]
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	2300      	movs	r3, #0
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	2300      	movs	r3, #0
 8006150:	460a      	mov	r2, r1
 8006152:	4921      	ldr	r1, [pc, #132]	; (80061d8 <vTaskStartScheduler+0xb4>)
 8006154:	4821      	ldr	r0, [pc, #132]	; (80061dc <vTaskStartScheduler+0xb8>)
 8006156:	f7ff fe19 	bl	8005d8c <xTaskCreateStatic>
 800615a:	4603      	mov	r3, r0
 800615c:	4a20      	ldr	r2, [pc, #128]	; (80061e0 <vTaskStartScheduler+0xbc>)
 800615e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006160:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <vTaskStartScheduler+0xbc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006168:	2301      	movs	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e001      	b.n	8006172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d102      	bne.n	800617e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006178:	f000 fd00 	bl	8006b7c <xTimerCreateTimerTask>
 800617c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d116      	bne.n	80061b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	613b      	str	r3, [r7, #16]
}
 8006196:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <vTaskStartScheduler+0xc0>)
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <vTaskStartScheduler+0xc4>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <vTaskStartScheduler+0xc8>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061ac:	f001 f874 	bl	8007298 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061b0:	e00e      	b.n	80061d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d10a      	bne.n	80061d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <vTaskStartScheduler+0xaa>
}
 80061d0:	bf00      	nop
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	0800cb7c 	.word	0x0800cb7c
 80061dc:	08006809 	.word	0x08006809
 80061e0:	20001144 	.word	0x20001144
 80061e4:	20001140 	.word	0x20001140
 80061e8:	2000112c 	.word	0x2000112c
 80061ec:	20001124 	.word	0x20001124

080061f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <vTaskSuspendAll+0x18>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	4a03      	ldr	r2, [pc, #12]	; (8006208 <vTaskSuspendAll+0x18>)
 80061fc:	6013      	str	r3, [r2, #0]
}
 80061fe:	bf00      	nop
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20001148 	.word	0x20001148

0800620c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800621a:	4b42      	ldr	r3, [pc, #264]	; (8006324 <xTaskResumeAll+0x118>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <xTaskResumeAll+0x2c>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	603b      	str	r3, [r7, #0]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006238:	f001 f8a0 	bl	800737c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800623c:	4b39      	ldr	r3, [pc, #228]	; (8006324 <xTaskResumeAll+0x118>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	4a38      	ldr	r2, [pc, #224]	; (8006324 <xTaskResumeAll+0x118>)
 8006244:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006246:	4b37      	ldr	r3, [pc, #220]	; (8006324 <xTaskResumeAll+0x118>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d162      	bne.n	8006314 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800624e:	4b36      	ldr	r3, [pc, #216]	; (8006328 <xTaskResumeAll+0x11c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d05e      	beq.n	8006314 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006256:	e02f      	b.n	80062b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006258:	4b34      	ldr	r3, [pc, #208]	; (800632c <xTaskResumeAll+0x120>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3318      	adds	r3, #24
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff f883 	bl	8005370 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3304      	adds	r3, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f87e 	bl	8005370 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4b2d      	ldr	r3, [pc, #180]	; (8006330 <xTaskResumeAll+0x124>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d903      	bls.n	8006288 <xTaskResumeAll+0x7c>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <xTaskResumeAll+0x124>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a27      	ldr	r2, [pc, #156]	; (8006334 <xTaskResumeAll+0x128>)
 8006296:	441a      	add	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7ff f80b 	bl	80052ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4b23      	ldr	r3, [pc, #140]	; (8006338 <xTaskResumeAll+0x12c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062b2:	4b22      	ldr	r3, [pc, #136]	; (800633c <xTaskResumeAll+0x130>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b8:	4b1c      	ldr	r3, [pc, #112]	; (800632c <xTaskResumeAll+0x120>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1cb      	bne.n	8006258 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062c6:	f000 fb55 	bl	8006974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062ca:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <xTaskResumeAll+0x134>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d010      	beq.n	80062f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062d6:	f000 f845 	bl	8006364 <xTaskIncrementTick>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062e0:	4b16      	ldr	r3, [pc, #88]	; (800633c <xTaskResumeAll+0x130>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f1      	bne.n	80062d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <xTaskResumeAll+0x134>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062f8:	4b10      	ldr	r3, [pc, #64]	; (800633c <xTaskResumeAll+0x130>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006300:	2301      	movs	r3, #1
 8006302:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <xTaskResumeAll+0x138>)
 8006306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006314:	f001 f862 	bl	80073dc <vPortExitCritical>

	return xAlreadyYielded;
 8006318:	68bb      	ldr	r3, [r7, #8]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20001148 	.word	0x20001148
 8006328:	20001120 	.word	0x20001120
 800632c:	200010e0 	.word	0x200010e0
 8006330:	20001128 	.word	0x20001128
 8006334:	20000c50 	.word	0x20000c50
 8006338:	20000c4c 	.word	0x20000c4c
 800633c:	20001134 	.word	0x20001134
 8006340:	20001130 	.word	0x20001130
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <xTaskGetTickCount+0x18>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006354:	687b      	ldr	r3, [r7, #4]
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr
 8006360:	20001124 	.word	0x20001124

08006364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636e:	4b51      	ldr	r3, [pc, #324]	; (80064b4 <xTaskIncrementTick+0x150>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 808e 	bne.w	8006494 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006378:	4b4f      	ldr	r3, [pc, #316]	; (80064b8 <xTaskIncrementTick+0x154>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006380:	4a4d      	ldr	r2, [pc, #308]	; (80064b8 <xTaskIncrementTick+0x154>)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d120      	bne.n	80063ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800638c:	4b4b      	ldr	r3, [pc, #300]	; (80064bc <xTaskIncrementTick+0x158>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	603b      	str	r3, [r7, #0]
}
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <xTaskIncrementTick+0x46>
 80063ac:	4b43      	ldr	r3, [pc, #268]	; (80064bc <xTaskIncrementTick+0x158>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <xTaskIncrementTick+0x15c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a41      	ldr	r2, [pc, #260]	; (80064bc <xTaskIncrementTick+0x158>)
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4a41      	ldr	r2, [pc, #260]	; (80064c0 <xTaskIncrementTick+0x15c>)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4b40      	ldr	r3, [pc, #256]	; (80064c4 <xTaskIncrementTick+0x160>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a3f      	ldr	r2, [pc, #252]	; (80064c4 <xTaskIncrementTick+0x160>)
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	f000 fad3 	bl	8006974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ce:	4b3e      	ldr	r3, [pc, #248]	; (80064c8 <xTaskIncrementTick+0x164>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d34e      	bcc.n	8006476 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d8:	4b38      	ldr	r3, [pc, #224]	; (80064bc <xTaskIncrementTick+0x158>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <xTaskIncrementTick+0x82>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <xTaskIncrementTick+0x84>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ec:	4b36      	ldr	r3, [pc, #216]	; (80064c8 <xTaskIncrementTick+0x164>)
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	601a      	str	r2, [r3, #0]
					break;
 80063f4:	e03f      	b.n	8006476 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063f6:	4b31      	ldr	r3, [pc, #196]	; (80064bc <xTaskIncrementTick+0x158>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d203      	bcs.n	8006416 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800640e:	4a2e      	ldr	r2, [pc, #184]	; (80064c8 <xTaskIncrementTick+0x164>)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6013      	str	r3, [r2, #0]
						break;
 8006414:	e02f      	b.n	8006476 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3304      	adds	r3, #4
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe ffa8 	bl	8005370 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d004      	beq.n	8006432 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	3318      	adds	r3, #24
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe ff9f 	bl	8005370 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	4b25      	ldr	r3, [pc, #148]	; (80064cc <xTaskIncrementTick+0x168>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d903      	bls.n	8006446 <xTaskIncrementTick+0xe2>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	4a22      	ldr	r2, [pc, #136]	; (80064cc <xTaskIncrementTick+0x168>)
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4a1f      	ldr	r2, [pc, #124]	; (80064d0 <xTaskIncrementTick+0x16c>)
 8006454:	441a      	add	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7fe ff2c 	bl	80052ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006466:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <xTaskIncrementTick+0x170>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	429a      	cmp	r2, r3
 800646e:	d3b3      	bcc.n	80063d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006474:	e7b0      	b.n	80063d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006476:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <xTaskIncrementTick+0x170>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4914      	ldr	r1, [pc, #80]	; (80064d0 <xTaskIncrementTick+0x16c>)
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d907      	bls.n	800649e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e004      	b.n	800649e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006494:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <xTaskIncrementTick+0x174>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	4a0f      	ldr	r2, [pc, #60]	; (80064d8 <xTaskIncrementTick+0x174>)
 800649c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800649e:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <xTaskIncrementTick+0x178>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80064a6:	2301      	movs	r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064aa:	697b      	ldr	r3, [r7, #20]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20001148 	.word	0x20001148
 80064b8:	20001124 	.word	0x20001124
 80064bc:	200010d8 	.word	0x200010d8
 80064c0:	200010dc 	.word	0x200010dc
 80064c4:	20001138 	.word	0x20001138
 80064c8:	20001140 	.word	0x20001140
 80064cc:	20001128 	.word	0x20001128
 80064d0:	20000c50 	.word	0x20000c50
 80064d4:	20000c4c 	.word	0x20000c4c
 80064d8:	20001130 	.word	0x20001130
 80064dc:	20001134 	.word	0x20001134

080064e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064e6:	4b27      	ldr	r3, [pc, #156]	; (8006584 <vTaskSwitchContext+0xa4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064ee:	4b26      	ldr	r3, [pc, #152]	; (8006588 <vTaskSwitchContext+0xa8>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064f4:	e041      	b.n	800657a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80064f6:	4b24      	ldr	r3, [pc, #144]	; (8006588 <vTaskSwitchContext+0xa8>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064fc:	4b23      	ldr	r3, [pc, #140]	; (800658c <vTaskSwitchContext+0xac>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e010      	b.n	8006526 <vTaskSwitchContext+0x46>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <vTaskSwitchContext+0x40>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	607b      	str	r3, [r7, #4]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <vTaskSwitchContext+0x3e>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3b01      	subs	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	491a      	ldr	r1, [pc, #104]	; (8006590 <vTaskSwitchContext+0xb0>)
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0e4      	beq.n	8006504 <vTaskSwitchContext+0x24>
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4a12      	ldr	r2, [pc, #72]	; (8006590 <vTaskSwitchContext+0xb0>)
 8006546:	4413      	add	r3, r2
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	3308      	adds	r3, #8
 800655c:	429a      	cmp	r2, r3
 800655e:	d104      	bne.n	800656a <vTaskSwitchContext+0x8a>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	605a      	str	r2, [r3, #4]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	4a08      	ldr	r2, [pc, #32]	; (8006594 <vTaskSwitchContext+0xb4>)
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4a05      	ldr	r2, [pc, #20]	; (800658c <vTaskSwitchContext+0xac>)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6013      	str	r3, [r2, #0]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr
 8006584:	20001148 	.word	0x20001148
 8006588:	20001134 	.word	0x20001134
 800658c:	20001128 	.word	0x20001128
 8006590:	20000c50 	.word	0x20000c50
 8006594:	20000c4c 	.word	0x20000c4c

08006598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60fb      	str	r3, [r7, #12]
}
 80065ba:	bf00      	nop
 80065bc:	e7fe      	b.n	80065bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065be:	4b07      	ldr	r3, [pc, #28]	; (80065dc <vTaskPlaceOnEventList+0x44>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3318      	adds	r3, #24
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fe fe9a 	bl	8005300 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065cc:	2101      	movs	r1, #1
 80065ce:	6838      	ldr	r0, [r7, #0]
 80065d0:	f000 fa80 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000c4c 	.word	0x20000c4c

080065e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	617b      	str	r3, [r7, #20]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <vTaskPlaceOnEventListRestricted+0x54>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3318      	adds	r3, #24
 800660e:	4619      	mov	r1, r3
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7fe fe52 	bl	80052ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800661c:	f04f 33ff 	mov.w	r3, #4294967295
 8006620:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	68b8      	ldr	r0, [r7, #8]
 8006626:	f000 fa55 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
	}
 800662a:	bf00      	nop
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000c4c 	.word	0x20000c4c

08006638 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60fb      	str	r3, [r7, #12]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	3318      	adds	r3, #24
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fe81 	bl	8005370 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666e:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <xTaskRemoveFromEventList+0xb0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d11d      	bne.n	80066b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3304      	adds	r3, #4
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fe78 	bl	8005370 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	4b19      	ldr	r3, [pc, #100]	; (80066ec <xTaskRemoveFromEventList+0xb4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d903      	bls.n	8006694 <xTaskRemoveFromEventList+0x5c>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4a16      	ldr	r2, [pc, #88]	; (80066ec <xTaskRemoveFromEventList+0xb4>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <xTaskRemoveFromEventList+0xb8>)
 80066a2:	441a      	add	r2, r3
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f7fe fe05 	bl	80052ba <vListInsertEnd>
 80066b0:	e005      	b.n	80066be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3318      	adds	r3, #24
 80066b6:	4619      	mov	r1, r3
 80066b8:	480e      	ldr	r0, [pc, #56]	; (80066f4 <xTaskRemoveFromEventList+0xbc>)
 80066ba:	f7fe fdfe 	bl	80052ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c2:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <xTaskRemoveFromEventList+0xc0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d905      	bls.n	80066d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066cc:	2301      	movs	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <xTaskRemoveFromEventList+0xc4>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e001      	b.n	80066dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066dc:	697b      	ldr	r3, [r7, #20]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20001148 	.word	0x20001148
 80066ec:	20001128 	.word	0x20001128
 80066f0:	20000c50 	.word	0x20000c50
 80066f4:	200010e0 	.word	0x200010e0
 80066f8:	20000c4c 	.word	0x20000c4c
 80066fc:	20001134 	.word	0x20001134

08006700 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006708:	4b06      	ldr	r3, [pc, #24]	; (8006724 <vTaskInternalSetTimeOutState+0x24>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <vTaskInternalSetTimeOutState+0x28>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	605a      	str	r2, [r3, #4]
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20001138 	.word	0x20001138
 8006728:	20001124 	.word	0x20001124

0800672c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	613b      	str	r3, [r7, #16]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60fb      	str	r3, [r7, #12]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800676e:	f000 fe05 	bl	800737c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <xTaskCheckForTimeOut+0xbc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678a:	d102      	bne.n	8006792 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800678c:	2300      	movs	r3, #0
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e023      	b.n	80067da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b15      	ldr	r3, [pc, #84]	; (80067ec <xTaskCheckForTimeOut+0xc0>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d007      	beq.n	80067ae <xTaskCheckForTimeOut+0x82>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d302      	bcc.n	80067ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067a8:	2301      	movs	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e015      	b.n	80067da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d20b      	bcs.n	80067d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ff9b 	bl	8006700 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	e004      	b.n	80067da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067d6:	2301      	movs	r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067da:	f000 fdff 	bl	80073dc <vPortExitCritical>

	return xReturn;
 80067de:	69fb      	ldr	r3, [r7, #28]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20001124 	.word	0x20001124
 80067ec:	20001138 	.word	0x20001138

080067f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067f4:	4b03      	ldr	r3, [pc, #12]	; (8006804 <vTaskMissedYield+0x14>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20001134 	.word	0x20001134

08006808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006810:	f000 f852 	bl	80068b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <prvIdleTask+0x28>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d9f9      	bls.n	8006810 <prvIdleTask+0x8>
			{
				taskYIELD();
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <prvIdleTask+0x2c>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800682c:	e7f0      	b.n	8006810 <prvIdleTask+0x8>
 800682e:	bf00      	nop
 8006830:	20000c50 	.word	0x20000c50
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
 8006842:	e00c      	b.n	800685e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4a12      	ldr	r2, [pc, #72]	; (8006898 <prvInitialiseTaskLists+0x60>)
 8006850:	4413      	add	r3, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fd06 	bl	8005264 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3301      	adds	r3, #1
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b37      	cmp	r3, #55	; 0x37
 8006862:	d9ef      	bls.n	8006844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006864:	480d      	ldr	r0, [pc, #52]	; (800689c <prvInitialiseTaskLists+0x64>)
 8006866:	f7fe fcfd 	bl	8005264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800686a:	480d      	ldr	r0, [pc, #52]	; (80068a0 <prvInitialiseTaskLists+0x68>)
 800686c:	f7fe fcfa 	bl	8005264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006870:	480c      	ldr	r0, [pc, #48]	; (80068a4 <prvInitialiseTaskLists+0x6c>)
 8006872:	f7fe fcf7 	bl	8005264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006876:	480c      	ldr	r0, [pc, #48]	; (80068a8 <prvInitialiseTaskLists+0x70>)
 8006878:	f7fe fcf4 	bl	8005264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800687c:	480b      	ldr	r0, [pc, #44]	; (80068ac <prvInitialiseTaskLists+0x74>)
 800687e:	f7fe fcf1 	bl	8005264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006882:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <prvInitialiseTaskLists+0x78>)
 8006884:	4a05      	ldr	r2, [pc, #20]	; (800689c <prvInitialiseTaskLists+0x64>)
 8006886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006888:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <prvInitialiseTaskLists+0x7c>)
 800688a:	4a05      	ldr	r2, [pc, #20]	; (80068a0 <prvInitialiseTaskLists+0x68>)
 800688c:	601a      	str	r2, [r3, #0]
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000c50 	.word	0x20000c50
 800689c:	200010b0 	.word	0x200010b0
 80068a0:	200010c4 	.word	0x200010c4
 80068a4:	200010e0 	.word	0x200010e0
 80068a8:	200010f4 	.word	0x200010f4
 80068ac:	2000110c 	.word	0x2000110c
 80068b0:	200010d8 	.word	0x200010d8
 80068b4:	200010dc 	.word	0x200010dc

080068b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068be:	e019      	b.n	80068f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068c0:	f000 fd5c 	bl	800737c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068c4:	4b10      	ldr	r3, [pc, #64]	; (8006908 <prvCheckTasksWaitingTermination+0x50>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fd4d 	bl	8005370 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068d6:	4b0d      	ldr	r3, [pc, #52]	; (800690c <prvCheckTasksWaitingTermination+0x54>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3b01      	subs	r3, #1
 80068dc:	4a0b      	ldr	r2, [pc, #44]	; (800690c <prvCheckTasksWaitingTermination+0x54>)
 80068de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <prvCheckTasksWaitingTermination+0x58>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <prvCheckTasksWaitingTermination+0x58>)
 80068e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068ea:	f000 fd77 	bl	80073dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f810 	bl	8006914 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <prvCheckTasksWaitingTermination+0x58>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e1      	bne.n	80068c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200010f4 	.word	0x200010f4
 800690c:	20001120 	.word	0x20001120
 8006910:	20001108 	.word	0x20001108

08006914 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006922:	2b00      	cmp	r3, #0
 8006924:	d108      	bne.n	8006938 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	4618      	mov	r0, r3
 800692c:	f000 feea 	bl	8007704 <vPortFree>
				vPortFree( pxTCB );
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fee7 	bl	8007704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006936:	e018      	b.n	800696a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800693e:	2b01      	cmp	r3, #1
 8006940:	d103      	bne.n	800694a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fede 	bl	8007704 <vPortFree>
	}
 8006948:	e00f      	b.n	800696a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006950:	2b02      	cmp	r3, #2
 8006952:	d00a      	beq.n	800696a <prvDeleteTCB+0x56>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	60fb      	str	r3, [r7, #12]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <prvDeleteTCB+0x54>
	}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800697a:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <prvResetNextTaskUnblockTime+0x40>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <prvResetNextTaskUnblockTime+0x14>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <prvResetNextTaskUnblockTime+0x16>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800698e:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <prvResetNextTaskUnblockTime+0x44>)
 8006990:	f04f 32ff 	mov.w	r2, #4294967295
 8006994:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006996:	e008      	b.n	80069aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <prvResetNextTaskUnblockTime+0x40>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <prvResetNextTaskUnblockTime+0x44>)
 80069a8:	6013      	str	r3, [r2, #0]
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	200010d8 	.word	0x200010d8
 80069b8:	20001140 	.word	0x20001140

080069bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069c2:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <xTaskGetSchedulerState+0x34>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069ca:	2301      	movs	r3, #1
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	e008      	b.n	80069e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d0:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <xTaskGetSchedulerState+0x38>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d102      	bne.n	80069de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069d8:	2302      	movs	r3, #2
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	e001      	b.n	80069e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069de:	2300      	movs	r3, #0
 80069e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069e2:	687b      	ldr	r3, [r7, #4]
	}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	2000112c 	.word	0x2000112c
 80069f4:	20001148 	.word	0x20001148

080069f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d056      	beq.n	8006abc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a0e:	4b2e      	ldr	r3, [pc, #184]	; (8006ac8 <xTaskPriorityDisinherit+0xd0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d00a      	beq.n	8006a2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60bb      	str	r3, [r7, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a50:	1e5a      	subs	r2, r3, #1
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d02c      	beq.n	8006abc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d128      	bne.n	8006abc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fc7e 	bl	8005370 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <xTaskPriorityDisinherit+0xd4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d903      	bls.n	8006a9c <xTaskPriorityDisinherit+0xa4>
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <xTaskPriorityDisinherit+0xd4>)
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <xTaskPriorityDisinherit+0xd8>)
 8006aaa:	441a      	add	r2, r3
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fe fc01 	bl	80052ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006abc:	697b      	ldr	r3, [r7, #20]
	}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000c4c 	.word	0x20000c4c
 8006acc:	20001128 	.word	0x20001128
 8006ad0:	20000c50 	.word	0x20000c50

08006ad4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ade:	4b21      	ldr	r3, [pc, #132]	; (8006b64 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ae4:	4b20      	ldr	r3, [pc, #128]	; (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fc40 	bl	8005370 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d10a      	bne.n	8006b0e <prvAddCurrentTaskToDelayedList+0x3a>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006afe:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4819      	ldr	r0, [pc, #100]	; (8006b6c <prvAddCurrentTaskToDelayedList+0x98>)
 8006b08:	f7fe fbd7 	bl	80052ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b0c:	e026      	b.n	8006b5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4413      	add	r3, r2
 8006b14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b16:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d209      	bcs.n	8006b3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fe fbe4 	bl	8005300 <vListInsert>
}
 8006b38:	e010      	b.n	8006b5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b3a:	4b0e      	ldr	r3, [pc, #56]	; (8006b74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7fe fbda 	bl	8005300 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d202      	bcs.n	8006b5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b56:	4a08      	ldr	r2, [pc, #32]	; (8006b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6013      	str	r3, [r2, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20001124 	.word	0x20001124
 8006b68:	20000c4c 	.word	0x20000c4c
 8006b6c:	2000110c 	.word	0x2000110c
 8006b70:	200010dc 	.word	0x200010dc
 8006b74:	200010d8 	.word	0x200010d8
 8006b78:	20001140 	.word	0x20001140

08006b7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	; 0x28
 8006b80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b86:	f000 facb 	bl	8007120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b8a:	4b1c      	ldr	r3, [pc, #112]	; (8006bfc <xTimerCreateTimerTask+0x80>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d021      	beq.n	8006bd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b9a:	1d3a      	adds	r2, r7, #4
 8006b9c:	f107 0108 	add.w	r1, r7, #8
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fb43 	bl	8005230 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	9202      	str	r2, [sp, #8]
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	460a      	mov	r2, r1
 8006bbc:	4910      	ldr	r1, [pc, #64]	; (8006c00 <xTimerCreateTimerTask+0x84>)
 8006bbe:	4811      	ldr	r0, [pc, #68]	; (8006c04 <xTimerCreateTimerTask+0x88>)
 8006bc0:	f7ff f8e4 	bl	8005d8c <xTaskCreateStatic>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <xTimerCreateTimerTask+0x8c>)
 8006bc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bca:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <xTimerCreateTimerTask+0x8c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	613b      	str	r3, [r7, #16]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bf2:	697b      	ldr	r3, [r7, #20]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	2000117c 	.word	0x2000117c
 8006c00:	0800cb84 	.word	0x0800cb84
 8006c04:	08006d29 	.word	0x08006d29
 8006c08:	20001180 	.word	0x20001180

08006c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	623b      	str	r3, [r7, #32]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <xTimerGenericCommand+0x98>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02a      	beq.n	8006c98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	dc18      	bgt.n	8006c86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c54:	f7ff feb2 	bl	80069bc <xTaskGetSchedulerState>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d109      	bne.n	8006c72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <xTimerGenericCommand+0x98>)
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f107 0110 	add.w	r1, r7, #16
 8006c66:	2300      	movs	r3, #0
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	f7fe fcad 	bl	80055c8 <xQueueGenericSend>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c70:	e012      	b.n	8006c98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c72:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <xTimerGenericCommand+0x98>)
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f107 0110 	add.w	r1, r7, #16
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f7fe fca3 	bl	80055c8 <xQueueGenericSend>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24
 8006c84:	e008      	b.n	8006c98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <xTimerGenericCommand+0x98>)
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f107 0110 	add.w	r1, r7, #16
 8006c8e:	2300      	movs	r3, #0
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	f7fe fd97 	bl	80057c4 <xQueueGenericSendFromISR>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3728      	adds	r7, #40	; 0x28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	2000117c 	.word	0x2000117c

08006ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cb2:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <prvProcessExpiredTimer+0x7c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fb55 	bl	8005370 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d122      	bne.n	8006d14 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	18d1      	adds	r1, r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	f000 f8c8 	bl	8006e70 <prvInsertTimerInActiveList>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	2300      	movs	r3, #0
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	f7ff ff8b 	bl	8006c0c <xTimerGenericCommand>
 8006cf6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	60fb      	str	r3, [r7, #12]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	6978      	ldr	r0, [r7, #20]
 8006d1a:	4798      	blx	r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20001174 	.word	0x20001174

08006d28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d30:	f107 0308 	add.w	r3, r7, #8
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 f857 	bl	8006de8 <prvGetNextExpireTime>
 8006d3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f803 	bl	8006d4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d46:	f000 f8d5 	bl	8006ef4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d4a:	e7f1      	b.n	8006d30 <prvTimerTask+0x8>

08006d4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d56:	f7ff fa4b 	bl	80061f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 f866 	bl	8006e30 <prvSampleTimeNow>
 8006d64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d130      	bne.n	8006dce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <prvProcessTimerOrBlockTask+0x3c>
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d806      	bhi.n	8006d88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d7a:	f7ff fa47 	bl	800620c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff ff91 	bl	8006ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d86:	e024      	b.n	8006dd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d008      	beq.n	8006da0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d8e:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <prvProcessTimerOrBlockTask+0x90>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	bf0c      	ite	eq
 8006d98:	2301      	moveq	r3, #1
 8006d9a:	2300      	movne	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006da0:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <prvProcessTimerOrBlockTask+0x94>)
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4619      	mov	r1, r3
 8006dae:	f7fe ffb9 	bl	8005d24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006db2:	f7ff fa2b 	bl	800620c <xTaskResumeAll>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <prvProcessTimerOrBlockTask+0x98>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	f3bf 8f6f 	isb	sy
}
 8006dcc:	e001      	b.n	8006dd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dce:	f7ff fa1d 	bl	800620c <xTaskResumeAll>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20001178 	.word	0x20001178
 8006de0:	2000117c 	.word	0x2000117c
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006df0:	4b0e      	ldr	r3, [pc, #56]	; (8006e2c <prvGetNextExpireTime+0x44>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <prvGetNextExpireTime+0x44>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e001      	b.n	8006e1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20001174 	.word	0x20001174

08006e30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e38:	f7ff fa86 	bl	8006348 <xTaskGetTickCount>
 8006e3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <prvSampleTimeNow+0x3c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d205      	bcs.n	8006e54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e48:	f000 f908 	bl	800705c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e5a:	4a04      	ldr	r2, [pc, #16]	; (8006e6c <prvSampleTimeNow+0x3c>)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20001184 	.word	0x20001184

08006e70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d812      	bhi.n	8006ebc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d302      	bcc.n	8006eaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e01b      	b.n	8006ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <prvInsertTimerInActiveList+0x7c>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f7fe fa23 	bl	8005300 <vListInsert>
 8006eba:	e012      	b.n	8006ee2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d206      	bcs.n	8006ed2 <prvInsertTimerInActiveList+0x62>
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d302      	bcc.n	8006ed2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	e007      	b.n	8006ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ed2:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <prvInsertTimerInActiveList+0x80>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7fe fa0f 	bl	8005300 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ee2:	697b      	ldr	r3, [r7, #20]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20001178 	.word	0x20001178
 8006ef0:	20001174 	.word	0x20001174

08006ef4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08e      	sub	sp, #56	; 0x38
 8006ef8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006efa:	e09d      	b.n	8007038 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	da18      	bge.n	8006f34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	3304      	adds	r3, #4
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	61fb      	str	r3, [r7, #28]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2a:	6850      	ldr	r0, [r2, #4]
 8006f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2e:	6892      	ldr	r2, [r2, #8]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db7e      	blt.n	8007038 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fa10 	bl	8005370 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f50:	463b      	mov	r3, r7
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff ff6c 	bl	8006e30 <prvSampleTimeNow>
 8006f58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b09      	cmp	r3, #9
 8006f5e:	d86a      	bhi.n	8007036 <prvProcessReceivedCommands+0x142>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <prvProcessReceivedCommands+0x74>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f91 	.word	0x08006f91
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f91 	.word	0x08006f91
 8006f74:	08007039 	.word	0x08007039
 8006f78:	08006fed 	.word	0x08006fed
 8006f7c:	08007025 	.word	0x08007025
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006f91 	.word	0x08006f91
 8006f88:	08007039 	.word	0x08007039
 8006f8c:	08006fed 	.word	0x08006fed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	18d1      	adds	r1, r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9e:	f7ff ff67 	bl	8006e70 <prvInsertTimerInActiveList>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d047      	beq.n	8007038 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d13f      	bne.n	8007038 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	441a      	add	r2, r3
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fca:	f7ff fe1f 	bl	8006c0c <xTimerGenericCommand>
 8006fce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d130      	bne.n	8007038 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	61bb      	str	r3, [r7, #24]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	617b      	str	r3, [r7, #20]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	699a      	ldr	r2, [r3, #24]
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	18d1      	adds	r1, r2, r3
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701e:	f7ff ff27 	bl	8006e70 <prvInsertTimerInActiveList>
					break;
 8007022:	e009      	b.n	8007038 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800702e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007030:	f000 fb68 	bl	8007704 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007034:	e000      	b.n	8007038 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007036:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <prvProcessReceivedCommands+0x164>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	1d39      	adds	r1, r7, #4
 800703e:	2200      	movs	r2, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fc57 	bl	80058f4 <xQueueReceive>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	f47f af57 	bne.w	8006efc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	3730      	adds	r7, #48	; 0x30
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	2000117c 	.word	0x2000117c

0800705c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007062:	e045      	b.n	80070f0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007064:	4b2c      	ldr	r3, [pc, #176]	; (8007118 <prvSwitchTimerLists+0xbc>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800706e:	4b2a      	ldr	r3, [pc, #168]	; (8007118 <prvSwitchTimerLists+0xbc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3304      	adds	r3, #4
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe f977 	bl	8005370 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d12e      	bne.n	80070f0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4413      	add	r3, r2
 800709a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d90e      	bls.n	80070c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070b0:	4b19      	ldr	r3, [pc, #100]	; (8007118 <prvSwitchTimerLists+0xbc>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fe f920 	bl	8005300 <vListInsert>
 80070c0:	e016      	b.n	80070f0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070c2:	2300      	movs	r3, #0
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	2300      	movs	r3, #0
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	2100      	movs	r1, #0
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fd9d 	bl	8006c0c <xTimerGenericCommand>
 80070d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	603b      	str	r3, [r7, #0]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <prvSwitchTimerLists+0xbc>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1b4      	bne.n	8007064 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <prvSwitchTimerLists+0xbc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007100:	4b06      	ldr	r3, [pc, #24]	; (800711c <prvSwitchTimerLists+0xc0>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <prvSwitchTimerLists+0xbc>)
 8007106:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <prvSwitchTimerLists+0xc0>)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	6013      	str	r3, [r2, #0]
}
 800710e:	bf00      	nop
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20001174 	.word	0x20001174
 800711c:	20001178 	.word	0x20001178

08007120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007126:	f000 f929 	bl	800737c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800712a:	4b15      	ldr	r3, [pc, #84]	; (8007180 <prvCheckForValidListAndQueue+0x60>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d120      	bne.n	8007174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007132:	4814      	ldr	r0, [pc, #80]	; (8007184 <prvCheckForValidListAndQueue+0x64>)
 8007134:	f7fe f896 	bl	8005264 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007138:	4813      	ldr	r0, [pc, #76]	; (8007188 <prvCheckForValidListAndQueue+0x68>)
 800713a:	f7fe f893 	bl	8005264 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <prvCheckForValidListAndQueue+0x6c>)
 8007140:	4a10      	ldr	r2, [pc, #64]	; (8007184 <prvCheckForValidListAndQueue+0x64>)
 8007142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007144:	4b12      	ldr	r3, [pc, #72]	; (8007190 <prvCheckForValidListAndQueue+0x70>)
 8007146:	4a10      	ldr	r2, [pc, #64]	; (8007188 <prvCheckForValidListAndQueue+0x68>)
 8007148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800714a:	2300      	movs	r3, #0
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <prvCheckForValidListAndQueue+0x74>)
 8007150:	4a11      	ldr	r2, [pc, #68]	; (8007198 <prvCheckForValidListAndQueue+0x78>)
 8007152:	2110      	movs	r1, #16
 8007154:	200a      	movs	r0, #10
 8007156:	f7fe f99d 	bl	8005494 <xQueueGenericCreateStatic>
 800715a:	4603      	mov	r3, r0
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <prvCheckForValidListAndQueue+0x60>)
 800715e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <prvCheckForValidListAndQueue+0x60>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <prvCheckForValidListAndQueue+0x60>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	490b      	ldr	r1, [pc, #44]	; (800719c <prvCheckForValidListAndQueue+0x7c>)
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fdb0 	bl	8005cd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007174:	f000 f932 	bl	80073dc <vPortExitCritical>
}
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	2000117c 	.word	0x2000117c
 8007184:	2000114c 	.word	0x2000114c
 8007188:	20001160 	.word	0x20001160
 800718c:	20001174 	.word	0x20001174
 8007190:	20001178 	.word	0x20001178
 8007194:	20001228 	.word	0x20001228
 8007198:	20001188 	.word	0x20001188
 800719c:	0800cb8c 	.word	0x0800cb8c

080071a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3b04      	subs	r3, #4
 80071b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3b04      	subs	r3, #4
 80071be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f023 0201 	bic.w	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3b04      	subs	r3, #4
 80071ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071d0:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <pxPortInitialiseStack+0x54>)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3b14      	subs	r3, #20
 80071da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b20      	subs	r3, #32
 80071e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr
 80071f4:	080071f9 	.word	0x080071f9

080071f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80071fe:	2300      	movs	r3, #0
 8007200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007202:	4b12      	ldr	r3, [pc, #72]	; (800724c <prvTaskExitError+0x54>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d00a      	beq.n	8007222 <prvTaskExitError+0x2a>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <prvTaskExitError+0x28>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	60bb      	str	r3, [r7, #8]
}
 8007234:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007236:	bf00      	nop
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0fc      	beq.n	8007238 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	2000000c 	.word	0x2000000c

08007250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <pxCurrentTCBConst2>)
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	6808      	ldr	r0, [r1, #0]
 8007256:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800725a:	f380 8809 	msr	PSP, r0
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8811 	msr	BASEPRI, r0
 800726a:	f04e 0e0d 	orr.w	lr, lr, #13
 800726e:	4770      	bx	lr

08007270 <pxCurrentTCBConst2>:
 8007270:	20000c4c 	.word	0x20000c4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007278:	4806      	ldr	r0, [pc, #24]	; (8007294 <prvPortStartFirstTask+0x1c>)
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	6800      	ldr	r0, [r0, #0]
 800727e:	f380 8808 	msr	MSP, r0
 8007282:	b662      	cpsie	i
 8007284:	b661      	cpsie	f
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	df00      	svc	0
 8007290:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007292:	bf00      	nop
 8007294:	e000ed08 	.word	0xe000ed08

08007298 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800729e:	4b32      	ldr	r3, [pc, #200]	; (8007368 <xPortStartScheduler+0xd0>)
 80072a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	22ff      	movs	r2, #255	; 0xff
 80072ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	4b2a      	ldr	r3, [pc, #168]	; (800736c <xPortStartScheduler+0xd4>)
 80072c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072c6:	4b2a      	ldr	r3, [pc, #168]	; (8007370 <xPortStartScheduler+0xd8>)
 80072c8:	2207      	movs	r2, #7
 80072ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072cc:	e009      	b.n	80072e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80072ce:	4b28      	ldr	r3, [pc, #160]	; (8007370 <xPortStartScheduler+0xd8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	4a26      	ldr	r2, [pc, #152]	; (8007370 <xPortStartScheduler+0xd8>)
 80072d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d0ef      	beq.n	80072ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072ee:	4b20      	ldr	r3, [pc, #128]	; (8007370 <xPortStartScheduler+0xd8>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f1c3 0307 	rsb	r3, r3, #7
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d00a      	beq.n	8007310 <xPortStartScheduler+0x78>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	60bb      	str	r3, [r7, #8]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007310:	4b17      	ldr	r3, [pc, #92]	; (8007370 <xPortStartScheduler+0xd8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	4a16      	ldr	r2, [pc, #88]	; (8007370 <xPortStartScheduler+0xd8>)
 8007318:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800731a:	4b15      	ldr	r3, [pc, #84]	; (8007370 <xPortStartScheduler+0xd8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007322:	4a13      	ldr	r2, [pc, #76]	; (8007370 <xPortStartScheduler+0xd8>)
 8007324:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <xPortStartScheduler+0xdc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a10      	ldr	r2, [pc, #64]	; (8007374 <xPortStartScheduler+0xdc>)
 8007334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007338:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <xPortStartScheduler+0xdc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a0d      	ldr	r2, [pc, #52]	; (8007374 <xPortStartScheduler+0xdc>)
 8007340:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007344:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007346:	f000 f8b9 	bl	80074bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <xPortStartScheduler+0xe0>)
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007350:	f7ff ff92 	bl	8007278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007354:	f7ff f8c4 	bl	80064e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007358:	f7ff ff4e 	bl	80071f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	e000e400 	.word	0xe000e400
 800736c:	20001278 	.word	0x20001278
 8007370:	2000127c 	.word	0x2000127c
 8007374:	e000ed20 	.word	0xe000ed20
 8007378:	2000000c 	.word	0x2000000c

0800737c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	607b      	str	r3, [r7, #4]
}
 8007394:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007396:	4b0f      	ldr	r3, [pc, #60]	; (80073d4 <vPortEnterCritical+0x58>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3301      	adds	r3, #1
 800739c:	4a0d      	ldr	r2, [pc, #52]	; (80073d4 <vPortEnterCritical+0x58>)
 800739e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <vPortEnterCritical+0x58>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d10f      	bne.n	80073c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073a8:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <vPortEnterCritical+0x5c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	603b      	str	r3, [r7, #0]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <vPortEnterCritical+0x4a>
	}
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bc80      	pop	{r7}
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	2000000c 	.word	0x2000000c
 80073d8:	e000ed04 	.word	0xe000ed04

080073dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073e2:	4b11      	ldr	r3, [pc, #68]	; (8007428 <vPortExitCritical+0x4c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <vPortExitCritical+0x24>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	607b      	str	r3, [r7, #4]
}
 80073fc:	bf00      	nop
 80073fe:	e7fe      	b.n	80073fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007400:	4b09      	ldr	r3, [pc, #36]	; (8007428 <vPortExitCritical+0x4c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3b01      	subs	r3, #1
 8007406:	4a08      	ldr	r2, [pc, #32]	; (8007428 <vPortExitCritical+0x4c>)
 8007408:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800740a:	4b07      	ldr	r3, [pc, #28]	; (8007428 <vPortExitCritical+0x4c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <vPortExitCritical+0x42>
 8007412:	2300      	movs	r3, #0
 8007414:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	f383 8811 	msr	BASEPRI, r3
}
 800741c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr
 8007428:	2000000c 	.word	0x2000000c
 800742c:	00000000 	.word	0x00000000

08007430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007430:	f3ef 8009 	mrs	r0, PSP
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <pxCurrentTCBConst>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007440:	6010      	str	r0, [r2, #0]
 8007442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007446:	f04f 0050 	mov.w	r0, #80	; 0x50
 800744a:	f380 8811 	msr	BASEPRI, r0
 800744e:	f7ff f847 	bl	80064e0 <vTaskSwitchContext>
 8007452:	f04f 0000 	mov.w	r0, #0
 8007456:	f380 8811 	msr	BASEPRI, r0
 800745a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800745e:	6819      	ldr	r1, [r3, #0]
 8007460:	6808      	ldr	r0, [r1, #0]
 8007462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007466:	f380 8809 	msr	PSP, r0
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	4770      	bx	lr

08007470 <pxCurrentTCBConst>:
 8007470:	20000c4c 	.word	0x20000c4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
}
 8007490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007492:	f7fe ff67 	bl	8006364 <xTaskIncrementTick>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <SysTick_Handler+0x40>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <vPortSetupTimerInterrupt+0x30>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074c6:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <vPortSetupTimerInterrupt+0x38>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <vPortSetupTimerInterrupt+0x3c>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	099b      	lsrs	r3, r3, #6
 80074d8:	4a08      	ldr	r2, [pc, #32]	; (80074fc <vPortSetupTimerInterrupt+0x40>)
 80074da:	3b01      	subs	r3, #1
 80074dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074de:	4b03      	ldr	r3, [pc, #12]	; (80074ec <vPortSetupTimerInterrupt+0x30>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr
 80074ec:	e000e010 	.word	0xe000e010
 80074f0:	e000e018 	.word	0xe000e018
 80074f4:	20000000 	.word	0x20000000
 80074f8:	10624dd3 	.word	0x10624dd3
 80074fc:	e000e014 	.word	0xe000e014

08007500 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007506:	f3ef 8305 	mrs	r3, IPSR
 800750a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b0f      	cmp	r3, #15
 8007510:	d914      	bls.n	800753c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007512:	4a16      	ldr	r2, [pc, #88]	; (800756c <vPortValidateInterruptPriority+0x6c>)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800751c:	4b14      	ldr	r3, [pc, #80]	; (8007570 <vPortValidateInterruptPriority+0x70>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	7afa      	ldrb	r2, [r7, #11]
 8007522:	429a      	cmp	r2, r3
 8007524:	d20a      	bcs.n	800753c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	607b      	str	r3, [r7, #4]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <vPortValidateInterruptPriority+0x74>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <vPortValidateInterruptPriority+0x78>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d90a      	bls.n	8007562 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	603b      	str	r3, [r7, #0]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <vPortValidateInterruptPriority+0x60>
	}
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr
 800756c:	e000e3f0 	.word	0xe000e3f0
 8007570:	20001278 	.word	0x20001278
 8007574:	e000ed0c 	.word	0xe000ed0c
 8007578:	2000127c 	.word	0x2000127c

0800757c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	; 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007588:	f7fe fe32 	bl	80061f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800758c:	4b58      	ldr	r3, [pc, #352]	; (80076f0 <pvPortMalloc+0x174>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007594:	f000 f910 	bl	80077b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007598:	4b56      	ldr	r3, [pc, #344]	; (80076f4 <pvPortMalloc+0x178>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4013      	ands	r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f040 808e 	bne.w	80076c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01d      	beq.n	80075e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075ac:	2208      	movs	r2, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d014      	beq.n	80075e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	3308      	adds	r3, #8
 80075c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <pvPortMalloc+0x6c>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	617b      	str	r3, [r7, #20]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d069      	beq.n	80076c2 <pvPortMalloc+0x146>
 80075ee:	4b42      	ldr	r3, [pc, #264]	; (80076f8 <pvPortMalloc+0x17c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d864      	bhi.n	80076c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075f8:	4b40      	ldr	r3, [pc, #256]	; (80076fc <pvPortMalloc+0x180>)
 80075fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075fc:	4b3f      	ldr	r3, [pc, #252]	; (80076fc <pvPortMalloc+0x180>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007602:	e004      	b.n	800760e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d903      	bls.n	8007620 <pvPortMalloc+0xa4>
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f1      	bne.n	8007604 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007620:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <pvPortMalloc+0x174>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007626:	429a      	cmp	r2, r3
 8007628:	d04b      	beq.n	80076c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2208      	movs	r2, #8
 8007630:	4413      	add	r3, r2
 8007632:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	1ad2      	subs	r2, r2, r3
 8007644:	2308      	movs	r3, #8
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	429a      	cmp	r2, r3
 800764a:	d91f      	bls.n	800768c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800764c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <pvPortMalloc+0xf8>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	613b      	str	r3, [r7, #16]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	1ad2      	subs	r2, r2, r3
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007686:	69b8      	ldr	r0, [r7, #24]
 8007688:	f000 f8f8 	bl	800787c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800768c:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <pvPortMalloc+0x17c>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	4a18      	ldr	r2, [pc, #96]	; (80076f8 <pvPortMalloc+0x17c>)
 8007698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800769a:	4b17      	ldr	r3, [pc, #92]	; (80076f8 <pvPortMalloc+0x17c>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	4b18      	ldr	r3, [pc, #96]	; (8007700 <pvPortMalloc+0x184>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d203      	bcs.n	80076ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <pvPortMalloc+0x17c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a15      	ldr	r2, [pc, #84]	; (8007700 <pvPortMalloc+0x184>)
 80076ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <pvPortMalloc+0x178>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076c2:	f7fe fda3 	bl	800620c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <pvPortMalloc+0x16a>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <pvPortMalloc+0x168>
	return pvReturn;
 80076e6:	69fb      	ldr	r3, [r7, #28]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3728      	adds	r7, #40	; 0x28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20001e88 	.word	0x20001e88
 80076f4:	20001e94 	.word	0x20001e94
 80076f8:	20001e8c 	.word	0x20001e8c
 80076fc:	20001e80 	.word	0x20001e80
 8007700:	20001e90 	.word	0x20001e90

08007704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d048      	beq.n	80077a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007716:	2308      	movs	r3, #8
 8007718:	425b      	negs	r3, r3
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4413      	add	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	4b21      	ldr	r3, [pc, #132]	; (80077b0 <vPortFree+0xac>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4013      	ands	r3, r2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <vPortFree+0x44>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60fb      	str	r3, [r7, #12]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <vPortFree+0x62>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60bb      	str	r3, [r7, #8]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	4b11      	ldr	r3, [pc, #68]	; (80077b0 <vPortFree+0xac>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d019      	beq.n	80077a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d115      	bne.n	80077a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <vPortFree+0xac>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	43db      	mvns	r3, r3
 8007786:	401a      	ands	r2, r3
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800778c:	f7fe fd30 	bl	80061f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <vPortFree+0xb0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4413      	add	r3, r2
 800779a:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <vPortFree+0xb0>)
 800779c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800779e:	6938      	ldr	r0, [r7, #16]
 80077a0:	f000 f86c 	bl	800787c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80077a4:	f7fe fd32 	bl	800620c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20001e94 	.word	0x20001e94
 80077b4:	20001e8c 	.word	0x20001e8c

080077b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80077c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077c4:	4b27      	ldr	r3, [pc, #156]	; (8007864 <prvHeapInit+0xac>)
 80077c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00c      	beq.n	80077ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3307      	adds	r3, #7
 80077d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <prvHeapInit+0xac>)
 80077e8:	4413      	add	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077f0:	4a1d      	ldr	r2, [pc, #116]	; (8007868 <prvHeapInit+0xb0>)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077f6:	4b1c      	ldr	r3, [pc, #112]	; (8007868 <prvHeapInit+0xb0>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007804:	2208      	movs	r2, #8
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0307 	bic.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <prvHeapInit+0xb4>)
 8007818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800781a:	4b14      	ldr	r3, [pc, #80]	; (800786c <prvHeapInit+0xb4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2200      	movs	r2, #0
 8007820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <prvHeapInit+0xb4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007838:	4b0c      	ldr	r3, [pc, #48]	; (800786c <prvHeapInit+0xb4>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4a0a      	ldr	r2, [pc, #40]	; (8007870 <prvHeapInit+0xb8>)
 8007846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	4a09      	ldr	r2, [pc, #36]	; (8007874 <prvHeapInit+0xbc>)
 800784e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007850:	4b09      	ldr	r3, [pc, #36]	; (8007878 <prvHeapInit+0xc0>)
 8007852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007856:	601a      	str	r2, [r3, #0]
}
 8007858:	bf00      	nop
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	20001280 	.word	0x20001280
 8007868:	20001e80 	.word	0x20001e80
 800786c:	20001e88 	.word	0x20001e88
 8007870:	20001e90 	.word	0x20001e90
 8007874:	20001e8c 	.word	0x20001e8c
 8007878:	20001e94 	.word	0x20001e94

0800787c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007884:	4b27      	ldr	r3, [pc, #156]	; (8007924 <prvInsertBlockIntoFreeList+0xa8>)
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	e002      	b.n	8007890 <prvInsertBlockIntoFreeList+0x14>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	429a      	cmp	r2, r3
 8007898:	d8f7      	bhi.n	800788a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4413      	add	r3, r2
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d108      	bne.n	80078be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	441a      	add	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d118      	bne.n	8007904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <prvInsertBlockIntoFreeList+0xac>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d00d      	beq.n	80078fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	441a      	add	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e008      	b.n	800790c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <prvInsertBlockIntoFreeList+0xac>)
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e003      	b.n	800790c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d002      	beq.n	800791a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr
 8007924:	20001e80 	.word	0x20001e80
 8007928:	20001e88 	.word	0x20001e88

0800792c <Encoder_Init>:
 */

#include "EncoderVelocity.h"
#include "tim.h"

void Encoder_Init(Encoder *Encoder) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

	Encoder->Lastick=HAL_GetTick();
 8007934:	f7fa fc22 	bl	800217c <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	609a      	str	r2, [r3, #8]
	Encoder->velocity=0;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	605a      	str	r2, [r3, #4]
	Encoder->last_counter_value=0;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_IC_CaptureCallback>:

int32_t encoder_count = 0;
int32_t encoder_last_count=0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
     int16_t capture = __HAL_TIM_GET_COUNTER(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	81fb      	strh	r3, [r7, #14]
     if (htim->Instance == TIM2)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796c:	d129      	bne.n	80079c2 <HAL_TIM_IC_CaptureCallback+0x6e>
     {
         if (capture < encoder_last_count)
 800796e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007972:	4b16      	ldr	r3, [pc, #88]	; (80079cc <HAL_TIM_IC_CaptureCallback+0x78>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	da05      	bge.n	8007986 <HAL_TIM_IC_CaptureCallback+0x32>
         {
             encoder_count++;
 800797a:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	e004      	b.n	8007990 <HAL_TIM_IC_CaptureCallback+0x3c>
         }
         else
         {
             encoder_count--;
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800798e:	6013      	str	r3, [r2, #0]
         }

         if (encoder_count < 0)
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	da05      	bge.n	80079a4 <HAL_TIM_IC_CaptureCallback+0x50>
         {
             encoder_count += MAX_COUNT;
 8007998:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80079a0:	4a0b      	ldr	r2, [pc, #44]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80079a2:	6013      	str	r3, [r2, #0]
         }

         if (encoder_count >= MAX_COUNT)
 80079a4:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ac:	db05      	blt.n	80079ba <HAL_TIM_IC_CaptureCallback+0x66>
         {
             encoder_count -= MAX_COUNT;
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80079b6:	4a06      	ldr	r2, [pc, #24]	; (80079d0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80079b8:	6013      	str	r3, [r2, #0]
         }
         encoder_last_count = capture;
 80079ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079be:	4a03      	ldr	r2, [pc, #12]	; (80079cc <HAL_TIM_IC_CaptureCallback+0x78>)
 80079c0:	6013      	str	r3, [r2, #0]
     }
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr
 80079cc:	20001e9c 	.word	0x20001e9c
 80079d0:	20001e98 	.word	0x20001e98
 80079d4:	00000000 	.word	0x00000000

080079d8 <Encoder_CaculateSpeed>:
void Encoder_CaculateSpeed(Encoder *Encoder, uint32_t Time){
 80079d8:	b5b0      	push	{r4, r5, r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]

	 if ((HAL_GetTick() - Encoder->Lastick) >= Time)
 80079e2:	f7fa fbcb 	bl	800217c <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d856      	bhi.n	8007aa2 <Encoder_CaculateSpeed+0xca>
	 {
			int delta_counter = encoder_count - Encoder->last_counter_value;
 80079f4:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <Encoder_CaculateSpeed+0xe0>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	60fb      	str	r3, [r7, #12]
			  	if(encoder_count > Encoder->last_counter_value) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <Encoder_CaculateSpeed+0xe0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	da06      	bge.n	8007a1a <Encoder_CaculateSpeed+0x42>

			  		delta_counter = encoder_count - Encoder->last_counter_value;
 8007a0c:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <Encoder_CaculateSpeed+0xe0>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e005      	b.n	8007a26 <Encoder_CaculateSpeed+0x4e>
			  	}
			  	else {
			  		delta_counter = Encoder->last_counter_value - encoder_count;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b26      	ldr	r3, [pc, #152]	; (8007ab8 <Encoder_CaculateSpeed+0xe0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	60fb      	str	r3, [r7, #12]
			  	}
			  	  float  rpm = ((float)(delta_counter) / 400)/(Time/1000.0);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7f9 f958 	bl	8000cdc <__aeabi_i2f>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4923      	ldr	r1, [pc, #140]	; (8007abc <Encoder_CaculateSpeed+0xe4>)
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7f9 fa5b 	bl	8000eec <__aeabi_fdiv>
 8007a36:	4603      	mov	r3, r0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7f8 fcf5 	bl	8000428 <__aeabi_f2d>
 8007a3e:	4604      	mov	r4, r0
 8007a40:	460d      	mov	r5, r1
 8007a42:	6838      	ldr	r0, [r7, #0]
 8007a44:	f7f8 fcce 	bl	80003e4 <__aeabi_ui2d>
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <Encoder_CaculateSpeed+0xe8>)
 8007a4e:	f7f8 fe6d 	bl	800072c <__aeabi_ddiv>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7f8 fe67 	bl	800072c <__aeabi_ddiv>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	f7f9 f82f 	bl	8000ac8 <__aeabi_d2f>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	60bb      	str	r3, [r7, #8]
			  	   Encoder->Lastick = HAL_GetTick();
 8007a6e:	f7fa fb85 	bl	800217c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	609a      	str	r2, [r3, #8]
		           Encoder->velocity = rpm*(2 * 3.14159265359 * (0.07-0.045));
 8007a78:	68b8      	ldr	r0, [r7, #8]
 8007a7a:	f7f8 fcd5 	bl	8000428 <__aeabi_f2d>
 8007a7e:	a30c      	add	r3, pc, #48	; (adr r3, 8007ab0 <Encoder_CaculateSpeed+0xd8>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f8 fd28 	bl	80004d8 <__aeabi_dmul>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4619      	mov	r1, r3
 8007a90:	f7f9 f81a 	bl	8000ac8 <__aeabi_d2f>
 8007a94:	4602      	mov	r2, r0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	605a      	str	r2, [r3, #4]
		           Encoder->last_counter_value=encoder_count;
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <Encoder_CaculateSpeed+0xe0>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
	 }
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	f3af 8000 	nop.w
 8007ab0:	769cf257 	.word	0x769cf257
 8007ab4:	3fc41b2f 	.word	0x3fc41b2f
 8007ab8:	20001e98 	.word	0x20001e98
 8007abc:	43c80000 	.word	0x43c80000
 8007ac0:	408f4000 	.word	0x408f4000

08007ac4 <Get_Speed>:

float Get_Speed(Encoder *Encoder){
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	return Encoder->velocity;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr

08007ada <VNH3SP30_Init>:
#include "tim.h"
#include "Motor_Driver.h"
#include "stm32f1xx_hal.h"
#include <math.h>
void VNH3SP30_Init(VNH3SP30_t* driver)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
	driver->forward=0;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	709a      	strb	r2, [r3, #2]
	driver->speed=0;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	801a      	strh	r2, [r3, #0]
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr

08007af8 <VNH3SP30_SetSpeed>:

void VNH3SP30_SetSpeed(VNH3SP30_t* driver, int16_t speed)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	807b      	strh	r3, [r7, #2]
	  if (speed > 400) {
 8007b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007b0c:	dd02      	ble.n	8007b14 <VNH3SP30_SetSpeed+0x1c>
	    speed = 400;
 8007b0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007b12:	807b      	strh	r3, [r7, #2]
	  }
int pwm_duty = abs(speed) * 255 / 400;
 8007b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfb8      	it	lt
 8007b1c:	425b      	neglt	r3, r3
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	4613      	mov	r3, r2
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	4a24      	ldr	r2, [pc, #144]	; (8007bbc <VNH3SP30_SetSpeed+0xc4>)
 8007b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8007b2e:	11d2      	asrs	r2, r2, #7
 8007b30:	17db      	asrs	r3, r3, #31
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	60fb      	str	r3, [r7, #12]
  if (speed > 0 || (speed == 0 && driver->forward)) {
 8007b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dc07      	bgt.n	8007b4e <VNH3SP30_SetSpeed+0x56>
 8007b3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d11b      	bne.n	8007b7e <VNH3SP30_SetSpeed+0x86>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	789b      	ldrb	r3, [r3, #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d017      	beq.n	8007b7e <VNH3SP30_SetSpeed+0x86>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b54:	481a      	ldr	r0, [pc, #104]	; (8007bc0 <VNH3SP30_SetSpeed+0xc8>)
 8007b56:	f7fb faf1 	bl	800313c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b60:	4817      	ldr	r0, [pc, #92]	; (8007bc0 <VNH3SP30_SetSpeed+0xc8>)
 8007b62:	f7fb faeb 	bl	800313c <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 8007b66:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <VNH3SP30_SetSpeed+0xcc>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8007b6e:	4b15      	ldr	r3, [pc, #84]	; (8007bc4 <VNH3SP30_SetSpeed+0xcc>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40
    driver->forward = 1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	709a      	strb	r2, [r3, #2]
	   	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
    driver->forward = 0;
  }
}
 8007b7c:	e01a      	b.n	8007bb4 <VNH3SP30_SetSpeed+0xbc>
  } else if (speed < 0) {
 8007b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da16      	bge.n	8007bb4 <VNH3SP30_SetSpeed+0xbc>
	     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8007b86:	2201      	movs	r2, #1
 8007b88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b8c:	480c      	ldr	r0, [pc, #48]	; (8007bc0 <VNH3SP30_SetSpeed+0xc8>)
 8007b8e:	f7fb fad5 	bl	800313c <HAL_GPIO_WritePin>
	   	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8007b92:	2201      	movs	r2, #1
 8007b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b98:	4809      	ldr	r0, [pc, #36]	; (8007bc0 <VNH3SP30_SetSpeed+0xc8>)
 8007b9a:	f7fb facf 	bl	800313c <HAL_GPIO_WritePin>
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <VNH3SP30_SetSpeed+0xcc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	635a      	str	r2, [r3, #52]	; 0x34
	   	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
 8007ba6:	4b07      	ldr	r3, [pc, #28]	; (8007bc4 <VNH3SP30_SetSpeed+0xcc>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
    driver->forward = 0;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	709a      	strb	r2, [r3, #2]
}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	51eb851f 	.word	0x51eb851f
 8007bc0:	40010c00 	.word	0x40010c00
 8007bc4:	200003e4 	.word	0x200003e4

08007bc8 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007bf8:	f7f8 fefe 	bl	80009f8 <__aeabi_dcmpgt>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d006      	beq.n	8007c10 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8007c0e:	e011      	b.n	8007c34 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007c1c:	f7f8 fece 	bl	80009bc <__aeabi_dcmplt>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d100      	bne.n	8007c28 <PID_Init+0x60>
}
 8007c26:	e005      	b.n	8007c34 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	0000      	movs	r0, r0
	...

08007c40 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08a      	sub	sp, #40	; 0x28
 8007c44:	af06      	add	r7, sp, #24
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8007c66:	a318      	add	r3, pc, #96	; (adr r3, 8007cc8 <PID+0x88>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	e9cd 2300 	strd	r2, r3, [sp]
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f931 	bl	8007ee0 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2264      	movs	r2, #100	; 0x64
 8007c82:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8007c84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fa38 	bl	8008100 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8007c90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ca2:	e9cd 2300 	strd	r2, r3, [sp]
 8007ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f984 	bl	8007fb8 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8007cb0:	f7fa fa64 	bl	800217c <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	1ad2      	subs	r2, r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	605a      	str	r2, [r3, #4]

}
 8007cc0:	bf00      	nop
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	406fe000 	.word	0x406fe000

08007cd0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8007cd0:	b5b0      	push	{r4, r5, r7, lr}
 8007cd2:	b08c      	sub	sp, #48	; 0x30
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <PID_Compute+0x14>
	{
		return _FALSE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e0db      	b.n	8007e9c <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8007ce4:	f7fa fa4a 	bl	800217c <HAL_GetTick>
 8007ce8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	6a3a      	ldr	r2, [r7, #32]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	f0c0 80cd 	bcc.w	8007e9a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d18:	f7f8 fa26 	bl	8000168 <__aeabi_dsub>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007d2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d2e:	f7f8 fa1b 	bl	8000168 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007d46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d4a:	f7f8 fbc5 	bl	80004d8 <__aeabi_dmul>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7f8 fa09 	bl	800016c <__adddf3>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d114      	bne.n	8007d96 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d7c:	f7f8 fbac 	bl	80004d8 <__aeabi_dmul>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4620      	mov	r0, r4
 8007d86:	4629      	mov	r1, r5
 8007d88:	f7f8 f9ee 	bl	8000168 <__aeabi_dsub>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007da2:	f7f8 fe29 	bl	80009f8 <__aeabi_dcmpgt>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8007db8:	e010      	b.n	8007ddc <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007dc6:	f7f8 fdf9 	bl	80009bc <__aeabi_dcmplt>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007dea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007dee:	f7f8 fb73 	bl	80004d8 <__aeabi_dmul>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007dfa:	e005      	b.n	8007e08 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e18:	f7f8 fb5e 	bl	80004d8 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4620      	mov	r0, r4
 8007e22:	4629      	mov	r1, r5
 8007e24:	f7f8 f9a0 	bl	8000168 <__aeabi_dsub>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e30:	f7f8 f99c 	bl	800016c <__adddf3>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007e42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e46:	f7f8 fdd7 	bl	80009f8 <__aeabi_dcmpgt>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007e56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007e5a:	e00e      	b.n	8007e7a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007e62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e66:	f7f8 fda9 	bl	80009bc <__aeabi_dcmplt>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007e76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e82:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e8c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e94:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8007e9a:	2300      	movs	r3, #0
	}

}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3730      	adds	r7, #48	; 0x30
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bdb0      	pop	{r4, r5, r7, pc}

08007ea4 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	bf0c      	ite	eq
 8007eb6:	2301      	moveq	r3, #1
 8007eb8:	2300      	movne	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d006      	beq.n	8007ed2 <PID_SetMode+0x2e>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d102      	bne.n	8007ed2 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fe7b 	bl	8007bc8 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7bfa      	ldrb	r2, [r7, #15]
 8007ed6:	705a      	strb	r2, [r3, #1]

}
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8007eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef4:	f7f8 fd76 	bl	80009e4 <__aeabi_dcmpge>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d158      	bne.n	8007fb0 <PID_SetOutputLimits+0xd0>
	{
		return;
	}

	uPID->OutMin = Min;
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f04:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f0e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d04b      	beq.n	8007fb2 <PID_SetOutputLimits+0xd2>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007f28:	f7f8 fd66 	bl	80009f8 <__aeabi_dcmpgt>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007f3c:	e9c1 2300 	strd	r2, r3, [r1]
 8007f40:	e012      	b.n	8007f68 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007f50:	f7f8 fd34 	bl	80009bc <__aeabi_dcmplt>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d006      	beq.n	8007f68 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007f64:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007f74:	f7f8 fd40 	bl	80009f8 <__aeabi_dcmpgt>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8007f8a:	e012      	b.n	8007fb2 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007f98:	f7f8 fd10 	bl	80009bc <__aeabi_dcmplt>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007fa8:	68f9      	ldr	r1, [r7, #12]
 8007faa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8007fae:	e000      	b.n	8007fb2 <PID_SetOutputLimits+0xd2>
		return;
 8007fb0:	bf00      	nop
		}
		else { }

	}

}
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	e9c7 2300 	strd	r2, r3, [r7]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd0:	f7f8 fcf4 	bl	80009bc <__aeabi_dcmplt>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f040 808b 	bne.w	80080f2 <PID_SetTunings2+0x13a>
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007fe8:	f7f8 fce8 	bl	80009bc <__aeabi_dcmplt>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d17f      	bne.n	80080f2 <PID_SetTunings2+0x13a>
 8007ff2:	f04f 0200 	mov.w	r2, #0
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ffe:	f7f8 fcdd 	bl	80009bc <__aeabi_dcmplt>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d174      	bne.n	80080f2 <PID_SetTunings2+0x13a>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800800e:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8008010:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008014:	2b01      	cmp	r3, #1
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	461a      	mov	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8008024:	68f9      	ldr	r1, [r7, #12]
 8008026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008034:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8008038:	68f9      	ldr	r1, [r7, #12]
 800803a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800803e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	4618      	mov	r0, r3
 8008048:	f7f8 f9cc 	bl	80003e4 <__aeabi_ui2d>
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	4b2a      	ldr	r3, [pc, #168]	; (80080fc <PID_SetTunings2+0x144>)
 8008052:	f7f8 fb6b 	bl	800072c <__aeabi_ddiv>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uPID->Kp = Kp;
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008064:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8008068:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800806c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008070:	f7f8 fa32 	bl	80004d8 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	68f9      	ldr	r1, [r7, #12]
 800807a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800807e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008082:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008086:	f7f8 fb51 	bl	800072c <__aeabi_ddiv>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	68f9      	ldr	r1, [r7, #12]
 8008090:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	78db      	ldrb	r3, [r3, #3]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d12b      	bne.n	80080f4 <PID_SetTunings2+0x13c>
	{

		uPID->Kp = (0 - uPID->Kp);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f04f 0100 	mov.w	r1, #0
 80080aa:	f7f8 f85d 	bl	8000168 <__aeabi_dsub>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80080be:	f04f 0000 	mov.w	r0, #0
 80080c2:	f04f 0100 	mov.w	r1, #0
 80080c6:	f7f8 f84f 	bl	8000168 <__aeabi_dsub>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80080da:	f04f 0000 	mov.w	r0, #0
 80080de:	f04f 0100 	mov.w	r1, #0
 80080e2:	f7f8 f841 	bl	8000168 <__aeabi_dsub>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80080f0:	e000      	b.n	80080f4 <PID_SetTunings2+0x13c>
		return;
 80080f2:	bf00      	nop

	}

}
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	408f4000 	.word	0x408f4000

08008100 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d02e      	beq.n	8008172 <PID_SetControllerDirection+0x72>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	78db      	ldrb	r3, [r3, #3]
 8008118:	78fa      	ldrb	r2, [r7, #3]
 800811a:	429a      	cmp	r2, r3
 800811c:	d029      	beq.n	8008172 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008124:	f04f 0000 	mov.w	r0, #0
 8008128:	f04f 0100 	mov.w	r1, #0
 800812c:	f7f8 f81c 	bl	8000168 <__aeabi_dsub>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008140:	f04f 0000 	mov.w	r0, #0
 8008144:	f04f 0100 	mov.w	r1, #0
 8008148:	f7f8 f80e 	bl	8000168 <__aeabi_dsub>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800815c:	f04f 0000 	mov.w	r0, #0
 8008160:	f04f 0100 	mov.w	r1, #0
 8008164:	f7f8 f800 	bl	8000168 <__aeabi_dsub>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	70da      	strb	r2, [r3, #3]

}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8008180:	b5b0      	push	{r4, r5, r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dd2e      	ble.n	80081ee <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8008190:	6838      	ldr	r0, [r7, #0]
 8008192:	f7f8 f937 	bl	8000404 <__aeabi_i2d>
 8008196:	4604      	mov	r4, r0
 8008198:	460d      	mov	r5, r1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7f8 f920 	bl	80003e4 <__aeabi_ui2d>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 fabe 	bl	800072c <__aeabi_ddiv>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80081be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081c2:	f7f8 f989 	bl	80004d8 <__aeabi_dmul>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80081d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081da:	f7f8 faa7 	bl	800072c <__aeabi_ddiv>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	609a      	str	r2, [r3, #8]

	}

}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080081f8 <Steering_PIDControl>:
 *  Created on: Dec 27, 2023
 *      Author: win 10
 */
#include "Steering.h"
#include "PID.h"
void Steering_PIDControl(volatile uint8_t rcdata[],double *Steering , double *SteeringControl , double *SPWM , double *SteeOut){
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
	 	 	 double SteeringAngle;
	 	 	 *Steering=(double)rcdata[0]/255;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	4618      	mov	r0, r3
 800820e:	f7f8 f8e9 	bl	80003e4 <__aeabi_ui2d>
 8008212:	a329      	add	r3, pc, #164	; (adr r3, 80082b8 <Steering_PIDControl+0xc0>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	f7f8 fa88 	bl	800072c <__aeabi_ddiv>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	e9c1 2300 	strd	r2, r3, [r1]
			  SteeringAngle=*Steering*360;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	4b23      	ldr	r3, [pc, #140]	; (80082c0 <Steering_PIDControl+0xc8>)
 8008232:	f7f8 f951 	bl	80004d8 <__aeabi_dmul>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	e9c7 2304 	strd	r2, r3, [r7, #16]
			 * SteeringControl= convertAngle(SteeringAngle);
 800823e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008242:	f000 f85d 	bl	8008300 <convertAngle>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	e9c1 2300 	strd	r2, r3, [r1]
		  	 * SPWM-=*SteeOut;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f7 ff84 	bl	8000168 <__aeabi_dsub>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	e9c1 2300 	strd	r2, r3, [r1]
		  	  if(*SPWM>LEFTLIMIT){
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <Steering_PIDControl+0xcc>)
 8008276:	f7f8 fbbf 	bl	80009f8 <__aeabi_dcmpgt>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <Steering_PIDControl+0x94>
		  		*SPWM=LEFTLIMIT;
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <Steering_PIDControl+0xcc>)
 8008288:	e9c1 2300 	strd	r2, r3, [r1]
		  	  }
		  	  if(*SPWM<RIGHTLIMIT)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <Steering_PIDControl+0xd0>)
 8008298:	f7f8 fb90 	bl	80009bc <__aeabi_dcmplt>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d100      	bne.n	80082a4 <Steering_PIDControl+0xac>
		  	  {
		  		*SPWM=RIGHTLIMIT;
		  	  }
}
 80082a2:	e005      	b.n	80082b0 <Steering_PIDControl+0xb8>
		  		*SPWM=RIGHTLIMIT;
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	f04f 0200 	mov.w	r2, #0
 80082aa:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <Steering_PIDControl+0xd0>)
 80082ac:	e9c1 2300 	strd	r2, r3, [r1]
}
 80082b0:	bf00      	nop
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	00000000 	.word	0x00000000
 80082bc:	406fe000 	.word	0x406fe000
 80082c0:	40768000 	.word	0x40768000
 80082c4:	40558000 	.word	0x40558000
 80082c8:	404e8000 	.word	0x404e8000

080082cc <Steering_Control>:

void Steering_Control(uint8_t Pwm){
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
	if(Pwm<RIGHTLIMIT){
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	2b3c      	cmp	r3, #60	; 0x3c
 80082da:	d801      	bhi.n	80082e0 <Steering_Control+0x14>
		Pwm=RIGHTLIMIT;
 80082dc:	233d      	movs	r3, #61	; 0x3d
 80082de:	71fb      	strb	r3, [r7, #7]
	}
	if(Pwm>LEFTLIMIT){
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	2b56      	cmp	r3, #86	; 0x56
 80082e4:	d901      	bls.n	80082ea <Steering_Control+0x1e>
		Pwm=LEFTLIMIT;
 80082e6:	2356      	movs	r3, #86	; 0x56
 80082e8:	71fb      	strb	r3, [r7, #7]
	}
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Pwm);
 80082ea:	4b04      	ldr	r3, [pc, #16]	; (80082fc <Steering_Control+0x30>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	79fa      	ldrb	r2, [r7, #7]
 80082f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr
 80082fc:	20000474 	.word	0x20000474

08008300 <convertAngle>:

double convertAngle(double oldAngle) {
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	e9c7 0100 	strd	r0, r1, [r7]
  float newAngle;

  if (oldAngle >= 0 && oldAngle <= 180) {
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008316:	f7f8 fb65 	bl	80009e4 <__aeabi_dcmpge>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <convertAngle+0x42>
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <convertAngle+0x74>)
 8008326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800832a:	f7f8 fb51 	bl	80009d0 <__aeabi_dcmple>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d006      	beq.n	8008342 <convertAngle+0x42>
    newAngle = oldAngle;
 8008334:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008338:	f7f8 fbc6 	bl	8000ac8 <__aeabi_d2f>
 800833c:	4603      	mov	r3, r0
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	e00e      	b.n	8008360 <convertAngle+0x60>
  }
  else {
    newAngle = oldAngle - 360;
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <convertAngle+0x78>)
 8008348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800834c:	f7f7 ff0c 	bl	8000168 <__aeabi_dsub>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4610      	mov	r0, r2
 8008356:	4619      	mov	r1, r3
 8008358:	f7f8 fbb6 	bl	8000ac8 <__aeabi_d2f>
 800835c:	4603      	mov	r3, r0
 800835e:	60fb      	str	r3, [r7, #12]
  }

  return newAngle;
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7f8 f861 	bl	8000428 <__aeabi_f2d>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
}
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40668000 	.word	0x40668000
 8008378:	40768000 	.word	0x40768000

0800837c <__cvt>:
 800837c:	2b00      	cmp	r3, #0
 800837e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008382:	461f      	mov	r7, r3
 8008384:	bfbb      	ittet	lt
 8008386:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800838a:	461f      	movlt	r7, r3
 800838c:	2300      	movge	r3, #0
 800838e:	232d      	movlt	r3, #45	; 0x2d
 8008390:	b088      	sub	sp, #32
 8008392:	4614      	mov	r4, r2
 8008394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008396:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008398:	7013      	strb	r3, [r2, #0]
 800839a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800839c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80083a0:	f023 0820 	bic.w	r8, r3, #32
 80083a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083a8:	d005      	beq.n	80083b6 <__cvt+0x3a>
 80083aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083ae:	d100      	bne.n	80083b2 <__cvt+0x36>
 80083b0:	3501      	adds	r5, #1
 80083b2:	2302      	movs	r3, #2
 80083b4:	e000      	b.n	80083b8 <__cvt+0x3c>
 80083b6:	2303      	movs	r3, #3
 80083b8:	aa07      	add	r2, sp, #28
 80083ba:	9204      	str	r2, [sp, #16]
 80083bc:	aa06      	add	r2, sp, #24
 80083be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80083c2:	e9cd 3500 	strd	r3, r5, [sp]
 80083c6:	4622      	mov	r2, r4
 80083c8:	463b      	mov	r3, r7
 80083ca:	f001 f8a5 	bl	8009518 <_dtoa_r>
 80083ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083d2:	4606      	mov	r6, r0
 80083d4:	d102      	bne.n	80083dc <__cvt+0x60>
 80083d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083d8:	07db      	lsls	r3, r3, #31
 80083da:	d522      	bpl.n	8008422 <__cvt+0xa6>
 80083dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083e0:	eb06 0905 	add.w	r9, r6, r5
 80083e4:	d110      	bne.n	8008408 <__cvt+0x8c>
 80083e6:	7833      	ldrb	r3, [r6, #0]
 80083e8:	2b30      	cmp	r3, #48	; 0x30
 80083ea:	d10a      	bne.n	8008402 <__cvt+0x86>
 80083ec:	2200      	movs	r2, #0
 80083ee:	2300      	movs	r3, #0
 80083f0:	4620      	mov	r0, r4
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f8 fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80083f8:	b918      	cbnz	r0, 8008402 <__cvt+0x86>
 80083fa:	f1c5 0501 	rsb	r5, r5, #1
 80083fe:	f8ca 5000 	str.w	r5, [sl]
 8008402:	f8da 3000 	ldr.w	r3, [sl]
 8008406:	4499      	add	r9, r3
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	4620      	mov	r0, r4
 800840e:	4639      	mov	r1, r7
 8008410:	f7f8 faca 	bl	80009a8 <__aeabi_dcmpeq>
 8008414:	b108      	cbz	r0, 800841a <__cvt+0x9e>
 8008416:	f8cd 901c 	str.w	r9, [sp, #28]
 800841a:	2230      	movs	r2, #48	; 0x30
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	454b      	cmp	r3, r9
 8008420:	d307      	bcc.n	8008432 <__cvt+0xb6>
 8008422:	4630      	mov	r0, r6
 8008424:	9b07      	ldr	r3, [sp, #28]
 8008426:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008428:	1b9b      	subs	r3, r3, r6
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	b008      	add	sp, #32
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	1c59      	adds	r1, r3, #1
 8008434:	9107      	str	r1, [sp, #28]
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	e7f0      	b.n	800841c <__cvt+0xa0>

0800843a <__exponent>:
 800843a:	4603      	mov	r3, r0
 800843c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800843e:	2900      	cmp	r1, #0
 8008440:	f803 2b02 	strb.w	r2, [r3], #2
 8008444:	bfb6      	itet	lt
 8008446:	222d      	movlt	r2, #45	; 0x2d
 8008448:	222b      	movge	r2, #43	; 0x2b
 800844a:	4249      	neglt	r1, r1
 800844c:	2909      	cmp	r1, #9
 800844e:	7042      	strb	r2, [r0, #1]
 8008450:	dd2a      	ble.n	80084a8 <__exponent+0x6e>
 8008452:	f10d 0207 	add.w	r2, sp, #7
 8008456:	4617      	mov	r7, r2
 8008458:	260a      	movs	r6, #10
 800845a:	fb91 f5f6 	sdiv	r5, r1, r6
 800845e:	4694      	mov	ip, r2
 8008460:	fb06 1415 	mls	r4, r6, r5, r1
 8008464:	3430      	adds	r4, #48	; 0x30
 8008466:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800846a:	460c      	mov	r4, r1
 800846c:	2c63      	cmp	r4, #99	; 0x63
 800846e:	4629      	mov	r1, r5
 8008470:	f102 32ff 	add.w	r2, r2, #4294967295
 8008474:	dcf1      	bgt.n	800845a <__exponent+0x20>
 8008476:	3130      	adds	r1, #48	; 0x30
 8008478:	f1ac 0402 	sub.w	r4, ip, #2
 800847c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008480:	4622      	mov	r2, r4
 8008482:	1c41      	adds	r1, r0, #1
 8008484:	42ba      	cmp	r2, r7
 8008486:	d30a      	bcc.n	800849e <__exponent+0x64>
 8008488:	f10d 0209 	add.w	r2, sp, #9
 800848c:	eba2 020c 	sub.w	r2, r2, ip
 8008490:	42bc      	cmp	r4, r7
 8008492:	bf88      	it	hi
 8008494:	2200      	movhi	r2, #0
 8008496:	4413      	add	r3, r2
 8008498:	1a18      	subs	r0, r3, r0
 800849a:	b003      	add	sp, #12
 800849c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800849e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80084a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80084a6:	e7ed      	b.n	8008484 <__exponent+0x4a>
 80084a8:	2330      	movs	r3, #48	; 0x30
 80084aa:	3130      	adds	r1, #48	; 0x30
 80084ac:	7083      	strb	r3, [r0, #2]
 80084ae:	70c1      	strb	r1, [r0, #3]
 80084b0:	1d03      	adds	r3, r0, #4
 80084b2:	e7f1      	b.n	8008498 <__exponent+0x5e>

080084b4 <_printf_float>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	b091      	sub	sp, #68	; 0x44
 80084ba:	460c      	mov	r4, r1
 80084bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80084c0:	4616      	mov	r6, r2
 80084c2:	461f      	mov	r7, r3
 80084c4:	4605      	mov	r5, r0
 80084c6:	f000 ff05 	bl	80092d4 <_localeconv_r>
 80084ca:	6803      	ldr	r3, [r0, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	9309      	str	r3, [sp, #36]	; 0x24
 80084d0:	f7f7 fe3e 	bl	8000150 <strlen>
 80084d4:	2300      	movs	r3, #0
 80084d6:	930e      	str	r3, [sp, #56]	; 0x38
 80084d8:	f8d8 3000 	ldr.w	r3, [r8]
 80084dc:	900a      	str	r0, [sp, #40]	; 0x28
 80084de:	3307      	adds	r3, #7
 80084e0:	f023 0307 	bic.w	r3, r3, #7
 80084e4:	f103 0208 	add.w	r2, r3, #8
 80084e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80084ec:	f8d4 b000 	ldr.w	fp, [r4]
 80084f0:	f8c8 2000 	str.w	r2, [r8]
 80084f4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80084f8:	4652      	mov	r2, sl
 80084fa:	4643      	mov	r3, r8
 80084fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008500:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008504:	930b      	str	r3, [sp, #44]	; 0x2c
 8008506:	f04f 32ff 	mov.w	r2, #4294967295
 800850a:	4650      	mov	r0, sl
 800850c:	4b9c      	ldr	r3, [pc, #624]	; (8008780 <_printf_float+0x2cc>)
 800850e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008510:	f7f8 fa7c 	bl	8000a0c <__aeabi_dcmpun>
 8008514:	bb70      	cbnz	r0, 8008574 <_printf_float+0xc0>
 8008516:	f04f 32ff 	mov.w	r2, #4294967295
 800851a:	4650      	mov	r0, sl
 800851c:	4b98      	ldr	r3, [pc, #608]	; (8008780 <_printf_float+0x2cc>)
 800851e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008520:	f7f8 fa56 	bl	80009d0 <__aeabi_dcmple>
 8008524:	bb30      	cbnz	r0, 8008574 <_printf_float+0xc0>
 8008526:	2200      	movs	r2, #0
 8008528:	2300      	movs	r3, #0
 800852a:	4650      	mov	r0, sl
 800852c:	4641      	mov	r1, r8
 800852e:	f7f8 fa45 	bl	80009bc <__aeabi_dcmplt>
 8008532:	b110      	cbz	r0, 800853a <_printf_float+0x86>
 8008534:	232d      	movs	r3, #45	; 0x2d
 8008536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800853a:	4a92      	ldr	r2, [pc, #584]	; (8008784 <_printf_float+0x2d0>)
 800853c:	4b92      	ldr	r3, [pc, #584]	; (8008788 <_printf_float+0x2d4>)
 800853e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008542:	bf94      	ite	ls
 8008544:	4690      	movls	r8, r2
 8008546:	4698      	movhi	r8, r3
 8008548:	2303      	movs	r3, #3
 800854a:	f04f 0a00 	mov.w	sl, #0
 800854e:	6123      	str	r3, [r4, #16]
 8008550:	f02b 0304 	bic.w	r3, fp, #4
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	4633      	mov	r3, r6
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	9700      	str	r7, [sp, #0]
 800855e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008560:	f000 f9d6 	bl	8008910 <_printf_common>
 8008564:	3001      	adds	r0, #1
 8008566:	f040 8090 	bne.w	800868a <_printf_float+0x1d6>
 800856a:	f04f 30ff 	mov.w	r0, #4294967295
 800856e:	b011      	add	sp, #68	; 0x44
 8008570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008574:	4652      	mov	r2, sl
 8008576:	4643      	mov	r3, r8
 8008578:	4650      	mov	r0, sl
 800857a:	4641      	mov	r1, r8
 800857c:	f7f8 fa46 	bl	8000a0c <__aeabi_dcmpun>
 8008580:	b148      	cbz	r0, 8008596 <_printf_float+0xe2>
 8008582:	f1b8 0f00 	cmp.w	r8, #0
 8008586:	bfb8      	it	lt
 8008588:	232d      	movlt	r3, #45	; 0x2d
 800858a:	4a80      	ldr	r2, [pc, #512]	; (800878c <_printf_float+0x2d8>)
 800858c:	bfb8      	it	lt
 800858e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008592:	4b7f      	ldr	r3, [pc, #508]	; (8008790 <_printf_float+0x2dc>)
 8008594:	e7d3      	b.n	800853e <_printf_float+0x8a>
 8008596:	6863      	ldr	r3, [r4, #4]
 8008598:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	d142      	bne.n	8008626 <_printf_float+0x172>
 80085a0:	2306      	movs	r3, #6
 80085a2:	6063      	str	r3, [r4, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	9206      	str	r2, [sp, #24]
 80085a8:	aa0e      	add	r2, sp, #56	; 0x38
 80085aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80085ae:	aa0d      	add	r2, sp, #52	; 0x34
 80085b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80085b4:	9203      	str	r2, [sp, #12]
 80085b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80085ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	6863      	ldr	r3, [r4, #4]
 80085c2:	4652      	mov	r2, sl
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	4628      	mov	r0, r5
 80085c8:	4643      	mov	r3, r8
 80085ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80085cc:	f7ff fed6 	bl	800837c <__cvt>
 80085d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085d2:	4680      	mov	r8, r0
 80085d4:	2947      	cmp	r1, #71	; 0x47
 80085d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085d8:	d108      	bne.n	80085ec <_printf_float+0x138>
 80085da:	1cc8      	adds	r0, r1, #3
 80085dc:	db02      	blt.n	80085e4 <_printf_float+0x130>
 80085de:	6863      	ldr	r3, [r4, #4]
 80085e0:	4299      	cmp	r1, r3
 80085e2:	dd40      	ble.n	8008666 <_printf_float+0x1b2>
 80085e4:	f1a9 0902 	sub.w	r9, r9, #2
 80085e8:	fa5f f989 	uxtb.w	r9, r9
 80085ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80085f0:	d81f      	bhi.n	8008632 <_printf_float+0x17e>
 80085f2:	464a      	mov	r2, r9
 80085f4:	3901      	subs	r1, #1
 80085f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085fa:	910d      	str	r1, [sp, #52]	; 0x34
 80085fc:	f7ff ff1d 	bl	800843a <__exponent>
 8008600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008602:	4682      	mov	sl, r0
 8008604:	1813      	adds	r3, r2, r0
 8008606:	2a01      	cmp	r2, #1
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	dc02      	bgt.n	8008612 <_printf_float+0x15e>
 800860c:	6822      	ldr	r2, [r4, #0]
 800860e:	07d2      	lsls	r2, r2, #31
 8008610:	d501      	bpl.n	8008616 <_printf_float+0x162>
 8008612:	3301      	adds	r3, #1
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800861a:	2b00      	cmp	r3, #0
 800861c:	d09b      	beq.n	8008556 <_printf_float+0xa2>
 800861e:	232d      	movs	r3, #45	; 0x2d
 8008620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008624:	e797      	b.n	8008556 <_printf_float+0xa2>
 8008626:	2947      	cmp	r1, #71	; 0x47
 8008628:	d1bc      	bne.n	80085a4 <_printf_float+0xf0>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1ba      	bne.n	80085a4 <_printf_float+0xf0>
 800862e:	2301      	movs	r3, #1
 8008630:	e7b7      	b.n	80085a2 <_printf_float+0xee>
 8008632:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008636:	d118      	bne.n	800866a <_printf_float+0x1b6>
 8008638:	2900      	cmp	r1, #0
 800863a:	6863      	ldr	r3, [r4, #4]
 800863c:	dd0b      	ble.n	8008656 <_printf_float+0x1a2>
 800863e:	6121      	str	r1, [r4, #16]
 8008640:	b913      	cbnz	r3, 8008648 <_printf_float+0x194>
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	07d0      	lsls	r0, r2, #31
 8008646:	d502      	bpl.n	800864e <_printf_float+0x19a>
 8008648:	3301      	adds	r3, #1
 800864a:	440b      	add	r3, r1
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	f04f 0a00 	mov.w	sl, #0
 8008652:	65a1      	str	r1, [r4, #88]	; 0x58
 8008654:	e7df      	b.n	8008616 <_printf_float+0x162>
 8008656:	b913      	cbnz	r3, 800865e <_printf_float+0x1aa>
 8008658:	6822      	ldr	r2, [r4, #0]
 800865a:	07d2      	lsls	r2, r2, #31
 800865c:	d501      	bpl.n	8008662 <_printf_float+0x1ae>
 800865e:	3302      	adds	r3, #2
 8008660:	e7f4      	b.n	800864c <_printf_float+0x198>
 8008662:	2301      	movs	r3, #1
 8008664:	e7f2      	b.n	800864c <_printf_float+0x198>
 8008666:	f04f 0967 	mov.w	r9, #103	; 0x67
 800866a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800866c:	4299      	cmp	r1, r3
 800866e:	db05      	blt.n	800867c <_printf_float+0x1c8>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	6121      	str	r1, [r4, #16]
 8008674:	07d8      	lsls	r0, r3, #31
 8008676:	d5ea      	bpl.n	800864e <_printf_float+0x19a>
 8008678:	1c4b      	adds	r3, r1, #1
 800867a:	e7e7      	b.n	800864c <_printf_float+0x198>
 800867c:	2900      	cmp	r1, #0
 800867e:	bfcc      	ite	gt
 8008680:	2201      	movgt	r2, #1
 8008682:	f1c1 0202 	rsble	r2, r1, #2
 8008686:	4413      	add	r3, r2
 8008688:	e7e0      	b.n	800864c <_printf_float+0x198>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	055a      	lsls	r2, r3, #21
 800868e:	d407      	bmi.n	80086a0 <_printf_float+0x1ec>
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	4642      	mov	r2, r8
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	47b8      	blx	r7
 800869a:	3001      	adds	r0, #1
 800869c:	d12b      	bne.n	80086f6 <_printf_float+0x242>
 800869e:	e764      	b.n	800856a <_printf_float+0xb6>
 80086a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80086a4:	f240 80dd 	bls.w	8008862 <_printf_float+0x3ae>
 80086a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086ac:	2200      	movs	r2, #0
 80086ae:	2300      	movs	r3, #0
 80086b0:	f7f8 f97a 	bl	80009a8 <__aeabi_dcmpeq>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d033      	beq.n	8008720 <_printf_float+0x26c>
 80086b8:	2301      	movs	r3, #1
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	4a35      	ldr	r2, [pc, #212]	; (8008794 <_printf_float+0x2e0>)
 80086c0:	47b8      	blx	r7
 80086c2:	3001      	adds	r0, #1
 80086c4:	f43f af51 	beq.w	800856a <_printf_float+0xb6>
 80086c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80086cc:	429a      	cmp	r2, r3
 80086ce:	db02      	blt.n	80086d6 <_printf_float+0x222>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	07d8      	lsls	r0, r3, #31
 80086d4:	d50f      	bpl.n	80086f6 <_printf_float+0x242>
 80086d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	47b8      	blx	r7
 80086e0:	3001      	adds	r0, #1
 80086e2:	f43f af42 	beq.w	800856a <_printf_float+0xb6>
 80086e6:	f04f 0800 	mov.w	r8, #0
 80086ea:	f104 091a 	add.w	r9, r4, #26
 80086ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f0:	3b01      	subs	r3, #1
 80086f2:	4543      	cmp	r3, r8
 80086f4:	dc09      	bgt.n	800870a <_printf_float+0x256>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	079b      	lsls	r3, r3, #30
 80086fa:	f100 8104 	bmi.w	8008906 <_printf_float+0x452>
 80086fe:	68e0      	ldr	r0, [r4, #12]
 8008700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008702:	4298      	cmp	r0, r3
 8008704:	bfb8      	it	lt
 8008706:	4618      	movlt	r0, r3
 8008708:	e731      	b.n	800856e <_printf_float+0xba>
 800870a:	2301      	movs	r3, #1
 800870c:	464a      	mov	r2, r9
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f af28 	beq.w	800856a <_printf_float+0xb6>
 800871a:	f108 0801 	add.w	r8, r8, #1
 800871e:	e7e6      	b.n	80086ee <_printf_float+0x23a>
 8008720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008722:	2b00      	cmp	r3, #0
 8008724:	dc38      	bgt.n	8008798 <_printf_float+0x2e4>
 8008726:	2301      	movs	r3, #1
 8008728:	4631      	mov	r1, r6
 800872a:	4628      	mov	r0, r5
 800872c:	4a19      	ldr	r2, [pc, #100]	; (8008794 <_printf_float+0x2e0>)
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f af1a 	beq.w	800856a <_printf_float+0xb6>
 8008736:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800873a:	4313      	orrs	r3, r2
 800873c:	d102      	bne.n	8008744 <_printf_float+0x290>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	07d9      	lsls	r1, r3, #31
 8008742:	d5d8      	bpl.n	80086f6 <_printf_float+0x242>
 8008744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	f43f af0b 	beq.w	800856a <_printf_float+0xb6>
 8008754:	f04f 0900 	mov.w	r9, #0
 8008758:	f104 0a1a 	add.w	sl, r4, #26
 800875c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800875e:	425b      	negs	r3, r3
 8008760:	454b      	cmp	r3, r9
 8008762:	dc01      	bgt.n	8008768 <_printf_float+0x2b4>
 8008764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008766:	e794      	b.n	8008692 <_printf_float+0x1de>
 8008768:	2301      	movs	r3, #1
 800876a:	4652      	mov	r2, sl
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f aef9 	beq.w	800856a <_printf_float+0xb6>
 8008778:	f109 0901 	add.w	r9, r9, #1
 800877c:	e7ee      	b.n	800875c <_printf_float+0x2a8>
 800877e:	bf00      	nop
 8008780:	7fefffff 	.word	0x7fefffff
 8008784:	0800cc2a 	.word	0x0800cc2a
 8008788:	0800cc2e 	.word	0x0800cc2e
 800878c:	0800cc32 	.word	0x0800cc32
 8008790:	0800cc36 	.word	0x0800cc36
 8008794:	0800cc3a 	.word	0x0800cc3a
 8008798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800879a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800879c:	429a      	cmp	r2, r3
 800879e:	bfa8      	it	ge
 80087a0:	461a      	movge	r2, r3
 80087a2:	2a00      	cmp	r2, #0
 80087a4:	4691      	mov	r9, r2
 80087a6:	dc37      	bgt.n	8008818 <_printf_float+0x364>
 80087a8:	f04f 0b00 	mov.w	fp, #0
 80087ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087b0:	f104 021a 	add.w	r2, r4, #26
 80087b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80087b8:	ebaa 0309 	sub.w	r3, sl, r9
 80087bc:	455b      	cmp	r3, fp
 80087be:	dc33      	bgt.n	8008828 <_printf_float+0x374>
 80087c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087c4:	429a      	cmp	r2, r3
 80087c6:	db3b      	blt.n	8008840 <_printf_float+0x38c>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	07da      	lsls	r2, r3, #31
 80087cc:	d438      	bmi.n	8008840 <_printf_float+0x38c>
 80087ce:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80087d2:	eba2 0903 	sub.w	r9, r2, r3
 80087d6:	eba2 020a 	sub.w	r2, r2, sl
 80087da:	4591      	cmp	r9, r2
 80087dc:	bfa8      	it	ge
 80087de:	4691      	movge	r9, r2
 80087e0:	f1b9 0f00 	cmp.w	r9, #0
 80087e4:	dc34      	bgt.n	8008850 <_printf_float+0x39c>
 80087e6:	f04f 0800 	mov.w	r8, #0
 80087ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087ee:	f104 0a1a 	add.w	sl, r4, #26
 80087f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	eba3 0309 	sub.w	r3, r3, r9
 80087fc:	4543      	cmp	r3, r8
 80087fe:	f77f af7a 	ble.w	80086f6 <_printf_float+0x242>
 8008802:	2301      	movs	r3, #1
 8008804:	4652      	mov	r2, sl
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	47b8      	blx	r7
 800880c:	3001      	adds	r0, #1
 800880e:	f43f aeac 	beq.w	800856a <_printf_float+0xb6>
 8008812:	f108 0801 	add.w	r8, r8, #1
 8008816:	e7ec      	b.n	80087f2 <_printf_float+0x33e>
 8008818:	4613      	mov	r3, r2
 800881a:	4631      	mov	r1, r6
 800881c:	4642      	mov	r2, r8
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	d1c0      	bne.n	80087a8 <_printf_float+0x2f4>
 8008826:	e6a0      	b.n	800856a <_printf_float+0xb6>
 8008828:	2301      	movs	r3, #1
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f ae99 	beq.w	800856a <_printf_float+0xb6>
 8008838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800883a:	f10b 0b01 	add.w	fp, fp, #1
 800883e:	e7b9      	b.n	80087b4 <_printf_float+0x300>
 8008840:	4631      	mov	r1, r6
 8008842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	d1bf      	bne.n	80087ce <_printf_float+0x31a>
 800884e:	e68c      	b.n	800856a <_printf_float+0xb6>
 8008850:	464b      	mov	r3, r9
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	eb08 020a 	add.w	r2, r8, sl
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	d1c2      	bne.n	80087e6 <_printf_float+0x332>
 8008860:	e683      	b.n	800856a <_printf_float+0xb6>
 8008862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008864:	2a01      	cmp	r2, #1
 8008866:	dc01      	bgt.n	800886c <_printf_float+0x3b8>
 8008868:	07db      	lsls	r3, r3, #31
 800886a:	d539      	bpl.n	80088e0 <_printf_float+0x42c>
 800886c:	2301      	movs	r3, #1
 800886e:	4642      	mov	r2, r8
 8008870:	4631      	mov	r1, r6
 8008872:	4628      	mov	r0, r5
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f ae77 	beq.w	800856a <_printf_float+0xb6>
 800887c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f ae6f 	beq.w	800856a <_printf_float+0xb6>
 800888c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008890:	2200      	movs	r2, #0
 8008892:	2300      	movs	r3, #0
 8008894:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008898:	f7f8 f886 	bl	80009a8 <__aeabi_dcmpeq>
 800889c:	b9d8      	cbnz	r0, 80088d6 <_printf_float+0x422>
 800889e:	f109 33ff 	add.w	r3, r9, #4294967295
 80088a2:	f108 0201 	add.w	r2, r8, #1
 80088a6:	4631      	mov	r1, r6
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b8      	blx	r7
 80088ac:	3001      	adds	r0, #1
 80088ae:	d10e      	bne.n	80088ce <_printf_float+0x41a>
 80088b0:	e65b      	b.n	800856a <_printf_float+0xb6>
 80088b2:	2301      	movs	r3, #1
 80088b4:	464a      	mov	r2, r9
 80088b6:	4631      	mov	r1, r6
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b8      	blx	r7
 80088bc:	3001      	adds	r0, #1
 80088be:	f43f ae54 	beq.w	800856a <_printf_float+0xb6>
 80088c2:	f108 0801 	add.w	r8, r8, #1
 80088c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c8:	3b01      	subs	r3, #1
 80088ca:	4543      	cmp	r3, r8
 80088cc:	dcf1      	bgt.n	80088b2 <_printf_float+0x3fe>
 80088ce:	4653      	mov	r3, sl
 80088d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088d4:	e6de      	b.n	8008694 <_printf_float+0x1e0>
 80088d6:	f04f 0800 	mov.w	r8, #0
 80088da:	f104 091a 	add.w	r9, r4, #26
 80088de:	e7f2      	b.n	80088c6 <_printf_float+0x412>
 80088e0:	2301      	movs	r3, #1
 80088e2:	4642      	mov	r2, r8
 80088e4:	e7df      	b.n	80088a6 <_printf_float+0x3f2>
 80088e6:	2301      	movs	r3, #1
 80088e8:	464a      	mov	r2, r9
 80088ea:	4631      	mov	r1, r6
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b8      	blx	r7
 80088f0:	3001      	adds	r0, #1
 80088f2:	f43f ae3a 	beq.w	800856a <_printf_float+0xb6>
 80088f6:	f108 0801 	add.w	r8, r8, #1
 80088fa:	68e3      	ldr	r3, [r4, #12]
 80088fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80088fe:	1a5b      	subs	r3, r3, r1
 8008900:	4543      	cmp	r3, r8
 8008902:	dcf0      	bgt.n	80088e6 <_printf_float+0x432>
 8008904:	e6fb      	b.n	80086fe <_printf_float+0x24a>
 8008906:	f04f 0800 	mov.w	r8, #0
 800890a:	f104 0919 	add.w	r9, r4, #25
 800890e:	e7f4      	b.n	80088fa <_printf_float+0x446>

08008910 <_printf_common>:
 8008910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008914:	4616      	mov	r6, r2
 8008916:	4699      	mov	r9, r3
 8008918:	688a      	ldr	r2, [r1, #8]
 800891a:	690b      	ldr	r3, [r1, #16]
 800891c:	4607      	mov	r7, r0
 800891e:	4293      	cmp	r3, r2
 8008920:	bfb8      	it	lt
 8008922:	4613      	movlt	r3, r2
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800892a:	460c      	mov	r4, r1
 800892c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008930:	b10a      	cbz	r2, 8008936 <_printf_common+0x26>
 8008932:	3301      	adds	r3, #1
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	0699      	lsls	r1, r3, #26
 800893a:	bf42      	ittt	mi
 800893c:	6833      	ldrmi	r3, [r6, #0]
 800893e:	3302      	addmi	r3, #2
 8008940:	6033      	strmi	r3, [r6, #0]
 8008942:	6825      	ldr	r5, [r4, #0]
 8008944:	f015 0506 	ands.w	r5, r5, #6
 8008948:	d106      	bne.n	8008958 <_printf_common+0x48>
 800894a:	f104 0a19 	add.w	sl, r4, #25
 800894e:	68e3      	ldr	r3, [r4, #12]
 8008950:	6832      	ldr	r2, [r6, #0]
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	42ab      	cmp	r3, r5
 8008956:	dc2b      	bgt.n	80089b0 <_printf_common+0xa0>
 8008958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800895c:	1e13      	subs	r3, r2, #0
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	bf18      	it	ne
 8008962:	2301      	movne	r3, #1
 8008964:	0692      	lsls	r2, r2, #26
 8008966:	d430      	bmi.n	80089ca <_printf_common+0xba>
 8008968:	4649      	mov	r1, r9
 800896a:	4638      	mov	r0, r7
 800896c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008970:	47c0      	blx	r8
 8008972:	3001      	adds	r0, #1
 8008974:	d023      	beq.n	80089be <_printf_common+0xae>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	6922      	ldr	r2, [r4, #16]
 800897a:	f003 0306 	and.w	r3, r3, #6
 800897e:	2b04      	cmp	r3, #4
 8008980:	bf14      	ite	ne
 8008982:	2500      	movne	r5, #0
 8008984:	6833      	ldreq	r3, [r6, #0]
 8008986:	f04f 0600 	mov.w	r6, #0
 800898a:	bf08      	it	eq
 800898c:	68e5      	ldreq	r5, [r4, #12]
 800898e:	f104 041a 	add.w	r4, r4, #26
 8008992:	bf08      	it	eq
 8008994:	1aed      	subeq	r5, r5, r3
 8008996:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800899a:	bf08      	it	eq
 800899c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a0:	4293      	cmp	r3, r2
 80089a2:	bfc4      	itt	gt
 80089a4:	1a9b      	subgt	r3, r3, r2
 80089a6:	18ed      	addgt	r5, r5, r3
 80089a8:	42b5      	cmp	r5, r6
 80089aa:	d11a      	bne.n	80089e2 <_printf_common+0xd2>
 80089ac:	2000      	movs	r0, #0
 80089ae:	e008      	b.n	80089c2 <_printf_common+0xb2>
 80089b0:	2301      	movs	r3, #1
 80089b2:	4652      	mov	r2, sl
 80089b4:	4649      	mov	r1, r9
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c0      	blx	r8
 80089ba:	3001      	adds	r0, #1
 80089bc:	d103      	bne.n	80089c6 <_printf_common+0xb6>
 80089be:	f04f 30ff 	mov.w	r0, #4294967295
 80089c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c6:	3501      	adds	r5, #1
 80089c8:	e7c1      	b.n	800894e <_printf_common+0x3e>
 80089ca:	2030      	movs	r0, #48	; 0x30
 80089cc:	18e1      	adds	r1, r4, r3
 80089ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089d8:	4422      	add	r2, r4
 80089da:	3302      	adds	r3, #2
 80089dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089e0:	e7c2      	b.n	8008968 <_printf_common+0x58>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4622      	mov	r2, r4
 80089e6:	4649      	mov	r1, r9
 80089e8:	4638      	mov	r0, r7
 80089ea:	47c0      	blx	r8
 80089ec:	3001      	adds	r0, #1
 80089ee:	d0e6      	beq.n	80089be <_printf_common+0xae>
 80089f0:	3601      	adds	r6, #1
 80089f2:	e7d9      	b.n	80089a8 <_printf_common+0x98>

080089f4 <_printf_i>:
 80089f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	7e0f      	ldrb	r7, [r1, #24]
 80089fa:	4691      	mov	r9, r2
 80089fc:	2f78      	cmp	r7, #120	; 0x78
 80089fe:	4680      	mov	r8, r0
 8008a00:	460c      	mov	r4, r1
 8008a02:	469a      	mov	sl, r3
 8008a04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a0a:	d807      	bhi.n	8008a1c <_printf_i+0x28>
 8008a0c:	2f62      	cmp	r7, #98	; 0x62
 8008a0e:	d80a      	bhi.n	8008a26 <_printf_i+0x32>
 8008a10:	2f00      	cmp	r7, #0
 8008a12:	f000 80d5 	beq.w	8008bc0 <_printf_i+0x1cc>
 8008a16:	2f58      	cmp	r7, #88	; 0x58
 8008a18:	f000 80c1 	beq.w	8008b9e <_printf_i+0x1aa>
 8008a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a24:	e03a      	b.n	8008a9c <_printf_i+0xa8>
 8008a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a2a:	2b15      	cmp	r3, #21
 8008a2c:	d8f6      	bhi.n	8008a1c <_printf_i+0x28>
 8008a2e:	a101      	add	r1, pc, #4	; (adr r1, 8008a34 <_printf_i+0x40>)
 8008a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a34:	08008a8d 	.word	0x08008a8d
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008a1d 	.word	0x08008a1d
 8008a40:	08008a1d 	.word	0x08008a1d
 8008a44:	08008a1d 	.word	0x08008a1d
 8008a48:	08008a1d 	.word	0x08008a1d
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008a1d 	.word	0x08008a1d
 8008a54:	08008a1d 	.word	0x08008a1d
 8008a58:	08008a1d 	.word	0x08008a1d
 8008a5c:	08008a1d 	.word	0x08008a1d
 8008a60:	08008ba7 	.word	0x08008ba7
 8008a64:	08008acd 	.word	0x08008acd
 8008a68:	08008b61 	.word	0x08008b61
 8008a6c:	08008a1d 	.word	0x08008a1d
 8008a70:	08008a1d 	.word	0x08008a1d
 8008a74:	08008bc9 	.word	0x08008bc9
 8008a78:	08008a1d 	.word	0x08008a1d
 8008a7c:	08008acd 	.word	0x08008acd
 8008a80:	08008a1d 	.word	0x08008a1d
 8008a84:	08008a1d 	.word	0x08008a1d
 8008a88:	08008b69 	.word	0x08008b69
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	1d1a      	adds	r2, r3, #4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	602a      	str	r2, [r5, #0]
 8008a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e0a0      	b.n	8008be2 <_printf_i+0x1ee>
 8008aa0:	6820      	ldr	r0, [r4, #0]
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	0607      	lsls	r7, r0, #24
 8008aa6:	f103 0104 	add.w	r1, r3, #4
 8008aaa:	6029      	str	r1, [r5, #0]
 8008aac:	d501      	bpl.n	8008ab2 <_printf_i+0xbe>
 8008aae:	681e      	ldr	r6, [r3, #0]
 8008ab0:	e003      	b.n	8008aba <_printf_i+0xc6>
 8008ab2:	0646      	lsls	r6, r0, #25
 8008ab4:	d5fb      	bpl.n	8008aae <_printf_i+0xba>
 8008ab6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	da03      	bge.n	8008ac6 <_printf_i+0xd2>
 8008abe:	232d      	movs	r3, #45	; 0x2d
 8008ac0:	4276      	negs	r6, r6
 8008ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac6:	230a      	movs	r3, #10
 8008ac8:	4859      	ldr	r0, [pc, #356]	; (8008c30 <_printf_i+0x23c>)
 8008aca:	e012      	b.n	8008af2 <_printf_i+0xfe>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	6820      	ldr	r0, [r4, #0]
 8008ad0:	1d19      	adds	r1, r3, #4
 8008ad2:	6029      	str	r1, [r5, #0]
 8008ad4:	0605      	lsls	r5, r0, #24
 8008ad6:	d501      	bpl.n	8008adc <_printf_i+0xe8>
 8008ad8:	681e      	ldr	r6, [r3, #0]
 8008ada:	e002      	b.n	8008ae2 <_printf_i+0xee>
 8008adc:	0641      	lsls	r1, r0, #25
 8008ade:	d5fb      	bpl.n	8008ad8 <_printf_i+0xe4>
 8008ae0:	881e      	ldrh	r6, [r3, #0]
 8008ae2:	2f6f      	cmp	r7, #111	; 0x6f
 8008ae4:	bf0c      	ite	eq
 8008ae6:	2308      	moveq	r3, #8
 8008ae8:	230a      	movne	r3, #10
 8008aea:	4851      	ldr	r0, [pc, #324]	; (8008c30 <_printf_i+0x23c>)
 8008aec:	2100      	movs	r1, #0
 8008aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008af2:	6865      	ldr	r5, [r4, #4]
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	bfa8      	it	ge
 8008af8:	6821      	ldrge	r1, [r4, #0]
 8008afa:	60a5      	str	r5, [r4, #8]
 8008afc:	bfa4      	itt	ge
 8008afe:	f021 0104 	bicge.w	r1, r1, #4
 8008b02:	6021      	strge	r1, [r4, #0]
 8008b04:	b90e      	cbnz	r6, 8008b0a <_printf_i+0x116>
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	d04b      	beq.n	8008ba2 <_printf_i+0x1ae>
 8008b0a:	4615      	mov	r5, r2
 8008b0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b10:	fb03 6711 	mls	r7, r3, r1, r6
 8008b14:	5dc7      	ldrb	r7, [r0, r7]
 8008b16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b1a:	4637      	mov	r7, r6
 8008b1c:	42bb      	cmp	r3, r7
 8008b1e:	460e      	mov	r6, r1
 8008b20:	d9f4      	bls.n	8008b0c <_printf_i+0x118>
 8008b22:	2b08      	cmp	r3, #8
 8008b24:	d10b      	bne.n	8008b3e <_printf_i+0x14a>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	07de      	lsls	r6, r3, #31
 8008b2a:	d508      	bpl.n	8008b3e <_printf_i+0x14a>
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	6861      	ldr	r1, [r4, #4]
 8008b30:	4299      	cmp	r1, r3
 8008b32:	bfde      	ittt	le
 8008b34:	2330      	movle	r3, #48	; 0x30
 8008b36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b3e:	1b52      	subs	r2, r2, r5
 8008b40:	6122      	str	r2, [r4, #16]
 8008b42:	464b      	mov	r3, r9
 8008b44:	4621      	mov	r1, r4
 8008b46:	4640      	mov	r0, r8
 8008b48:	f8cd a000 	str.w	sl, [sp]
 8008b4c:	aa03      	add	r2, sp, #12
 8008b4e:	f7ff fedf 	bl	8008910 <_printf_common>
 8008b52:	3001      	adds	r0, #1
 8008b54:	d14a      	bne.n	8008bec <_printf_i+0x1f8>
 8008b56:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5a:	b004      	add	sp, #16
 8008b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	f043 0320 	orr.w	r3, r3, #32
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	2778      	movs	r7, #120	; 0x78
 8008b6a:	4832      	ldr	r0, [pc, #200]	; (8008c34 <_printf_i+0x240>)
 8008b6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	6829      	ldr	r1, [r5, #0]
 8008b74:	061f      	lsls	r7, r3, #24
 8008b76:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b7a:	d402      	bmi.n	8008b82 <_printf_i+0x18e>
 8008b7c:	065f      	lsls	r7, r3, #25
 8008b7e:	bf48      	it	mi
 8008b80:	b2b6      	uxthmi	r6, r6
 8008b82:	07df      	lsls	r7, r3, #31
 8008b84:	bf48      	it	mi
 8008b86:	f043 0320 	orrmi.w	r3, r3, #32
 8008b8a:	6029      	str	r1, [r5, #0]
 8008b8c:	bf48      	it	mi
 8008b8e:	6023      	strmi	r3, [r4, #0]
 8008b90:	b91e      	cbnz	r6, 8008b9a <_printf_i+0x1a6>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f023 0320 	bic.w	r3, r3, #32
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	2310      	movs	r3, #16
 8008b9c:	e7a6      	b.n	8008aec <_printf_i+0xf8>
 8008b9e:	4824      	ldr	r0, [pc, #144]	; (8008c30 <_printf_i+0x23c>)
 8008ba0:	e7e4      	b.n	8008b6c <_printf_i+0x178>
 8008ba2:	4615      	mov	r5, r2
 8008ba4:	e7bd      	b.n	8008b22 <_printf_i+0x12e>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	6826      	ldr	r6, [r4, #0]
 8008baa:	1d18      	adds	r0, r3, #4
 8008bac:	6961      	ldr	r1, [r4, #20]
 8008bae:	6028      	str	r0, [r5, #0]
 8008bb0:	0635      	lsls	r5, r6, #24
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	d501      	bpl.n	8008bba <_printf_i+0x1c6>
 8008bb6:	6019      	str	r1, [r3, #0]
 8008bb8:	e002      	b.n	8008bc0 <_printf_i+0x1cc>
 8008bba:	0670      	lsls	r0, r6, #25
 8008bbc:	d5fb      	bpl.n	8008bb6 <_printf_i+0x1c2>
 8008bbe:	8019      	strh	r1, [r3, #0]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4615      	mov	r5, r2
 8008bc4:	6123      	str	r3, [r4, #16]
 8008bc6:	e7bc      	b.n	8008b42 <_printf_i+0x14e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	1d1a      	adds	r2, r3, #4
 8008bce:	602a      	str	r2, [r5, #0]
 8008bd0:	681d      	ldr	r5, [r3, #0]
 8008bd2:	6862      	ldr	r2, [r4, #4]
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f000 fbf4 	bl	80093c2 <memchr>
 8008bda:	b108      	cbz	r0, 8008be0 <_printf_i+0x1ec>
 8008bdc:	1b40      	subs	r0, r0, r5
 8008bde:	6060      	str	r0, [r4, #4]
 8008be0:	6863      	ldr	r3, [r4, #4]
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	2300      	movs	r3, #0
 8008be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bea:	e7aa      	b.n	8008b42 <_printf_i+0x14e>
 8008bec:	462a      	mov	r2, r5
 8008bee:	4649      	mov	r1, r9
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	47d0      	blx	sl
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d0ad      	beq.n	8008b56 <_printf_i+0x162>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	079b      	lsls	r3, r3, #30
 8008bfe:	d413      	bmi.n	8008c28 <_printf_i+0x234>
 8008c00:	68e0      	ldr	r0, [r4, #12]
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	4298      	cmp	r0, r3
 8008c06:	bfb8      	it	lt
 8008c08:	4618      	movlt	r0, r3
 8008c0a:	e7a6      	b.n	8008b5a <_printf_i+0x166>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	4632      	mov	r2, r6
 8008c10:	4649      	mov	r1, r9
 8008c12:	4640      	mov	r0, r8
 8008c14:	47d0      	blx	sl
 8008c16:	3001      	adds	r0, #1
 8008c18:	d09d      	beq.n	8008b56 <_printf_i+0x162>
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	68e3      	ldr	r3, [r4, #12]
 8008c1e:	9903      	ldr	r1, [sp, #12]
 8008c20:	1a5b      	subs	r3, r3, r1
 8008c22:	42ab      	cmp	r3, r5
 8008c24:	dcf2      	bgt.n	8008c0c <_printf_i+0x218>
 8008c26:	e7eb      	b.n	8008c00 <_printf_i+0x20c>
 8008c28:	2500      	movs	r5, #0
 8008c2a:	f104 0619 	add.w	r6, r4, #25
 8008c2e:	e7f5      	b.n	8008c1c <_printf_i+0x228>
 8008c30:	0800cc3c 	.word	0x0800cc3c
 8008c34:	0800cc4d 	.word	0x0800cc4d

08008c38 <_scanf_float>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	b087      	sub	sp, #28
 8008c3e:	9303      	str	r3, [sp, #12]
 8008c40:	688b      	ldr	r3, [r1, #8]
 8008c42:	4617      	mov	r7, r2
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c4a:	bf85      	ittet	hi
 8008c4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c50:	195b      	addhi	r3, r3, r5
 8008c52:	2300      	movls	r3, #0
 8008c54:	9302      	strhi	r3, [sp, #8]
 8008c56:	bf88      	it	hi
 8008c58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c5c:	468b      	mov	fp, r1
 8008c5e:	f04f 0500 	mov.w	r5, #0
 8008c62:	bf8c      	ite	hi
 8008c64:	608b      	strhi	r3, [r1, #8]
 8008c66:	9302      	strls	r3, [sp, #8]
 8008c68:	680b      	ldr	r3, [r1, #0]
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c70:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c74:	460c      	mov	r4, r1
 8008c76:	465e      	mov	r6, fp
 8008c78:	46aa      	mov	sl, r5
 8008c7a:	46a9      	mov	r9, r5
 8008c7c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c80:	9501      	str	r5, [sp, #4]
 8008c82:	68a2      	ldr	r2, [r4, #8]
 8008c84:	b152      	cbz	r2, 8008c9c <_scanf_float+0x64>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8008c8c:	d864      	bhi.n	8008d58 <_scanf_float+0x120>
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d83c      	bhi.n	8008d0c <_scanf_float+0xd4>
 8008c92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c96:	b2c8      	uxtb	r0, r1
 8008c98:	280e      	cmp	r0, #14
 8008c9a:	d93a      	bls.n	8008d12 <_scanf_float+0xda>
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	d003      	beq.n	8008caa <_scanf_float+0x72>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cae:	f1ba 0f01 	cmp.w	sl, #1
 8008cb2:	f200 8113 	bhi.w	8008edc <_scanf_float+0x2a4>
 8008cb6:	455e      	cmp	r6, fp
 8008cb8:	f200 8105 	bhi.w	8008ec6 <_scanf_float+0x28e>
 8008cbc:	2501      	movs	r5, #1
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	b007      	add	sp, #28
 8008cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008cca:	2a0d      	cmp	r2, #13
 8008ccc:	d8e6      	bhi.n	8008c9c <_scanf_float+0x64>
 8008cce:	a101      	add	r1, pc, #4	; (adr r1, 8008cd4 <_scanf_float+0x9c>)
 8008cd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008cd4:	08008e13 	.word	0x08008e13
 8008cd8:	08008c9d 	.word	0x08008c9d
 8008cdc:	08008c9d 	.word	0x08008c9d
 8008ce0:	08008c9d 	.word	0x08008c9d
 8008ce4:	08008e73 	.word	0x08008e73
 8008ce8:	08008e4b 	.word	0x08008e4b
 8008cec:	08008c9d 	.word	0x08008c9d
 8008cf0:	08008c9d 	.word	0x08008c9d
 8008cf4:	08008e21 	.word	0x08008e21
 8008cf8:	08008c9d 	.word	0x08008c9d
 8008cfc:	08008c9d 	.word	0x08008c9d
 8008d00:	08008c9d 	.word	0x08008c9d
 8008d04:	08008c9d 	.word	0x08008c9d
 8008d08:	08008dd9 	.word	0x08008dd9
 8008d0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d10:	e7db      	b.n	8008cca <_scanf_float+0x92>
 8008d12:	290e      	cmp	r1, #14
 8008d14:	d8c2      	bhi.n	8008c9c <_scanf_float+0x64>
 8008d16:	a001      	add	r0, pc, #4	; (adr r0, 8008d1c <_scanf_float+0xe4>)
 8008d18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d1c:	08008dcb 	.word	0x08008dcb
 8008d20:	08008c9d 	.word	0x08008c9d
 8008d24:	08008dcb 	.word	0x08008dcb
 8008d28:	08008e5f 	.word	0x08008e5f
 8008d2c:	08008c9d 	.word	0x08008c9d
 8008d30:	08008d79 	.word	0x08008d79
 8008d34:	08008db5 	.word	0x08008db5
 8008d38:	08008db5 	.word	0x08008db5
 8008d3c:	08008db5 	.word	0x08008db5
 8008d40:	08008db5 	.word	0x08008db5
 8008d44:	08008db5 	.word	0x08008db5
 8008d48:	08008db5 	.word	0x08008db5
 8008d4c:	08008db5 	.word	0x08008db5
 8008d50:	08008db5 	.word	0x08008db5
 8008d54:	08008db5 	.word	0x08008db5
 8008d58:	2b6e      	cmp	r3, #110	; 0x6e
 8008d5a:	d809      	bhi.n	8008d70 <_scanf_float+0x138>
 8008d5c:	2b60      	cmp	r3, #96	; 0x60
 8008d5e:	d8b2      	bhi.n	8008cc6 <_scanf_float+0x8e>
 8008d60:	2b54      	cmp	r3, #84	; 0x54
 8008d62:	d077      	beq.n	8008e54 <_scanf_float+0x21c>
 8008d64:	2b59      	cmp	r3, #89	; 0x59
 8008d66:	d199      	bne.n	8008c9c <_scanf_float+0x64>
 8008d68:	2d07      	cmp	r5, #7
 8008d6a:	d197      	bne.n	8008c9c <_scanf_float+0x64>
 8008d6c:	2508      	movs	r5, #8
 8008d6e:	e029      	b.n	8008dc4 <_scanf_float+0x18c>
 8008d70:	2b74      	cmp	r3, #116	; 0x74
 8008d72:	d06f      	beq.n	8008e54 <_scanf_float+0x21c>
 8008d74:	2b79      	cmp	r3, #121	; 0x79
 8008d76:	e7f6      	b.n	8008d66 <_scanf_float+0x12e>
 8008d78:	6821      	ldr	r1, [r4, #0]
 8008d7a:	05c8      	lsls	r0, r1, #23
 8008d7c:	d51a      	bpl.n	8008db4 <_scanf_float+0x17c>
 8008d7e:	9b02      	ldr	r3, [sp, #8]
 8008d80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d84:	6021      	str	r1, [r4, #0]
 8008d86:	f109 0901 	add.w	r9, r9, #1
 8008d8a:	b11b      	cbz	r3, 8008d94 <_scanf_float+0x15c>
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	3201      	adds	r2, #1
 8008d90:	9302      	str	r3, [sp, #8]
 8008d92:	60a2      	str	r2, [r4, #8]
 8008d94:	68a3      	ldr	r3, [r4, #8]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	60a3      	str	r3, [r4, #8]
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	607b      	str	r3, [r7, #4]
 8008da8:	f340 8084 	ble.w	8008eb4 <_scanf_float+0x27c>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	3301      	adds	r3, #1
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	e766      	b.n	8008c82 <_scanf_float+0x4a>
 8008db4:	eb1a 0f05 	cmn.w	sl, r5
 8008db8:	f47f af70 	bne.w	8008c9c <_scanf_float+0x64>
 8008dbc:	6822      	ldr	r2, [r4, #0]
 8008dbe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8008dc8:	e7e4      	b.n	8008d94 <_scanf_float+0x15c>
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	0610      	lsls	r0, r2, #24
 8008dce:	f57f af65 	bpl.w	8008c9c <_scanf_float+0x64>
 8008dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dd6:	e7f4      	b.n	8008dc2 <_scanf_float+0x18a>
 8008dd8:	f1ba 0f00 	cmp.w	sl, #0
 8008ddc:	d10e      	bne.n	8008dfc <_scanf_float+0x1c4>
 8008dde:	f1b9 0f00 	cmp.w	r9, #0
 8008de2:	d10e      	bne.n	8008e02 <_scanf_float+0x1ca>
 8008de4:	6822      	ldr	r2, [r4, #0]
 8008de6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008dea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008dee:	d108      	bne.n	8008e02 <_scanf_float+0x1ca>
 8008df0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008df4:	f04f 0a01 	mov.w	sl, #1
 8008df8:	6022      	str	r2, [r4, #0]
 8008dfa:	e7e3      	b.n	8008dc4 <_scanf_float+0x18c>
 8008dfc:	f1ba 0f02 	cmp.w	sl, #2
 8008e00:	d055      	beq.n	8008eae <_scanf_float+0x276>
 8008e02:	2d01      	cmp	r5, #1
 8008e04:	d002      	beq.n	8008e0c <_scanf_float+0x1d4>
 8008e06:	2d04      	cmp	r5, #4
 8008e08:	f47f af48 	bne.w	8008c9c <_scanf_float+0x64>
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	b2ed      	uxtb	r5, r5
 8008e10:	e7d8      	b.n	8008dc4 <_scanf_float+0x18c>
 8008e12:	f1ba 0f01 	cmp.w	sl, #1
 8008e16:	f47f af41 	bne.w	8008c9c <_scanf_float+0x64>
 8008e1a:	f04f 0a02 	mov.w	sl, #2
 8008e1e:	e7d1      	b.n	8008dc4 <_scanf_float+0x18c>
 8008e20:	b97d      	cbnz	r5, 8008e42 <_scanf_float+0x20a>
 8008e22:	f1b9 0f00 	cmp.w	r9, #0
 8008e26:	f47f af3c 	bne.w	8008ca2 <_scanf_float+0x6a>
 8008e2a:	6822      	ldr	r2, [r4, #0]
 8008e2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e34:	f47f af39 	bne.w	8008caa <_scanf_float+0x72>
 8008e38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e3c:	2501      	movs	r5, #1
 8008e3e:	6022      	str	r2, [r4, #0]
 8008e40:	e7c0      	b.n	8008dc4 <_scanf_float+0x18c>
 8008e42:	2d03      	cmp	r5, #3
 8008e44:	d0e2      	beq.n	8008e0c <_scanf_float+0x1d4>
 8008e46:	2d05      	cmp	r5, #5
 8008e48:	e7de      	b.n	8008e08 <_scanf_float+0x1d0>
 8008e4a:	2d02      	cmp	r5, #2
 8008e4c:	f47f af26 	bne.w	8008c9c <_scanf_float+0x64>
 8008e50:	2503      	movs	r5, #3
 8008e52:	e7b7      	b.n	8008dc4 <_scanf_float+0x18c>
 8008e54:	2d06      	cmp	r5, #6
 8008e56:	f47f af21 	bne.w	8008c9c <_scanf_float+0x64>
 8008e5a:	2507      	movs	r5, #7
 8008e5c:	e7b2      	b.n	8008dc4 <_scanf_float+0x18c>
 8008e5e:	6822      	ldr	r2, [r4, #0]
 8008e60:	0591      	lsls	r1, r2, #22
 8008e62:	f57f af1b 	bpl.w	8008c9c <_scanf_float+0x64>
 8008e66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e70:	e7a8      	b.n	8008dc4 <_scanf_float+0x18c>
 8008e72:	6822      	ldr	r2, [r4, #0]
 8008e74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e7c:	d006      	beq.n	8008e8c <_scanf_float+0x254>
 8008e7e:	0550      	lsls	r0, r2, #21
 8008e80:	f57f af0c 	bpl.w	8008c9c <_scanf_float+0x64>
 8008e84:	f1b9 0f00 	cmp.w	r9, #0
 8008e88:	f43f af0f 	beq.w	8008caa <_scanf_float+0x72>
 8008e8c:	0591      	lsls	r1, r2, #22
 8008e8e:	bf58      	it	pl
 8008e90:	9901      	ldrpl	r1, [sp, #4]
 8008e92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e96:	bf58      	it	pl
 8008e98:	eba9 0101 	subpl.w	r1, r9, r1
 8008e9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ea0:	f04f 0900 	mov.w	r9, #0
 8008ea4:	bf58      	it	pl
 8008ea6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008eaa:	6022      	str	r2, [r4, #0]
 8008eac:	e78a      	b.n	8008dc4 <_scanf_float+0x18c>
 8008eae:	f04f 0a03 	mov.w	sl, #3
 8008eb2:	e787      	b.n	8008dc4 <_scanf_float+0x18c>
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ebc:	4798      	blx	r3
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f43f aedf 	beq.w	8008c82 <_scanf_float+0x4a>
 8008ec4:	e6ea      	b.n	8008c9c <_scanf_float+0x64>
 8008ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008eca:	463a      	mov	r2, r7
 8008ecc:	4640      	mov	r0, r8
 8008ece:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ed2:	4798      	blx	r3
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	e6ec      	b.n	8008cb6 <_scanf_float+0x7e>
 8008edc:	1e6b      	subs	r3, r5, #1
 8008ede:	2b06      	cmp	r3, #6
 8008ee0:	d825      	bhi.n	8008f2e <_scanf_float+0x2f6>
 8008ee2:	2d02      	cmp	r5, #2
 8008ee4:	d836      	bhi.n	8008f54 <_scanf_float+0x31c>
 8008ee6:	455e      	cmp	r6, fp
 8008ee8:	f67f aee8 	bls.w	8008cbc <_scanf_float+0x84>
 8008eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ef0:	463a      	mov	r2, r7
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ef8:	4798      	blx	r3
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	e7f1      	b.n	8008ee6 <_scanf_float+0x2ae>
 8008f02:	9802      	ldr	r0, [sp, #8]
 8008f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f0c:	463a      	mov	r2, r7
 8008f0e:	9002      	str	r0, [sp, #8]
 8008f10:	4640      	mov	r0, r8
 8008f12:	4798      	blx	r3
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f1e:	fa5f fa8a 	uxtb.w	sl, sl
 8008f22:	f1ba 0f02 	cmp.w	sl, #2
 8008f26:	d1ec      	bne.n	8008f02 <_scanf_float+0x2ca>
 8008f28:	3d03      	subs	r5, #3
 8008f2a:	b2ed      	uxtb	r5, r5
 8008f2c:	1b76      	subs	r6, r6, r5
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	05da      	lsls	r2, r3, #23
 8008f32:	d52f      	bpl.n	8008f94 <_scanf_float+0x35c>
 8008f34:	055b      	lsls	r3, r3, #21
 8008f36:	d510      	bpl.n	8008f5a <_scanf_float+0x322>
 8008f38:	455e      	cmp	r6, fp
 8008f3a:	f67f aebf 	bls.w	8008cbc <_scanf_float+0x84>
 8008f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f42:	463a      	mov	r2, r7
 8008f44:	4640      	mov	r0, r8
 8008f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f4a:	4798      	blx	r3
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	e7f1      	b.n	8008f38 <_scanf_float+0x300>
 8008f54:	46aa      	mov	sl, r5
 8008f56:	9602      	str	r6, [sp, #8]
 8008f58:	e7df      	b.n	8008f1a <_scanf_float+0x2e2>
 8008f5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	2965      	cmp	r1, #101	; 0x65
 8008f62:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f66:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f6a:	6123      	str	r3, [r4, #16]
 8008f6c:	d00c      	beq.n	8008f88 <_scanf_float+0x350>
 8008f6e:	2945      	cmp	r1, #69	; 0x45
 8008f70:	d00a      	beq.n	8008f88 <_scanf_float+0x350>
 8008f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f76:	463a      	mov	r2, r7
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4798      	blx	r3
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	1eb5      	subs	r5, r6, #2
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	463a      	mov	r2, r7
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f90:	4798      	blx	r3
 8008f92:	462e      	mov	r6, r5
 8008f94:	6825      	ldr	r5, [r4, #0]
 8008f96:	f015 0510 	ands.w	r5, r5, #16
 8008f9a:	d155      	bne.n	8009048 <_scanf_float+0x410>
 8008f9c:	7035      	strb	r5, [r6, #0]
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa8:	d11d      	bne.n	8008fe6 <_scanf_float+0x3ae>
 8008faa:	9b01      	ldr	r3, [sp, #4]
 8008fac:	454b      	cmp	r3, r9
 8008fae:	eba3 0209 	sub.w	r2, r3, r9
 8008fb2:	d125      	bne.n	8009000 <_scanf_float+0x3c8>
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4659      	mov	r1, fp
 8008fb8:	4640      	mov	r0, r8
 8008fba:	f002 fc41 	bl	800b840 <_strtod_r>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	f8d4 c000 	ldr.w	ip, [r4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f01c 0f02 	tst.w	ip, #2
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	f103 0204 	add.w	r2, r3, #4
 8008fd2:	d020      	beq.n	8009016 <_scanf_float+0x3de>
 8008fd4:	9903      	ldr	r1, [sp, #12]
 8008fd6:	600a      	str	r2, [r1, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	e9c3 6700 	strd	r6, r7, [r3]
 8008fde:	68e3      	ldr	r3, [r4, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60e3      	str	r3, [r4, #12]
 8008fe4:	e66b      	b.n	8008cbe <_scanf_float+0x86>
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0e3      	beq.n	8008fb4 <_scanf_float+0x37c>
 8008fec:	9905      	ldr	r1, [sp, #20]
 8008fee:	230a      	movs	r3, #10
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	3101      	adds	r1, #1
 8008ff6:	f002 fca7 	bl	800b948 <_strtol_r>
 8008ffa:	9b04      	ldr	r3, [sp, #16]
 8008ffc:	9e05      	ldr	r6, [sp, #20]
 8008ffe:	1ac2      	subs	r2, r0, r3
 8009000:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009004:	429e      	cmp	r6, r3
 8009006:	bf28      	it	cs
 8009008:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800900c:	4630      	mov	r0, r6
 800900e:	490f      	ldr	r1, [pc, #60]	; (800904c <_scanf_float+0x414>)
 8009010:	f000 f8f4 	bl	80091fc <siprintf>
 8009014:	e7ce      	b.n	8008fb4 <_scanf_float+0x37c>
 8009016:	f01c 0f04 	tst.w	ip, #4
 800901a:	d1db      	bne.n	8008fd4 <_scanf_float+0x39c>
 800901c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009020:	f8cc 2000 	str.w	r2, [ip]
 8009024:	f8d3 8000 	ldr.w	r8, [r3]
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	f7f7 fcee 	bl	8000a0c <__aeabi_dcmpun>
 8009030:	b128      	cbz	r0, 800903e <_scanf_float+0x406>
 8009032:	4807      	ldr	r0, [pc, #28]	; (8009050 <_scanf_float+0x418>)
 8009034:	f000 f9e2 	bl	80093fc <nanf>
 8009038:	f8c8 0000 	str.w	r0, [r8]
 800903c:	e7cf      	b.n	8008fde <_scanf_float+0x3a6>
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 fd41 	bl	8000ac8 <__aeabi_d2f>
 8009046:	e7f7      	b.n	8009038 <_scanf_float+0x400>
 8009048:	2500      	movs	r5, #0
 800904a:	e638      	b.n	8008cbe <_scanf_float+0x86>
 800904c:	0800cc5e 	.word	0x0800cc5e
 8009050:	0800cff5 	.word	0x0800cff5

08009054 <std>:
 8009054:	2300      	movs	r3, #0
 8009056:	b510      	push	{r4, lr}
 8009058:	4604      	mov	r4, r0
 800905a:	e9c0 3300 	strd	r3, r3, [r0]
 800905e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009062:	6083      	str	r3, [r0, #8]
 8009064:	8181      	strh	r1, [r0, #12]
 8009066:	6643      	str	r3, [r0, #100]	; 0x64
 8009068:	81c2      	strh	r2, [r0, #14]
 800906a:	6183      	str	r3, [r0, #24]
 800906c:	4619      	mov	r1, r3
 800906e:	2208      	movs	r2, #8
 8009070:	305c      	adds	r0, #92	; 0x5c
 8009072:	f000 f926 	bl	80092c2 <memset>
 8009076:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <std+0x58>)
 8009078:	6224      	str	r4, [r4, #32]
 800907a:	6263      	str	r3, [r4, #36]	; 0x24
 800907c:	4b0c      	ldr	r3, [pc, #48]	; (80090b0 <std+0x5c>)
 800907e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009080:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <std+0x60>)
 8009082:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <std+0x64>)
 8009086:	6323      	str	r3, [r4, #48]	; 0x30
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <std+0x68>)
 800908a:	429c      	cmp	r4, r3
 800908c:	d006      	beq.n	800909c <std+0x48>
 800908e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009092:	4294      	cmp	r4, r2
 8009094:	d002      	beq.n	800909c <std+0x48>
 8009096:	33d0      	adds	r3, #208	; 0xd0
 8009098:	429c      	cmp	r4, r3
 800909a:	d105      	bne.n	80090a8 <std+0x54>
 800909c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a4:	f000 b98a 	b.w	80093bc <__retarget_lock_init_recursive>
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	bf00      	nop
 80090ac:	0800923d 	.word	0x0800923d
 80090b0:	0800925f 	.word	0x0800925f
 80090b4:	08009297 	.word	0x08009297
 80090b8:	080092bb 	.word	0x080092bb
 80090bc:	20001ea0 	.word	0x20001ea0

080090c0 <stdio_exit_handler>:
 80090c0:	4a02      	ldr	r2, [pc, #8]	; (80090cc <stdio_exit_handler+0xc>)
 80090c2:	4903      	ldr	r1, [pc, #12]	; (80090d0 <stdio_exit_handler+0x10>)
 80090c4:	4803      	ldr	r0, [pc, #12]	; (80090d4 <stdio_exit_handler+0x14>)
 80090c6:	f000 b869 	b.w	800919c <_fwalk_sglue>
 80090ca:	bf00      	nop
 80090cc:	20000010 	.word	0x20000010
 80090d0:	0800bf85 	.word	0x0800bf85
 80090d4:	2000001c 	.word	0x2000001c

080090d8 <cleanup_stdio>:
 80090d8:	6841      	ldr	r1, [r0, #4]
 80090da:	4b0c      	ldr	r3, [pc, #48]	; (800910c <cleanup_stdio+0x34>)
 80090dc:	b510      	push	{r4, lr}
 80090de:	4299      	cmp	r1, r3
 80090e0:	4604      	mov	r4, r0
 80090e2:	d001      	beq.n	80090e8 <cleanup_stdio+0x10>
 80090e4:	f002 ff4e 	bl	800bf84 <_fflush_r>
 80090e8:	68a1      	ldr	r1, [r4, #8]
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <cleanup_stdio+0x38>)
 80090ec:	4299      	cmp	r1, r3
 80090ee:	d002      	beq.n	80090f6 <cleanup_stdio+0x1e>
 80090f0:	4620      	mov	r0, r4
 80090f2:	f002 ff47 	bl	800bf84 <_fflush_r>
 80090f6:	68e1      	ldr	r1, [r4, #12]
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <cleanup_stdio+0x3c>)
 80090fa:	4299      	cmp	r1, r3
 80090fc:	d004      	beq.n	8009108 <cleanup_stdio+0x30>
 80090fe:	4620      	mov	r0, r4
 8009100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009104:	f002 bf3e 	b.w	800bf84 <_fflush_r>
 8009108:	bd10      	pop	{r4, pc}
 800910a:	bf00      	nop
 800910c:	20001ea0 	.word	0x20001ea0
 8009110:	20001f08 	.word	0x20001f08
 8009114:	20001f70 	.word	0x20001f70

08009118 <global_stdio_init.part.0>:
 8009118:	b510      	push	{r4, lr}
 800911a:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <global_stdio_init.part.0+0x30>)
 800911c:	4c0b      	ldr	r4, [pc, #44]	; (800914c <global_stdio_init.part.0+0x34>)
 800911e:	4a0c      	ldr	r2, [pc, #48]	; (8009150 <global_stdio_init.part.0+0x38>)
 8009120:	4620      	mov	r0, r4
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	2104      	movs	r1, #4
 8009126:	2200      	movs	r2, #0
 8009128:	f7ff ff94 	bl	8009054 <std>
 800912c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009130:	2201      	movs	r2, #1
 8009132:	2109      	movs	r1, #9
 8009134:	f7ff ff8e 	bl	8009054 <std>
 8009138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800913c:	2202      	movs	r2, #2
 800913e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009142:	2112      	movs	r1, #18
 8009144:	f7ff bf86 	b.w	8009054 <std>
 8009148:	20001fd8 	.word	0x20001fd8
 800914c:	20001ea0 	.word	0x20001ea0
 8009150:	080090c1 	.word	0x080090c1

08009154 <__sfp_lock_acquire>:
 8009154:	4801      	ldr	r0, [pc, #4]	; (800915c <__sfp_lock_acquire+0x8>)
 8009156:	f000 b932 	b.w	80093be <__retarget_lock_acquire_recursive>
 800915a:	bf00      	nop
 800915c:	20001fe1 	.word	0x20001fe1

08009160 <__sfp_lock_release>:
 8009160:	4801      	ldr	r0, [pc, #4]	; (8009168 <__sfp_lock_release+0x8>)
 8009162:	f000 b92d 	b.w	80093c0 <__retarget_lock_release_recursive>
 8009166:	bf00      	nop
 8009168:	20001fe1 	.word	0x20001fe1

0800916c <__sinit>:
 800916c:	b510      	push	{r4, lr}
 800916e:	4604      	mov	r4, r0
 8009170:	f7ff fff0 	bl	8009154 <__sfp_lock_acquire>
 8009174:	6a23      	ldr	r3, [r4, #32]
 8009176:	b11b      	cbz	r3, 8009180 <__sinit+0x14>
 8009178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800917c:	f7ff bff0 	b.w	8009160 <__sfp_lock_release>
 8009180:	4b04      	ldr	r3, [pc, #16]	; (8009194 <__sinit+0x28>)
 8009182:	6223      	str	r3, [r4, #32]
 8009184:	4b04      	ldr	r3, [pc, #16]	; (8009198 <__sinit+0x2c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f5      	bne.n	8009178 <__sinit+0xc>
 800918c:	f7ff ffc4 	bl	8009118 <global_stdio_init.part.0>
 8009190:	e7f2      	b.n	8009178 <__sinit+0xc>
 8009192:	bf00      	nop
 8009194:	080090d9 	.word	0x080090d9
 8009198:	20001fd8 	.word	0x20001fd8

0800919c <_fwalk_sglue>:
 800919c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a0:	4607      	mov	r7, r0
 80091a2:	4688      	mov	r8, r1
 80091a4:	4614      	mov	r4, r2
 80091a6:	2600      	movs	r6, #0
 80091a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091ac:	f1b9 0901 	subs.w	r9, r9, #1
 80091b0:	d505      	bpl.n	80091be <_fwalk_sglue+0x22>
 80091b2:	6824      	ldr	r4, [r4, #0]
 80091b4:	2c00      	cmp	r4, #0
 80091b6:	d1f7      	bne.n	80091a8 <_fwalk_sglue+0xc>
 80091b8:	4630      	mov	r0, r6
 80091ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d907      	bls.n	80091d4 <_fwalk_sglue+0x38>
 80091c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091c8:	3301      	adds	r3, #1
 80091ca:	d003      	beq.n	80091d4 <_fwalk_sglue+0x38>
 80091cc:	4629      	mov	r1, r5
 80091ce:	4638      	mov	r0, r7
 80091d0:	47c0      	blx	r8
 80091d2:	4306      	orrs	r6, r0
 80091d4:	3568      	adds	r5, #104	; 0x68
 80091d6:	e7e9      	b.n	80091ac <_fwalk_sglue+0x10>

080091d8 <iprintf>:
 80091d8:	b40f      	push	{r0, r1, r2, r3}
 80091da:	b507      	push	{r0, r1, r2, lr}
 80091dc:	4906      	ldr	r1, [pc, #24]	; (80091f8 <iprintf+0x20>)
 80091de:	ab04      	add	r3, sp, #16
 80091e0:	6808      	ldr	r0, [r1, #0]
 80091e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e6:	6881      	ldr	r1, [r0, #8]
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	f002 fd2f 	bl	800bc4c <_vfiprintf_r>
 80091ee:	b003      	add	sp, #12
 80091f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091f4:	b004      	add	sp, #16
 80091f6:	4770      	bx	lr
 80091f8:	20000068 	.word	0x20000068

080091fc <siprintf>:
 80091fc:	b40e      	push	{r1, r2, r3}
 80091fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009202:	b500      	push	{lr}
 8009204:	b09c      	sub	sp, #112	; 0x70
 8009206:	ab1d      	add	r3, sp, #116	; 0x74
 8009208:	9002      	str	r0, [sp, #8]
 800920a:	9006      	str	r0, [sp, #24]
 800920c:	9107      	str	r1, [sp, #28]
 800920e:	9104      	str	r1, [sp, #16]
 8009210:	4808      	ldr	r0, [pc, #32]	; (8009234 <siprintf+0x38>)
 8009212:	4909      	ldr	r1, [pc, #36]	; (8009238 <siprintf+0x3c>)
 8009214:	f853 2b04 	ldr.w	r2, [r3], #4
 8009218:	9105      	str	r1, [sp, #20]
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	a902      	add	r1, sp, #8
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	f002 fbee 	bl	800ba00 <_svfiprintf_r>
 8009224:	2200      	movs	r2, #0
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	701a      	strb	r2, [r3, #0]
 800922a:	b01c      	add	sp, #112	; 0x70
 800922c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009230:	b003      	add	sp, #12
 8009232:	4770      	bx	lr
 8009234:	20000068 	.word	0x20000068
 8009238:	ffff0208 	.word	0xffff0208

0800923c <__sread>:
 800923c:	b510      	push	{r4, lr}
 800923e:	460c      	mov	r4, r1
 8009240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009244:	f000 f86c 	bl	8009320 <_read_r>
 8009248:	2800      	cmp	r0, #0
 800924a:	bfab      	itete	ge
 800924c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800924e:	89a3      	ldrhlt	r3, [r4, #12]
 8009250:	181b      	addge	r3, r3, r0
 8009252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009256:	bfac      	ite	ge
 8009258:	6563      	strge	r3, [r4, #84]	; 0x54
 800925a:	81a3      	strhlt	r3, [r4, #12]
 800925c:	bd10      	pop	{r4, pc}

0800925e <__swrite>:
 800925e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009262:	461f      	mov	r7, r3
 8009264:	898b      	ldrh	r3, [r1, #12]
 8009266:	4605      	mov	r5, r0
 8009268:	05db      	lsls	r3, r3, #23
 800926a:	460c      	mov	r4, r1
 800926c:	4616      	mov	r6, r2
 800926e:	d505      	bpl.n	800927c <__swrite+0x1e>
 8009270:	2302      	movs	r3, #2
 8009272:	2200      	movs	r2, #0
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	f000 f840 	bl	80092fc <_lseek_r>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	4632      	mov	r2, r6
 8009280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	4628      	mov	r0, r5
 8009288:	463b      	mov	r3, r7
 800928a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800928e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	f000 b857 	b.w	8009344 <_write_r>

08009296 <__sseek>:
 8009296:	b510      	push	{r4, lr}
 8009298:	460c      	mov	r4, r1
 800929a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929e:	f000 f82d 	bl	80092fc <_lseek_r>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	bf15      	itete	ne
 80092a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092b2:	81a3      	strheq	r3, [r4, #12]
 80092b4:	bf18      	it	ne
 80092b6:	81a3      	strhne	r3, [r4, #12]
 80092b8:	bd10      	pop	{r4, pc}

080092ba <__sclose>:
 80092ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092be:	f000 b80d 	b.w	80092dc <_close_r>

080092c2 <memset>:
 80092c2:	4603      	mov	r3, r0
 80092c4:	4402      	add	r2, r0
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d100      	bne.n	80092cc <memset+0xa>
 80092ca:	4770      	bx	lr
 80092cc:	f803 1b01 	strb.w	r1, [r3], #1
 80092d0:	e7f9      	b.n	80092c6 <memset+0x4>
	...

080092d4 <_localeconv_r>:
 80092d4:	4800      	ldr	r0, [pc, #0]	; (80092d8 <_localeconv_r+0x4>)
 80092d6:	4770      	bx	lr
 80092d8:	2000015c 	.word	0x2000015c

080092dc <_close_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	2300      	movs	r3, #0
 80092e0:	4d05      	ldr	r5, [pc, #20]	; (80092f8 <_close_r+0x1c>)
 80092e2:	4604      	mov	r4, r0
 80092e4:	4608      	mov	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7f8 fb5e 	bl	80019a8 <_close>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_close_r+0x1a>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_close_r+0x1a>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20001fdc 	.word	0x20001fdc

080092fc <_lseek_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	4611      	mov	r1, r2
 8009304:	2200      	movs	r2, #0
 8009306:	4d05      	ldr	r5, [pc, #20]	; (800931c <_lseek_r+0x20>)
 8009308:	602a      	str	r2, [r5, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	f7f8 fb70 	bl	80019f0 <_lseek>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d102      	bne.n	800931a <_lseek_r+0x1e>
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	b103      	cbz	r3, 800931a <_lseek_r+0x1e>
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	20001fdc 	.word	0x20001fdc

08009320 <_read_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	2200      	movs	r2, #0
 800932a:	4d05      	ldr	r5, [pc, #20]	; (8009340 <_read_r+0x20>)
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f7f8 fb1d 	bl	800196e <_read>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_read_r+0x1e>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_read_r+0x1e>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	20001fdc 	.word	0x20001fdc

08009344 <_write_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4604      	mov	r4, r0
 8009348:	4608      	mov	r0, r1
 800934a:	4611      	mov	r1, r2
 800934c:	2200      	movs	r2, #0
 800934e:	4d05      	ldr	r5, [pc, #20]	; (8009364 <_write_r+0x20>)
 8009350:	602a      	str	r2, [r5, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	f7f8 feb0 	bl	80020b8 <_write>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_write_r+0x1e>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	b103      	cbz	r3, 8009362 <_write_r+0x1e>
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	20001fdc 	.word	0x20001fdc

08009368 <__errno>:
 8009368:	4b01      	ldr	r3, [pc, #4]	; (8009370 <__errno+0x8>)
 800936a:	6818      	ldr	r0, [r3, #0]
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	20000068 	.word	0x20000068

08009374 <__libc_init_array>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	2600      	movs	r6, #0
 8009378:	4d0c      	ldr	r5, [pc, #48]	; (80093ac <__libc_init_array+0x38>)
 800937a:	4c0d      	ldr	r4, [pc, #52]	; (80093b0 <__libc_init_array+0x3c>)
 800937c:	1b64      	subs	r4, r4, r5
 800937e:	10a4      	asrs	r4, r4, #2
 8009380:	42a6      	cmp	r6, r4
 8009382:	d109      	bne.n	8009398 <__libc_init_array+0x24>
 8009384:	f003 fbc2 	bl	800cb0c <_init>
 8009388:	2600      	movs	r6, #0
 800938a:	4d0a      	ldr	r5, [pc, #40]	; (80093b4 <__libc_init_array+0x40>)
 800938c:	4c0a      	ldr	r4, [pc, #40]	; (80093b8 <__libc_init_array+0x44>)
 800938e:	1b64      	subs	r4, r4, r5
 8009390:	10a4      	asrs	r4, r4, #2
 8009392:	42a6      	cmp	r6, r4
 8009394:	d105      	bne.n	80093a2 <__libc_init_array+0x2e>
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	f855 3b04 	ldr.w	r3, [r5], #4
 800939c:	4798      	blx	r3
 800939e:	3601      	adds	r6, #1
 80093a0:	e7ee      	b.n	8009380 <__libc_init_array+0xc>
 80093a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a6:	4798      	blx	r3
 80093a8:	3601      	adds	r6, #1
 80093aa:	e7f2      	b.n	8009392 <__libc_init_array+0x1e>
 80093ac:	0800d058 	.word	0x0800d058
 80093b0:	0800d058 	.word	0x0800d058
 80093b4:	0800d058 	.word	0x0800d058
 80093b8:	0800d05c 	.word	0x0800d05c

080093bc <__retarget_lock_init_recursive>:
 80093bc:	4770      	bx	lr

080093be <__retarget_lock_acquire_recursive>:
 80093be:	4770      	bx	lr

080093c0 <__retarget_lock_release_recursive>:
 80093c0:	4770      	bx	lr

080093c2 <memchr>:
 80093c2:	4603      	mov	r3, r0
 80093c4:	b510      	push	{r4, lr}
 80093c6:	b2c9      	uxtb	r1, r1
 80093c8:	4402      	add	r2, r0
 80093ca:	4293      	cmp	r3, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	d101      	bne.n	80093d4 <memchr+0x12>
 80093d0:	2000      	movs	r0, #0
 80093d2:	e003      	b.n	80093dc <memchr+0x1a>
 80093d4:	7804      	ldrb	r4, [r0, #0]
 80093d6:	3301      	adds	r3, #1
 80093d8:	428c      	cmp	r4, r1
 80093da:	d1f6      	bne.n	80093ca <memchr+0x8>
 80093dc:	bd10      	pop	{r4, pc}

080093de <memcpy>:
 80093de:	440a      	add	r2, r1
 80093e0:	4291      	cmp	r1, r2
 80093e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80093e6:	d100      	bne.n	80093ea <memcpy+0xc>
 80093e8:	4770      	bx	lr
 80093ea:	b510      	push	{r4, lr}
 80093ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f0:	4291      	cmp	r1, r2
 80093f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f6:	d1f9      	bne.n	80093ec <memcpy+0xe>
 80093f8:	bd10      	pop	{r4, pc}
	...

080093fc <nanf>:
 80093fc:	4800      	ldr	r0, [pc, #0]	; (8009400 <nanf+0x4>)
 80093fe:	4770      	bx	lr
 8009400:	7fc00000 	.word	0x7fc00000

08009404 <quorem>:
 8009404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	6903      	ldr	r3, [r0, #16]
 800940a:	690c      	ldr	r4, [r1, #16]
 800940c:	4607      	mov	r7, r0
 800940e:	42a3      	cmp	r3, r4
 8009410:	db7f      	blt.n	8009512 <quorem+0x10e>
 8009412:	3c01      	subs	r4, #1
 8009414:	f100 0514 	add.w	r5, r0, #20
 8009418:	f101 0814 	add.w	r8, r1, #20
 800941c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800942a:	3301      	adds	r3, #1
 800942c:	429a      	cmp	r2, r3
 800942e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009432:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009436:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800943a:	d331      	bcc.n	80094a0 <quorem+0x9c>
 800943c:	f04f 0e00 	mov.w	lr, #0
 8009440:	4640      	mov	r0, r8
 8009442:	46ac      	mov	ip, r5
 8009444:	46f2      	mov	sl, lr
 8009446:	f850 2b04 	ldr.w	r2, [r0], #4
 800944a:	b293      	uxth	r3, r2
 800944c:	fb06 e303 	mla	r3, r6, r3, lr
 8009450:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009454:	0c1a      	lsrs	r2, r3, #16
 8009456:	b29b      	uxth	r3, r3
 8009458:	fb06 220e 	mla	r2, r6, lr, r2
 800945c:	ebaa 0303 	sub.w	r3, sl, r3
 8009460:	f8dc a000 	ldr.w	sl, [ip]
 8009464:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009468:	fa1f fa8a 	uxth.w	sl, sl
 800946c:	4453      	add	r3, sl
 800946e:	f8dc a000 	ldr.w	sl, [ip]
 8009472:	b292      	uxth	r2, r2
 8009474:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800947c:	b29b      	uxth	r3, r3
 800947e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009482:	4581      	cmp	r9, r0
 8009484:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009488:	f84c 3b04 	str.w	r3, [ip], #4
 800948c:	d2db      	bcs.n	8009446 <quorem+0x42>
 800948e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009492:	b92b      	cbnz	r3, 80094a0 <quorem+0x9c>
 8009494:	9b01      	ldr	r3, [sp, #4]
 8009496:	3b04      	subs	r3, #4
 8009498:	429d      	cmp	r5, r3
 800949a:	461a      	mov	r2, r3
 800949c:	d32d      	bcc.n	80094fa <quorem+0xf6>
 800949e:	613c      	str	r4, [r7, #16]
 80094a0:	4638      	mov	r0, r7
 80094a2:	f001 f9dd 	bl	800a860 <__mcmp>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	db23      	blt.n	80094f2 <quorem+0xee>
 80094aa:	4629      	mov	r1, r5
 80094ac:	2000      	movs	r0, #0
 80094ae:	3601      	adds	r6, #1
 80094b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80094b4:	f8d1 c000 	ldr.w	ip, [r1]
 80094b8:	b293      	uxth	r3, r2
 80094ba:	1ac3      	subs	r3, r0, r3
 80094bc:	0c12      	lsrs	r2, r2, #16
 80094be:	fa1f f08c 	uxth.w	r0, ip
 80094c2:	4403      	add	r3, r0
 80094c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80094c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094d2:	45c1      	cmp	r9, r8
 80094d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094d8:	f841 3b04 	str.w	r3, [r1], #4
 80094dc:	d2e8      	bcs.n	80094b0 <quorem+0xac>
 80094de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094e6:	b922      	cbnz	r2, 80094f2 <quorem+0xee>
 80094e8:	3b04      	subs	r3, #4
 80094ea:	429d      	cmp	r5, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	d30a      	bcc.n	8009506 <quorem+0x102>
 80094f0:	613c      	str	r4, [r7, #16]
 80094f2:	4630      	mov	r0, r6
 80094f4:	b003      	add	sp, #12
 80094f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fa:	6812      	ldr	r2, [r2, #0]
 80094fc:	3b04      	subs	r3, #4
 80094fe:	2a00      	cmp	r2, #0
 8009500:	d1cd      	bne.n	800949e <quorem+0x9a>
 8009502:	3c01      	subs	r4, #1
 8009504:	e7c8      	b.n	8009498 <quorem+0x94>
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	3b04      	subs	r3, #4
 800950a:	2a00      	cmp	r2, #0
 800950c:	d1f0      	bne.n	80094f0 <quorem+0xec>
 800950e:	3c01      	subs	r4, #1
 8009510:	e7eb      	b.n	80094ea <quorem+0xe6>
 8009512:	2000      	movs	r0, #0
 8009514:	e7ee      	b.n	80094f4 <quorem+0xf0>
	...

08009518 <_dtoa_r>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	4616      	mov	r6, r2
 800951e:	461f      	mov	r7, r3
 8009520:	69c4      	ldr	r4, [r0, #28]
 8009522:	b099      	sub	sp, #100	; 0x64
 8009524:	4605      	mov	r5, r0
 8009526:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800952a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800952e:	b974      	cbnz	r4, 800954e <_dtoa_r+0x36>
 8009530:	2010      	movs	r0, #16
 8009532:	f000 fe1d 	bl	800a170 <malloc>
 8009536:	4602      	mov	r2, r0
 8009538:	61e8      	str	r0, [r5, #28]
 800953a:	b920      	cbnz	r0, 8009546 <_dtoa_r+0x2e>
 800953c:	21ef      	movs	r1, #239	; 0xef
 800953e:	4bac      	ldr	r3, [pc, #688]	; (80097f0 <_dtoa_r+0x2d8>)
 8009540:	48ac      	ldr	r0, [pc, #688]	; (80097f4 <_dtoa_r+0x2dc>)
 8009542:	f002 fe1f 	bl	800c184 <__assert_func>
 8009546:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800954a:	6004      	str	r4, [r0, #0]
 800954c:	60c4      	str	r4, [r0, #12]
 800954e:	69eb      	ldr	r3, [r5, #28]
 8009550:	6819      	ldr	r1, [r3, #0]
 8009552:	b151      	cbz	r1, 800956a <_dtoa_r+0x52>
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	2301      	movs	r3, #1
 8009558:	4093      	lsls	r3, r2
 800955a:	604a      	str	r2, [r1, #4]
 800955c:	608b      	str	r3, [r1, #8]
 800955e:	4628      	mov	r0, r5
 8009560:	f000 fefa 	bl	800a358 <_Bfree>
 8009564:	2200      	movs	r2, #0
 8009566:	69eb      	ldr	r3, [r5, #28]
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	1e3b      	subs	r3, r7, #0
 800956c:	bfaf      	iteee	ge
 800956e:	2300      	movge	r3, #0
 8009570:	2201      	movlt	r2, #1
 8009572:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009576:	9305      	strlt	r3, [sp, #20]
 8009578:	bfa8      	it	ge
 800957a:	f8c8 3000 	strge.w	r3, [r8]
 800957e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009582:	4b9d      	ldr	r3, [pc, #628]	; (80097f8 <_dtoa_r+0x2e0>)
 8009584:	bfb8      	it	lt
 8009586:	f8c8 2000 	strlt.w	r2, [r8]
 800958a:	ea33 0309 	bics.w	r3, r3, r9
 800958e:	d119      	bne.n	80095c4 <_dtoa_r+0xac>
 8009590:	f242 730f 	movw	r3, #9999	; 0x270f
 8009594:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800959c:	4333      	orrs	r3, r6
 800959e:	f000 8589 	beq.w	800a0b4 <_dtoa_r+0xb9c>
 80095a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095a4:	b953      	cbnz	r3, 80095bc <_dtoa_r+0xa4>
 80095a6:	4b95      	ldr	r3, [pc, #596]	; (80097fc <_dtoa_r+0x2e4>)
 80095a8:	e023      	b.n	80095f2 <_dtoa_r+0xda>
 80095aa:	4b95      	ldr	r3, [pc, #596]	; (8009800 <_dtoa_r+0x2e8>)
 80095ac:	9303      	str	r3, [sp, #12]
 80095ae:	3308      	adds	r3, #8
 80095b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	9803      	ldr	r0, [sp, #12]
 80095b6:	b019      	add	sp, #100	; 0x64
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	4b8f      	ldr	r3, [pc, #572]	; (80097fc <_dtoa_r+0x2e4>)
 80095be:	9303      	str	r3, [sp, #12]
 80095c0:	3303      	adds	r3, #3
 80095c2:	e7f5      	b.n	80095b0 <_dtoa_r+0x98>
 80095c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80095c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80095cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095d0:	2200      	movs	r2, #0
 80095d2:	2300      	movs	r3, #0
 80095d4:	f7f7 f9e8 	bl	80009a8 <__aeabi_dcmpeq>
 80095d8:	4680      	mov	r8, r0
 80095da:	b160      	cbz	r0, 80095f6 <_dtoa_r+0xde>
 80095dc:	2301      	movs	r3, #1
 80095de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 8562 	beq.w	800a0ae <_dtoa_r+0xb96>
 80095ea:	4b86      	ldr	r3, [pc, #536]	; (8009804 <_dtoa_r+0x2ec>)
 80095ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	e7de      	b.n	80095b4 <_dtoa_r+0x9c>
 80095f6:	ab16      	add	r3, sp, #88	; 0x58
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	ab17      	add	r3, sp, #92	; 0x5c
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	4628      	mov	r0, r5
 8009600:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009604:	f001 fa3c 	bl	800aa80 <__d2b>
 8009608:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800960c:	4682      	mov	sl, r0
 800960e:	2c00      	cmp	r4, #0
 8009610:	d07e      	beq.n	8009710 <_dtoa_r+0x1f8>
 8009612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009618:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800961c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009620:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009624:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009628:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800962c:	4619      	mov	r1, r3
 800962e:	2200      	movs	r2, #0
 8009630:	4b75      	ldr	r3, [pc, #468]	; (8009808 <_dtoa_r+0x2f0>)
 8009632:	f7f6 fd99 	bl	8000168 <__aeabi_dsub>
 8009636:	a368      	add	r3, pc, #416	; (adr r3, 80097d8 <_dtoa_r+0x2c0>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 ff4c 	bl	80004d8 <__aeabi_dmul>
 8009640:	a367      	add	r3, pc, #412	; (adr r3, 80097e0 <_dtoa_r+0x2c8>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 fd91 	bl	800016c <__adddf3>
 800964a:	4606      	mov	r6, r0
 800964c:	4620      	mov	r0, r4
 800964e:	460f      	mov	r7, r1
 8009650:	f7f6 fed8 	bl	8000404 <__aeabi_i2d>
 8009654:	a364      	add	r3, pc, #400	; (adr r3, 80097e8 <_dtoa_r+0x2d0>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 ff3d 	bl	80004d8 <__aeabi_dmul>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4630      	mov	r0, r6
 8009664:	4639      	mov	r1, r7
 8009666:	f7f6 fd81 	bl	800016c <__adddf3>
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	f7f7 f9e3 	bl	8000a38 <__aeabi_d2iz>
 8009672:	2200      	movs	r2, #0
 8009674:	4683      	mov	fp, r0
 8009676:	2300      	movs	r3, #0
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 f99e 	bl	80009bc <__aeabi_dcmplt>
 8009680:	b148      	cbz	r0, 8009696 <_dtoa_r+0x17e>
 8009682:	4658      	mov	r0, fp
 8009684:	f7f6 febe 	bl	8000404 <__aeabi_i2d>
 8009688:	4632      	mov	r2, r6
 800968a:	463b      	mov	r3, r7
 800968c:	f7f7 f98c 	bl	80009a8 <__aeabi_dcmpeq>
 8009690:	b908      	cbnz	r0, 8009696 <_dtoa_r+0x17e>
 8009692:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009696:	f1bb 0f16 	cmp.w	fp, #22
 800969a:	d857      	bhi.n	800974c <_dtoa_r+0x234>
 800969c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096a0:	4b5a      	ldr	r3, [pc, #360]	; (800980c <_dtoa_r+0x2f4>)
 80096a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	f7f7 f987 	bl	80009bc <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d04e      	beq.n	8009750 <_dtoa_r+0x238>
 80096b2:	2300      	movs	r3, #0
 80096b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80096ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80096bc:	1b1b      	subs	r3, r3, r4
 80096be:	1e5a      	subs	r2, r3, #1
 80096c0:	bf46      	itte	mi
 80096c2:	f1c3 0901 	rsbmi	r9, r3, #1
 80096c6:	2300      	movmi	r3, #0
 80096c8:	f04f 0900 	movpl.w	r9, #0
 80096cc:	9209      	str	r2, [sp, #36]	; 0x24
 80096ce:	bf48      	it	mi
 80096d0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80096d2:	f1bb 0f00 	cmp.w	fp, #0
 80096d6:	db3d      	blt.n	8009754 <_dtoa_r+0x23c>
 80096d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80096de:	445b      	add	r3, fp
 80096e0:	9309      	str	r3, [sp, #36]	; 0x24
 80096e2:	2300      	movs	r3, #0
 80096e4:	930a      	str	r3, [sp, #40]	; 0x28
 80096e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096e8:	2b09      	cmp	r3, #9
 80096ea:	d867      	bhi.n	80097bc <_dtoa_r+0x2a4>
 80096ec:	2b05      	cmp	r3, #5
 80096ee:	bfc4      	itt	gt
 80096f0:	3b04      	subgt	r3, #4
 80096f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80096f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096f6:	bfc8      	it	gt
 80096f8:	2400      	movgt	r4, #0
 80096fa:	f1a3 0302 	sub.w	r3, r3, #2
 80096fe:	bfd8      	it	le
 8009700:	2401      	movle	r4, #1
 8009702:	2b03      	cmp	r3, #3
 8009704:	f200 8086 	bhi.w	8009814 <_dtoa_r+0x2fc>
 8009708:	e8df f003 	tbb	[pc, r3]
 800970c:	5637392c 	.word	0x5637392c
 8009710:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009714:	441c      	add	r4, r3
 8009716:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800971a:	2b20      	cmp	r3, #32
 800971c:	bfc1      	itttt	gt
 800971e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009722:	fa09 f903 	lslgt.w	r9, r9, r3
 8009726:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800972a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800972e:	bfd6      	itet	le
 8009730:	f1c3 0320 	rsble	r3, r3, #32
 8009734:	ea49 0003 	orrgt.w	r0, r9, r3
 8009738:	fa06 f003 	lslle.w	r0, r6, r3
 800973c:	f7f6 fe52 	bl	80003e4 <__aeabi_ui2d>
 8009740:	2201      	movs	r2, #1
 8009742:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009746:	3c01      	subs	r4, #1
 8009748:	9213      	str	r2, [sp, #76]	; 0x4c
 800974a:	e76f      	b.n	800962c <_dtoa_r+0x114>
 800974c:	2301      	movs	r3, #1
 800974e:	e7b3      	b.n	80096b8 <_dtoa_r+0x1a0>
 8009750:	900f      	str	r0, [sp, #60]	; 0x3c
 8009752:	e7b2      	b.n	80096ba <_dtoa_r+0x1a2>
 8009754:	f1cb 0300 	rsb	r3, fp, #0
 8009758:	930a      	str	r3, [sp, #40]	; 0x28
 800975a:	2300      	movs	r3, #0
 800975c:	eba9 090b 	sub.w	r9, r9, fp
 8009760:	930e      	str	r3, [sp, #56]	; 0x38
 8009762:	e7c0      	b.n	80096e6 <_dtoa_r+0x1ce>
 8009764:	2300      	movs	r3, #0
 8009766:	930b      	str	r3, [sp, #44]	; 0x2c
 8009768:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800976a:	2b00      	cmp	r3, #0
 800976c:	dc55      	bgt.n	800981a <_dtoa_r+0x302>
 800976e:	2301      	movs	r3, #1
 8009770:	461a      	mov	r2, r3
 8009772:	9306      	str	r3, [sp, #24]
 8009774:	9308      	str	r3, [sp, #32]
 8009776:	9223      	str	r2, [sp, #140]	; 0x8c
 8009778:	e00b      	b.n	8009792 <_dtoa_r+0x27a>
 800977a:	2301      	movs	r3, #1
 800977c:	e7f3      	b.n	8009766 <_dtoa_r+0x24e>
 800977e:	2300      	movs	r3, #0
 8009780:	930b      	str	r3, [sp, #44]	; 0x2c
 8009782:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009784:	445b      	add	r3, fp
 8009786:	9306      	str	r3, [sp, #24]
 8009788:	3301      	adds	r3, #1
 800978a:	2b01      	cmp	r3, #1
 800978c:	9308      	str	r3, [sp, #32]
 800978e:	bfb8      	it	lt
 8009790:	2301      	movlt	r3, #1
 8009792:	2100      	movs	r1, #0
 8009794:	2204      	movs	r2, #4
 8009796:	69e8      	ldr	r0, [r5, #28]
 8009798:	f102 0614 	add.w	r6, r2, #20
 800979c:	429e      	cmp	r6, r3
 800979e:	d940      	bls.n	8009822 <_dtoa_r+0x30a>
 80097a0:	6041      	str	r1, [r0, #4]
 80097a2:	4628      	mov	r0, r5
 80097a4:	f000 fd98 	bl	800a2d8 <_Balloc>
 80097a8:	9003      	str	r0, [sp, #12]
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d13c      	bne.n	8009828 <_dtoa_r+0x310>
 80097ae:	4602      	mov	r2, r0
 80097b0:	f240 11af 	movw	r1, #431	; 0x1af
 80097b4:	4b16      	ldr	r3, [pc, #88]	; (8009810 <_dtoa_r+0x2f8>)
 80097b6:	e6c3      	b.n	8009540 <_dtoa_r+0x28>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e7e1      	b.n	8009780 <_dtoa_r+0x268>
 80097bc:	2401      	movs	r4, #1
 80097be:	2300      	movs	r3, #0
 80097c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80097c2:	9322      	str	r3, [sp, #136]	; 0x88
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295
 80097c8:	2200      	movs	r2, #0
 80097ca:	9306      	str	r3, [sp, #24]
 80097cc:	9308      	str	r3, [sp, #32]
 80097ce:	2312      	movs	r3, #18
 80097d0:	e7d1      	b.n	8009776 <_dtoa_r+0x25e>
 80097d2:	bf00      	nop
 80097d4:	f3af 8000 	nop.w
 80097d8:	636f4361 	.word	0x636f4361
 80097dc:	3fd287a7 	.word	0x3fd287a7
 80097e0:	8b60c8b3 	.word	0x8b60c8b3
 80097e4:	3fc68a28 	.word	0x3fc68a28
 80097e8:	509f79fb 	.word	0x509f79fb
 80097ec:	3fd34413 	.word	0x3fd34413
 80097f0:	0800cc70 	.word	0x0800cc70
 80097f4:	0800cc87 	.word	0x0800cc87
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	0800cc6c 	.word	0x0800cc6c
 8009800:	0800cc63 	.word	0x0800cc63
 8009804:	0800cc3b 	.word	0x0800cc3b
 8009808:	3ff80000 	.word	0x3ff80000
 800980c:	0800cd78 	.word	0x0800cd78
 8009810:	0800ccdf 	.word	0x0800ccdf
 8009814:	2301      	movs	r3, #1
 8009816:	930b      	str	r3, [sp, #44]	; 0x2c
 8009818:	e7d4      	b.n	80097c4 <_dtoa_r+0x2ac>
 800981a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800981c:	9306      	str	r3, [sp, #24]
 800981e:	9308      	str	r3, [sp, #32]
 8009820:	e7b7      	b.n	8009792 <_dtoa_r+0x27a>
 8009822:	3101      	adds	r1, #1
 8009824:	0052      	lsls	r2, r2, #1
 8009826:	e7b7      	b.n	8009798 <_dtoa_r+0x280>
 8009828:	69eb      	ldr	r3, [r5, #28]
 800982a:	9a03      	ldr	r2, [sp, #12]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	9b08      	ldr	r3, [sp, #32]
 8009830:	2b0e      	cmp	r3, #14
 8009832:	f200 80a8 	bhi.w	8009986 <_dtoa_r+0x46e>
 8009836:	2c00      	cmp	r4, #0
 8009838:	f000 80a5 	beq.w	8009986 <_dtoa_r+0x46e>
 800983c:	f1bb 0f00 	cmp.w	fp, #0
 8009840:	dd34      	ble.n	80098ac <_dtoa_r+0x394>
 8009842:	4b9a      	ldr	r3, [pc, #616]	; (8009aac <_dtoa_r+0x594>)
 8009844:	f00b 020f 	and.w	r2, fp, #15
 8009848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800984c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009850:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009854:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009858:	ea4f 142b 	mov.w	r4, fp, asr #4
 800985c:	d016      	beq.n	800988c <_dtoa_r+0x374>
 800985e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009862:	4b93      	ldr	r3, [pc, #588]	; (8009ab0 <_dtoa_r+0x598>)
 8009864:	2703      	movs	r7, #3
 8009866:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800986a:	f7f6 ff5f 	bl	800072c <__aeabi_ddiv>
 800986e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009872:	f004 040f 	and.w	r4, r4, #15
 8009876:	4e8e      	ldr	r6, [pc, #568]	; (8009ab0 <_dtoa_r+0x598>)
 8009878:	b954      	cbnz	r4, 8009890 <_dtoa_r+0x378>
 800987a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800987e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009882:	f7f6 ff53 	bl	800072c <__aeabi_ddiv>
 8009886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800988a:	e029      	b.n	80098e0 <_dtoa_r+0x3c8>
 800988c:	2702      	movs	r7, #2
 800988e:	e7f2      	b.n	8009876 <_dtoa_r+0x35e>
 8009890:	07e1      	lsls	r1, r4, #31
 8009892:	d508      	bpl.n	80098a6 <_dtoa_r+0x38e>
 8009894:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009898:	e9d6 2300 	ldrd	r2, r3, [r6]
 800989c:	f7f6 fe1c 	bl	80004d8 <__aeabi_dmul>
 80098a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098a4:	3701      	adds	r7, #1
 80098a6:	1064      	asrs	r4, r4, #1
 80098a8:	3608      	adds	r6, #8
 80098aa:	e7e5      	b.n	8009878 <_dtoa_r+0x360>
 80098ac:	f000 80a5 	beq.w	80099fa <_dtoa_r+0x4e2>
 80098b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098b4:	f1cb 0400 	rsb	r4, fp, #0
 80098b8:	4b7c      	ldr	r3, [pc, #496]	; (8009aac <_dtoa_r+0x594>)
 80098ba:	f004 020f 	and.w	r2, r4, #15
 80098be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	f7f6 fe07 	bl	80004d8 <__aeabi_dmul>
 80098ca:	2702      	movs	r7, #2
 80098cc:	2300      	movs	r3, #0
 80098ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098d2:	4e77      	ldr	r6, [pc, #476]	; (8009ab0 <_dtoa_r+0x598>)
 80098d4:	1124      	asrs	r4, r4, #4
 80098d6:	2c00      	cmp	r4, #0
 80098d8:	f040 8084 	bne.w	80099e4 <_dtoa_r+0x4cc>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1d2      	bne.n	8009886 <_dtoa_r+0x36e>
 80098e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80098e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8087 	beq.w	80099fe <_dtoa_r+0x4e6>
 80098f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098f4:	2200      	movs	r2, #0
 80098f6:	4b6f      	ldr	r3, [pc, #444]	; (8009ab4 <_dtoa_r+0x59c>)
 80098f8:	f7f7 f860 	bl	80009bc <__aeabi_dcmplt>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d07e      	beq.n	80099fe <_dtoa_r+0x4e6>
 8009900:	9b08      	ldr	r3, [sp, #32]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d07b      	beq.n	80099fe <_dtoa_r+0x4e6>
 8009906:	9b06      	ldr	r3, [sp, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	dd38      	ble.n	800997e <_dtoa_r+0x466>
 800990c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009910:	2200      	movs	r2, #0
 8009912:	4b69      	ldr	r3, [pc, #420]	; (8009ab8 <_dtoa_r+0x5a0>)
 8009914:	f7f6 fde0 	bl	80004d8 <__aeabi_dmul>
 8009918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800991c:	9c06      	ldr	r4, [sp, #24]
 800991e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009922:	3701      	adds	r7, #1
 8009924:	4638      	mov	r0, r7
 8009926:	f7f6 fd6d 	bl	8000404 <__aeabi_i2d>
 800992a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992e:	f7f6 fdd3 	bl	80004d8 <__aeabi_dmul>
 8009932:	2200      	movs	r2, #0
 8009934:	4b61      	ldr	r3, [pc, #388]	; (8009abc <_dtoa_r+0x5a4>)
 8009936:	f7f6 fc19 	bl	800016c <__adddf3>
 800993a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800993e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009942:	9611      	str	r6, [sp, #68]	; 0x44
 8009944:	2c00      	cmp	r4, #0
 8009946:	d15d      	bne.n	8009a04 <_dtoa_r+0x4ec>
 8009948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800994c:	2200      	movs	r2, #0
 800994e:	4b5c      	ldr	r3, [pc, #368]	; (8009ac0 <_dtoa_r+0x5a8>)
 8009950:	f7f6 fc0a 	bl	8000168 <__aeabi_dsub>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800995c:	4633      	mov	r3, r6
 800995e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009960:	f7f7 f84a 	bl	80009f8 <__aeabi_dcmpgt>
 8009964:	2800      	cmp	r0, #0
 8009966:	f040 8295 	bne.w	8009e94 <_dtoa_r+0x97c>
 800996a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800996e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009970:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009974:	f7f7 f822 	bl	80009bc <__aeabi_dcmplt>
 8009978:	2800      	cmp	r0, #0
 800997a:	f040 8289 	bne.w	8009e90 <_dtoa_r+0x978>
 800997e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009982:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009986:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009988:	2b00      	cmp	r3, #0
 800998a:	f2c0 8151 	blt.w	8009c30 <_dtoa_r+0x718>
 800998e:	f1bb 0f0e 	cmp.w	fp, #14
 8009992:	f300 814d 	bgt.w	8009c30 <_dtoa_r+0x718>
 8009996:	4b45      	ldr	r3, [pc, #276]	; (8009aac <_dtoa_r+0x594>)
 8009998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800999c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80099a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f280 80da 	bge.w	8009b60 <_dtoa_r+0x648>
 80099ac:	9b08      	ldr	r3, [sp, #32]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f300 80d6 	bgt.w	8009b60 <_dtoa_r+0x648>
 80099b4:	f040 826b 	bne.w	8009e8e <_dtoa_r+0x976>
 80099b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099bc:	2200      	movs	r2, #0
 80099be:	4b40      	ldr	r3, [pc, #256]	; (8009ac0 <_dtoa_r+0x5a8>)
 80099c0:	f7f6 fd8a 	bl	80004d8 <__aeabi_dmul>
 80099c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099c8:	f7f7 f80c 	bl	80009e4 <__aeabi_dcmpge>
 80099cc:	9c08      	ldr	r4, [sp, #32]
 80099ce:	4626      	mov	r6, r4
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f040 8241 	bne.w	8009e58 <_dtoa_r+0x940>
 80099d6:	2331      	movs	r3, #49	; 0x31
 80099d8:	9f03      	ldr	r7, [sp, #12]
 80099da:	f10b 0b01 	add.w	fp, fp, #1
 80099de:	f807 3b01 	strb.w	r3, [r7], #1
 80099e2:	e23d      	b.n	8009e60 <_dtoa_r+0x948>
 80099e4:	07e2      	lsls	r2, r4, #31
 80099e6:	d505      	bpl.n	80099f4 <_dtoa_r+0x4dc>
 80099e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099ec:	f7f6 fd74 	bl	80004d8 <__aeabi_dmul>
 80099f0:	2301      	movs	r3, #1
 80099f2:	3701      	adds	r7, #1
 80099f4:	1064      	asrs	r4, r4, #1
 80099f6:	3608      	adds	r6, #8
 80099f8:	e76d      	b.n	80098d6 <_dtoa_r+0x3be>
 80099fa:	2702      	movs	r7, #2
 80099fc:	e770      	b.n	80098e0 <_dtoa_r+0x3c8>
 80099fe:	46d8      	mov	r8, fp
 8009a00:	9c08      	ldr	r4, [sp, #32]
 8009a02:	e78f      	b.n	8009924 <_dtoa_r+0x40c>
 8009a04:	9903      	ldr	r1, [sp, #12]
 8009a06:	4b29      	ldr	r3, [pc, #164]	; (8009aac <_dtoa_r+0x594>)
 8009a08:	4421      	add	r1, r4
 8009a0a:	9112      	str	r1, [sp, #72]	; 0x48
 8009a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a12:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009a16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a1a:	2900      	cmp	r1, #0
 8009a1c:	d054      	beq.n	8009ac8 <_dtoa_r+0x5b0>
 8009a1e:	2000      	movs	r0, #0
 8009a20:	4928      	ldr	r1, [pc, #160]	; (8009ac4 <_dtoa_r+0x5ac>)
 8009a22:	f7f6 fe83 	bl	800072c <__aeabi_ddiv>
 8009a26:	463b      	mov	r3, r7
 8009a28:	4632      	mov	r2, r6
 8009a2a:	f7f6 fb9d 	bl	8000168 <__aeabi_dsub>
 8009a2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a32:	9f03      	ldr	r7, [sp, #12]
 8009a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a38:	f7f6 fffe 	bl	8000a38 <__aeabi_d2iz>
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	f7f6 fce1 	bl	8000404 <__aeabi_i2d>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a4a:	f7f6 fb8d 	bl	8000168 <__aeabi_dsub>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	3430      	adds	r4, #48	; 0x30
 8009a54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a5c:	f807 4b01 	strb.w	r4, [r7], #1
 8009a60:	f7f6 ffac 	bl	80009bc <__aeabi_dcmplt>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d173      	bne.n	8009b50 <_dtoa_r+0x638>
 8009a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	4911      	ldr	r1, [pc, #68]	; (8009ab4 <_dtoa_r+0x59c>)
 8009a70:	f7f6 fb7a 	bl	8000168 <__aeabi_dsub>
 8009a74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a78:	f7f6 ffa0 	bl	80009bc <__aeabi_dcmplt>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f040 80b6 	bne.w	8009bee <_dtoa_r+0x6d6>
 8009a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a84:	429f      	cmp	r7, r3
 8009a86:	f43f af7a 	beq.w	800997e <_dtoa_r+0x466>
 8009a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a8e:	2200      	movs	r2, #0
 8009a90:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <_dtoa_r+0x5a0>)
 8009a92:	f7f6 fd21 	bl	80004d8 <__aeabi_dmul>
 8009a96:	2200      	movs	r2, #0
 8009a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <_dtoa_r+0x5a0>)
 8009aa2:	f7f6 fd19 	bl	80004d8 <__aeabi_dmul>
 8009aa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aaa:	e7c3      	b.n	8009a34 <_dtoa_r+0x51c>
 8009aac:	0800cd78 	.word	0x0800cd78
 8009ab0:	0800cd50 	.word	0x0800cd50
 8009ab4:	3ff00000 	.word	0x3ff00000
 8009ab8:	40240000 	.word	0x40240000
 8009abc:	401c0000 	.word	0x401c0000
 8009ac0:	40140000 	.word	0x40140000
 8009ac4:	3fe00000 	.word	0x3fe00000
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fd04 	bl	80004d8 <__aeabi_dmul>
 8009ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ad6:	9c03      	ldr	r4, [sp, #12]
 8009ad8:	9314      	str	r3, [sp, #80]	; 0x50
 8009ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ade:	f7f6 ffab 	bl	8000a38 <__aeabi_d2iz>
 8009ae2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ae4:	f7f6 fc8e 	bl	8000404 <__aeabi_i2d>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009af0:	f7f6 fb3a 	bl	8000168 <__aeabi_dsub>
 8009af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af6:	4606      	mov	r6, r0
 8009af8:	3330      	adds	r3, #48	; 0x30
 8009afa:	f804 3b01 	strb.w	r3, [r4], #1
 8009afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b00:	460f      	mov	r7, r1
 8009b02:	429c      	cmp	r4, r3
 8009b04:	f04f 0200 	mov.w	r2, #0
 8009b08:	d124      	bne.n	8009b54 <_dtoa_r+0x63c>
 8009b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b0e:	4baf      	ldr	r3, [pc, #700]	; (8009dcc <_dtoa_r+0x8b4>)
 8009b10:	f7f6 fb2c 	bl	800016c <__adddf3>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4630      	mov	r0, r6
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f6 ff6c 	bl	80009f8 <__aeabi_dcmpgt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d163      	bne.n	8009bec <_dtoa_r+0x6d4>
 8009b24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b28:	2000      	movs	r0, #0
 8009b2a:	49a8      	ldr	r1, [pc, #672]	; (8009dcc <_dtoa_r+0x8b4>)
 8009b2c:	f7f6 fb1c 	bl	8000168 <__aeabi_dsub>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f6 ff40 	bl	80009bc <__aeabi_dcmplt>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f43f af1e 	beq.w	800997e <_dtoa_r+0x466>
 8009b42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009b44:	1e7b      	subs	r3, r7, #1
 8009b46:	9314      	str	r3, [sp, #80]	; 0x50
 8009b48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009b4c:	2b30      	cmp	r3, #48	; 0x30
 8009b4e:	d0f8      	beq.n	8009b42 <_dtoa_r+0x62a>
 8009b50:	46c3      	mov	fp, r8
 8009b52:	e03b      	b.n	8009bcc <_dtoa_r+0x6b4>
 8009b54:	4b9e      	ldr	r3, [pc, #632]	; (8009dd0 <_dtoa_r+0x8b8>)
 8009b56:	f7f6 fcbf 	bl	80004d8 <__aeabi_dmul>
 8009b5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b5e:	e7bc      	b.n	8009ada <_dtoa_r+0x5c2>
 8009b60:	9f03      	ldr	r7, [sp, #12]
 8009b62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	f7f6 fddd 	bl	800072c <__aeabi_ddiv>
 8009b72:	f7f6 ff61 	bl	8000a38 <__aeabi_d2iz>
 8009b76:	4604      	mov	r4, r0
 8009b78:	f7f6 fc44 	bl	8000404 <__aeabi_i2d>
 8009b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b80:	f7f6 fcaa 	bl	80004d8 <__aeabi_dmul>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 faec 	bl	8000168 <__aeabi_dsub>
 8009b90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009b94:	f807 6b01 	strb.w	r6, [r7], #1
 8009b98:	9e03      	ldr	r6, [sp, #12]
 8009b9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009b9e:	1bbe      	subs	r6, r7, r6
 8009ba0:	45b4      	cmp	ip, r6
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	d136      	bne.n	8009c16 <_dtoa_r+0x6fe>
 8009ba8:	f7f6 fae0 	bl	800016c <__adddf3>
 8009bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	4689      	mov	r9, r1
 8009bb4:	f7f6 ff20 	bl	80009f8 <__aeabi_dcmpgt>
 8009bb8:	bb58      	cbnz	r0, 8009c12 <_dtoa_r+0x6fa>
 8009bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	f7f6 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8009bc6:	b108      	cbz	r0, 8009bcc <_dtoa_r+0x6b4>
 8009bc8:	07e3      	lsls	r3, r4, #31
 8009bca:	d422      	bmi.n	8009c12 <_dtoa_r+0x6fa>
 8009bcc:	4651      	mov	r1, sl
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 fbc2 	bl	800a358 <_Bfree>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bd8:	703b      	strb	r3, [r7, #0]
 8009bda:	f10b 0301 	add.w	r3, fp, #1
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f43f ace6 	beq.w	80095b4 <_dtoa_r+0x9c>
 8009be8:	601f      	str	r7, [r3, #0]
 8009bea:	e4e3      	b.n	80095b4 <_dtoa_r+0x9c>
 8009bec:	4627      	mov	r7, r4
 8009bee:	463b      	mov	r3, r7
 8009bf0:	461f      	mov	r7, r3
 8009bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bf6:	2a39      	cmp	r2, #57	; 0x39
 8009bf8:	d107      	bne.n	8009c0a <_dtoa_r+0x6f2>
 8009bfa:	9a03      	ldr	r2, [sp, #12]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d1f7      	bne.n	8009bf0 <_dtoa_r+0x6d8>
 8009c00:	2230      	movs	r2, #48	; 0x30
 8009c02:	9903      	ldr	r1, [sp, #12]
 8009c04:	f108 0801 	add.w	r8, r8, #1
 8009c08:	700a      	strb	r2, [r1, #0]
 8009c0a:	781a      	ldrb	r2, [r3, #0]
 8009c0c:	3201      	adds	r2, #1
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	e79e      	b.n	8009b50 <_dtoa_r+0x638>
 8009c12:	46d8      	mov	r8, fp
 8009c14:	e7eb      	b.n	8009bee <_dtoa_r+0x6d6>
 8009c16:	2200      	movs	r2, #0
 8009c18:	4b6d      	ldr	r3, [pc, #436]	; (8009dd0 <_dtoa_r+0x8b8>)
 8009c1a:	f7f6 fc5d 	bl	80004d8 <__aeabi_dmul>
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2300      	movs	r3, #0
 8009c22:	4680      	mov	r8, r0
 8009c24:	4689      	mov	r9, r1
 8009c26:	f7f6 febf 	bl	80009a8 <__aeabi_dcmpeq>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d09b      	beq.n	8009b66 <_dtoa_r+0x64e>
 8009c2e:	e7cd      	b.n	8009bcc <_dtoa_r+0x6b4>
 8009c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	f000 80c4 	beq.w	8009dc0 <_dtoa_r+0x8a8>
 8009c38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c3a:	2a01      	cmp	r2, #1
 8009c3c:	f300 80a8 	bgt.w	8009d90 <_dtoa_r+0x878>
 8009c40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	f000 80a0 	beq.w	8009d88 <_dtoa_r+0x870>
 8009c48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c4c:	464f      	mov	r7, r9
 8009c4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c52:	2101      	movs	r1, #1
 8009c54:	441a      	add	r2, r3
 8009c56:	4628      	mov	r0, r5
 8009c58:	4499      	add	r9, r3
 8009c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c5c:	f000 fc7c 	bl	800a558 <__i2b>
 8009c60:	4606      	mov	r6, r0
 8009c62:	b15f      	cbz	r7, 8009c7c <_dtoa_r+0x764>
 8009c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dd08      	ble.n	8009c7c <_dtoa_r+0x764>
 8009c6a:	42bb      	cmp	r3, r7
 8009c6c:	bfa8      	it	ge
 8009c6e:	463b      	movge	r3, r7
 8009c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c72:	eba9 0903 	sub.w	r9, r9, r3
 8009c76:	1aff      	subs	r7, r7, r3
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7e:	b1f3      	cbz	r3, 8009cbe <_dtoa_r+0x7a6>
 8009c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 80a0 	beq.w	8009dc8 <_dtoa_r+0x8b0>
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	dd10      	ble.n	8009cae <_dtoa_r+0x796>
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4622      	mov	r2, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 fd1f 	bl	800a6d4 <__pow5mult>
 8009c96:	4652      	mov	r2, sl
 8009c98:	4601      	mov	r1, r0
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f000 fc71 	bl	800a584 <__multiply>
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	4651      	mov	r1, sl
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f000 fb56 	bl	800a358 <_Bfree>
 8009cac:	46c2      	mov	sl, r8
 8009cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb0:	1b1a      	subs	r2, r3, r4
 8009cb2:	d004      	beq.n	8009cbe <_dtoa_r+0x7a6>
 8009cb4:	4651      	mov	r1, sl
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 fd0c 	bl	800a6d4 <__pow5mult>
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f000 fc49 	bl	800a558 <__i2b>
 8009cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cc8:	4604      	mov	r4, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f340 8082 	ble.w	8009dd4 <_dtoa_r+0x8bc>
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f000 fcfd 	bl	800a6d4 <__pow5mult>
 8009cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cdc:	4604      	mov	r4, r0
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	dd7b      	ble.n	8009dda <_dtoa_r+0x8c2>
 8009ce2:	f04f 0800 	mov.w	r8, #0
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009cec:	6918      	ldr	r0, [r3, #16]
 8009cee:	f000 fbe5 	bl	800a4bc <__hi0bits>
 8009cf2:	f1c0 0020 	rsb	r0, r0, #32
 8009cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf8:	4418      	add	r0, r3
 8009cfa:	f010 001f 	ands.w	r0, r0, #31
 8009cfe:	f000 8092 	beq.w	8009e26 <_dtoa_r+0x90e>
 8009d02:	f1c0 0320 	rsb	r3, r0, #32
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	f340 8085 	ble.w	8009e16 <_dtoa_r+0x8fe>
 8009d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0e:	f1c0 001c 	rsb	r0, r0, #28
 8009d12:	4403      	add	r3, r0
 8009d14:	4481      	add	r9, r0
 8009d16:	4407      	add	r7, r0
 8009d18:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1a:	f1b9 0f00 	cmp.w	r9, #0
 8009d1e:	dd05      	ble.n	8009d2c <_dtoa_r+0x814>
 8009d20:	4651      	mov	r1, sl
 8009d22:	464a      	mov	r2, r9
 8009d24:	4628      	mov	r0, r5
 8009d26:	f000 fd2f 	bl	800a788 <__lshift>
 8009d2a:	4682      	mov	sl, r0
 8009d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dd05      	ble.n	8009d3e <_dtoa_r+0x826>
 8009d32:	4621      	mov	r1, r4
 8009d34:	461a      	mov	r2, r3
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 fd26 	bl	800a788 <__lshift>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d072      	beq.n	8009e2a <_dtoa_r+0x912>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4650      	mov	r0, sl
 8009d48:	f000 fd8a 	bl	800a860 <__mcmp>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	da6c      	bge.n	8009e2a <_dtoa_r+0x912>
 8009d50:	2300      	movs	r3, #0
 8009d52:	4651      	mov	r1, sl
 8009d54:	220a      	movs	r2, #10
 8009d56:	4628      	mov	r0, r5
 8009d58:	f000 fb20 	bl	800a39c <__multadd>
 8009d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d5e:	4682      	mov	sl, r0
 8009d60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 81ac 	beq.w	800a0c2 <_dtoa_r+0xbaa>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	220a      	movs	r2, #10
 8009d70:	4628      	mov	r0, r5
 8009d72:	f000 fb13 	bl	800a39c <__multadd>
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	4606      	mov	r6, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f300 8093 	bgt.w	8009ea6 <_dtoa_r+0x98e>
 8009d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	dc59      	bgt.n	8009e3a <_dtoa_r+0x922>
 8009d86:	e08e      	b.n	8009ea6 <_dtoa_r+0x98e>
 8009d88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d8e:	e75d      	b.n	8009c4c <_dtoa_r+0x734>
 8009d90:	9b08      	ldr	r3, [sp, #32]
 8009d92:	1e5c      	subs	r4, r3, #1
 8009d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d96:	42a3      	cmp	r3, r4
 8009d98:	bfbf      	itttt	lt
 8009d9a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d9c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009d9e:	1ae3      	sublt	r3, r4, r3
 8009da0:	18d2      	addlt	r2, r2, r3
 8009da2:	bfa8      	it	ge
 8009da4:	1b1c      	subge	r4, r3, r4
 8009da6:	9b08      	ldr	r3, [sp, #32]
 8009da8:	bfbe      	ittt	lt
 8009daa:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009dac:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009dae:	2400      	movlt	r4, #0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bfb5      	itete	lt
 8009db4:	eba9 0703 	sublt.w	r7, r9, r3
 8009db8:	464f      	movge	r7, r9
 8009dba:	2300      	movlt	r3, #0
 8009dbc:	9b08      	ldrge	r3, [sp, #32]
 8009dbe:	e747      	b.n	8009c50 <_dtoa_r+0x738>
 8009dc0:	464f      	mov	r7, r9
 8009dc2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009dc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009dc6:	e74c      	b.n	8009c62 <_dtoa_r+0x74a>
 8009dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dca:	e773      	b.n	8009cb4 <_dtoa_r+0x79c>
 8009dcc:	3fe00000 	.word	0x3fe00000
 8009dd0:	40240000 	.word	0x40240000
 8009dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	dc18      	bgt.n	8009e0c <_dtoa_r+0x8f4>
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	b9b3      	cbnz	r3, 8009e0c <_dtoa_r+0x8f4>
 8009dde:	9b05      	ldr	r3, [sp, #20]
 8009de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009de4:	b993      	cbnz	r3, 8009e0c <_dtoa_r+0x8f4>
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dec:	0d1b      	lsrs	r3, r3, #20
 8009dee:	051b      	lsls	r3, r3, #20
 8009df0:	b17b      	cbz	r3, 8009e12 <_dtoa_r+0x8fa>
 8009df2:	f04f 0801 	mov.w	r8, #1
 8009df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df8:	f109 0901 	add.w	r9, r9, #1
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f47f af6f 	bne.w	8009ce6 <_dtoa_r+0x7ce>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	e774      	b.n	8009cf6 <_dtoa_r+0x7de>
 8009e0c:	f04f 0800 	mov.w	r8, #0
 8009e10:	e7f6      	b.n	8009e00 <_dtoa_r+0x8e8>
 8009e12:	4698      	mov	r8, r3
 8009e14:	e7f4      	b.n	8009e00 <_dtoa_r+0x8e8>
 8009e16:	d080      	beq.n	8009d1a <_dtoa_r+0x802>
 8009e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e1a:	331c      	adds	r3, #28
 8009e1c:	441a      	add	r2, r3
 8009e1e:	4499      	add	r9, r3
 8009e20:	441f      	add	r7, r3
 8009e22:	9209      	str	r2, [sp, #36]	; 0x24
 8009e24:	e779      	b.n	8009d1a <_dtoa_r+0x802>
 8009e26:	4603      	mov	r3, r0
 8009e28:	e7f6      	b.n	8009e18 <_dtoa_r+0x900>
 8009e2a:	9b08      	ldr	r3, [sp, #32]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dc34      	bgt.n	8009e9a <_dtoa_r+0x982>
 8009e30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	dd31      	ble.n	8009e9a <_dtoa_r+0x982>
 8009e36:	9b08      	ldr	r3, [sp, #32]
 8009e38:	9306      	str	r3, [sp, #24]
 8009e3a:	9b06      	ldr	r3, [sp, #24]
 8009e3c:	b963      	cbnz	r3, 8009e58 <_dtoa_r+0x940>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	2205      	movs	r2, #5
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 faaa 	bl	800a39c <__multadd>
 8009e48:	4601      	mov	r1, r0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	f000 fd07 	bl	800a860 <__mcmp>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	f73f adbf 	bgt.w	80099d6 <_dtoa_r+0x4be>
 8009e58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e5a:	9f03      	ldr	r7, [sp, #12]
 8009e5c:	ea6f 0b03 	mvn.w	fp, r3
 8009e60:	f04f 0800 	mov.w	r8, #0
 8009e64:	4621      	mov	r1, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 fa76 	bl	800a358 <_Bfree>
 8009e6c:	2e00      	cmp	r6, #0
 8009e6e:	f43f aead 	beq.w	8009bcc <_dtoa_r+0x6b4>
 8009e72:	f1b8 0f00 	cmp.w	r8, #0
 8009e76:	d005      	beq.n	8009e84 <_dtoa_r+0x96c>
 8009e78:	45b0      	cmp	r8, r6
 8009e7a:	d003      	beq.n	8009e84 <_dtoa_r+0x96c>
 8009e7c:	4641      	mov	r1, r8
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f000 fa6a 	bl	800a358 <_Bfree>
 8009e84:	4631      	mov	r1, r6
 8009e86:	4628      	mov	r0, r5
 8009e88:	f000 fa66 	bl	800a358 <_Bfree>
 8009e8c:	e69e      	b.n	8009bcc <_dtoa_r+0x6b4>
 8009e8e:	2400      	movs	r4, #0
 8009e90:	4626      	mov	r6, r4
 8009e92:	e7e1      	b.n	8009e58 <_dtoa_r+0x940>
 8009e94:	46c3      	mov	fp, r8
 8009e96:	4626      	mov	r6, r4
 8009e98:	e59d      	b.n	80099d6 <_dtoa_r+0x4be>
 8009e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80c8 	beq.w	800a032 <_dtoa_r+0xb1a>
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	9306      	str	r3, [sp, #24]
 8009ea6:	2f00      	cmp	r7, #0
 8009ea8:	dd05      	ble.n	8009eb6 <_dtoa_r+0x99e>
 8009eaa:	4631      	mov	r1, r6
 8009eac:	463a      	mov	r2, r7
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f000 fc6a 	bl	800a788 <__lshift>
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	f1b8 0f00 	cmp.w	r8, #0
 8009eba:	d05b      	beq.n	8009f74 <_dtoa_r+0xa5c>
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	6871      	ldr	r1, [r6, #4]
 8009ec0:	f000 fa0a 	bl	800a2d8 <_Balloc>
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	b928      	cbnz	r0, 8009ed4 <_dtoa_r+0x9bc>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009ece:	4b81      	ldr	r3, [pc, #516]	; (800a0d4 <_dtoa_r+0xbbc>)
 8009ed0:	f7ff bb36 	b.w	8009540 <_dtoa_r+0x28>
 8009ed4:	6932      	ldr	r2, [r6, #16]
 8009ed6:	f106 010c 	add.w	r1, r6, #12
 8009eda:	3202      	adds	r2, #2
 8009edc:	0092      	lsls	r2, r2, #2
 8009ede:	300c      	adds	r0, #12
 8009ee0:	f7ff fa7d 	bl	80093de <memcpy>
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f000 fc4d 	bl	800a788 <__lshift>
 8009eee:	46b0      	mov	r8, r6
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	9a03      	ldr	r2, [sp, #12]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	9308      	str	r3, [sp, #32]
 8009efa:	9b06      	ldr	r3, [sp, #24]
 8009efc:	4413      	add	r3, r2
 8009efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f00:	9b04      	ldr	r3, [sp, #16]
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	930a      	str	r3, [sp, #40]	; 0x28
 8009f08:	9b08      	ldr	r3, [sp, #32]
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	4650      	mov	r0, sl
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	f7ff fa77 	bl	8009404 <quorem>
 8009f16:	4641      	mov	r1, r8
 8009f18:	9006      	str	r0, [sp, #24]
 8009f1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f1e:	4650      	mov	r0, sl
 8009f20:	f000 fc9e 	bl	800a860 <__mcmp>
 8009f24:	4632      	mov	r2, r6
 8009f26:	9009      	str	r0, [sp, #36]	; 0x24
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 fcb4 	bl	800a898 <__mdiff>
 8009f30:	68c2      	ldr	r2, [r0, #12]
 8009f32:	4607      	mov	r7, r0
 8009f34:	bb02      	cbnz	r2, 8009f78 <_dtoa_r+0xa60>
 8009f36:	4601      	mov	r1, r0
 8009f38:	4650      	mov	r0, sl
 8009f3a:	f000 fc91 	bl	800a860 <__mcmp>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	4639      	mov	r1, r7
 8009f42:	4628      	mov	r0, r5
 8009f44:	920c      	str	r2, [sp, #48]	; 0x30
 8009f46:	f000 fa07 	bl	800a358 <_Bfree>
 8009f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f4e:	9f08      	ldr	r7, [sp, #32]
 8009f50:	ea43 0102 	orr.w	r1, r3, r2
 8009f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f56:	4319      	orrs	r1, r3
 8009f58:	d110      	bne.n	8009f7c <_dtoa_r+0xa64>
 8009f5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f5e:	d029      	beq.n	8009fb4 <_dtoa_r+0xa9c>
 8009f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	dd02      	ble.n	8009f6c <_dtoa_r+0xa54>
 8009f66:	9b06      	ldr	r3, [sp, #24]
 8009f68:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	f883 9000 	strb.w	r9, [r3]
 8009f72:	e777      	b.n	8009e64 <_dtoa_r+0x94c>
 8009f74:	4630      	mov	r0, r6
 8009f76:	e7ba      	b.n	8009eee <_dtoa_r+0x9d6>
 8009f78:	2201      	movs	r2, #1
 8009f7a:	e7e1      	b.n	8009f40 <_dtoa_r+0xa28>
 8009f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	db04      	blt.n	8009f8c <_dtoa_r+0xa74>
 8009f82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009f84:	430b      	orrs	r3, r1
 8009f86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	d120      	bne.n	8009fce <_dtoa_r+0xab6>
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	dded      	ble.n	8009f6c <_dtoa_r+0xa54>
 8009f90:	4651      	mov	r1, sl
 8009f92:	2201      	movs	r2, #1
 8009f94:	4628      	mov	r0, r5
 8009f96:	f000 fbf7 	bl	800a788 <__lshift>
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	f000 fc5f 	bl	800a860 <__mcmp>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	dc03      	bgt.n	8009fae <_dtoa_r+0xa96>
 8009fa6:	d1e1      	bne.n	8009f6c <_dtoa_r+0xa54>
 8009fa8:	f019 0f01 	tst.w	r9, #1
 8009fac:	d0de      	beq.n	8009f6c <_dtoa_r+0xa54>
 8009fae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fb2:	d1d8      	bne.n	8009f66 <_dtoa_r+0xa4e>
 8009fb4:	2339      	movs	r3, #57	; 0x39
 8009fb6:	9a04      	ldr	r2, [sp, #16]
 8009fb8:	7013      	strb	r3, [r2, #0]
 8009fba:	463b      	mov	r3, r7
 8009fbc:	461f      	mov	r7, r3
 8009fbe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	2a39      	cmp	r2, #57	; 0x39
 8009fc6:	d06b      	beq.n	800a0a0 <_dtoa_r+0xb88>
 8009fc8:	3201      	adds	r2, #1
 8009fca:	701a      	strb	r2, [r3, #0]
 8009fcc:	e74a      	b.n	8009e64 <_dtoa_r+0x94c>
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	dd07      	ble.n	8009fe2 <_dtoa_r+0xaca>
 8009fd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fd6:	d0ed      	beq.n	8009fb4 <_dtoa_r+0xa9c>
 8009fd8:	9a04      	ldr	r2, [sp, #16]
 8009fda:	f109 0301 	add.w	r3, r9, #1
 8009fde:	7013      	strb	r3, [r2, #0]
 8009fe0:	e740      	b.n	8009e64 <_dtoa_r+0x94c>
 8009fe2:	9b08      	ldr	r3, [sp, #32]
 8009fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fe6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d042      	beq.n	800a074 <_dtoa_r+0xb5c>
 8009fee:	4651      	mov	r1, sl
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	220a      	movs	r2, #10
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f000 f9d1 	bl	800a39c <__multadd>
 8009ffa:	45b0      	cmp	r8, r6
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	f04f 0300 	mov.w	r3, #0
 800a002:	f04f 020a 	mov.w	r2, #10
 800a006:	4641      	mov	r1, r8
 800a008:	4628      	mov	r0, r5
 800a00a:	d107      	bne.n	800a01c <_dtoa_r+0xb04>
 800a00c:	f000 f9c6 	bl	800a39c <__multadd>
 800a010:	4680      	mov	r8, r0
 800a012:	4606      	mov	r6, r0
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	3301      	adds	r3, #1
 800a018:	9308      	str	r3, [sp, #32]
 800a01a:	e775      	b.n	8009f08 <_dtoa_r+0x9f0>
 800a01c:	f000 f9be 	bl	800a39c <__multadd>
 800a020:	4631      	mov	r1, r6
 800a022:	4680      	mov	r8, r0
 800a024:	2300      	movs	r3, #0
 800a026:	220a      	movs	r2, #10
 800a028:	4628      	mov	r0, r5
 800a02a:	f000 f9b7 	bl	800a39c <__multadd>
 800a02e:	4606      	mov	r6, r0
 800a030:	e7f0      	b.n	800a014 <_dtoa_r+0xafc>
 800a032:	9b08      	ldr	r3, [sp, #32]
 800a034:	9306      	str	r3, [sp, #24]
 800a036:	9f03      	ldr	r7, [sp, #12]
 800a038:	4621      	mov	r1, r4
 800a03a:	4650      	mov	r0, sl
 800a03c:	f7ff f9e2 	bl	8009404 <quorem>
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a046:	f807 9b01 	strb.w	r9, [r7], #1
 800a04a:	1afa      	subs	r2, r7, r3
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	4293      	cmp	r3, r2
 800a050:	dd07      	ble.n	800a062 <_dtoa_r+0xb4a>
 800a052:	4651      	mov	r1, sl
 800a054:	2300      	movs	r3, #0
 800a056:	220a      	movs	r2, #10
 800a058:	4628      	mov	r0, r5
 800a05a:	f000 f99f 	bl	800a39c <__multadd>
 800a05e:	4682      	mov	sl, r0
 800a060:	e7ea      	b.n	800a038 <_dtoa_r+0xb20>
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	f04f 0800 	mov.w	r8, #0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfcc      	ite	gt
 800a06c:	461f      	movgt	r7, r3
 800a06e:	2701      	movle	r7, #1
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	441f      	add	r7, r3
 800a074:	4651      	mov	r1, sl
 800a076:	2201      	movs	r2, #1
 800a078:	4628      	mov	r0, r5
 800a07a:	f000 fb85 	bl	800a788 <__lshift>
 800a07e:	4621      	mov	r1, r4
 800a080:	4682      	mov	sl, r0
 800a082:	f000 fbed 	bl	800a860 <__mcmp>
 800a086:	2800      	cmp	r0, #0
 800a088:	dc97      	bgt.n	8009fba <_dtoa_r+0xaa2>
 800a08a:	d102      	bne.n	800a092 <_dtoa_r+0xb7a>
 800a08c:	f019 0f01 	tst.w	r9, #1
 800a090:	d193      	bne.n	8009fba <_dtoa_r+0xaa2>
 800a092:	463b      	mov	r3, r7
 800a094:	461f      	mov	r7, r3
 800a096:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a09a:	2a30      	cmp	r2, #48	; 0x30
 800a09c:	d0fa      	beq.n	800a094 <_dtoa_r+0xb7c>
 800a09e:	e6e1      	b.n	8009e64 <_dtoa_r+0x94c>
 800a0a0:	9a03      	ldr	r2, [sp, #12]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d18a      	bne.n	8009fbc <_dtoa_r+0xaa4>
 800a0a6:	2331      	movs	r3, #49	; 0x31
 800a0a8:	f10b 0b01 	add.w	fp, fp, #1
 800a0ac:	e797      	b.n	8009fde <_dtoa_r+0xac6>
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <_dtoa_r+0xbc0>)
 800a0b0:	f7ff ba9f 	b.w	80095f2 <_dtoa_r+0xda>
 800a0b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f47f aa77 	bne.w	80095aa <_dtoa_r+0x92>
 800a0bc:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <_dtoa_r+0xbc4>)
 800a0be:	f7ff ba98 	b.w	80095f2 <_dtoa_r+0xda>
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dcb6      	bgt.n	800a036 <_dtoa_r+0xb1e>
 800a0c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	f73f aeb5 	bgt.w	8009e3a <_dtoa_r+0x922>
 800a0d0:	e7b1      	b.n	800a036 <_dtoa_r+0xb1e>
 800a0d2:	bf00      	nop
 800a0d4:	0800ccdf 	.word	0x0800ccdf
 800a0d8:	0800cc3a 	.word	0x0800cc3a
 800a0dc:	0800cc63 	.word	0x0800cc63

0800a0e0 <_free_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	d040      	beq.n	800a16a <_free_r+0x8a>
 800a0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ec:	1f0c      	subs	r4, r1, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bfb8      	it	lt
 800a0f2:	18e4      	addlt	r4, r4, r3
 800a0f4:	f000 f8e4 	bl	800a2c0 <__malloc_lock>
 800a0f8:	4a1c      	ldr	r2, [pc, #112]	; (800a16c <_free_r+0x8c>)
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	b933      	cbnz	r3, 800a10c <_free_r+0x2c>
 800a0fe:	6063      	str	r3, [r4, #4]
 800a100:	6014      	str	r4, [r2, #0]
 800a102:	4628      	mov	r0, r5
 800a104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a108:	f000 b8e0 	b.w	800a2cc <__malloc_unlock>
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	d908      	bls.n	800a122 <_free_r+0x42>
 800a110:	6820      	ldr	r0, [r4, #0]
 800a112:	1821      	adds	r1, r4, r0
 800a114:	428b      	cmp	r3, r1
 800a116:	bf01      	itttt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	1809      	addeq	r1, r1, r0
 800a11e:	6021      	streq	r1, [r4, #0]
 800a120:	e7ed      	b.n	800a0fe <_free_r+0x1e>
 800a122:	461a      	mov	r2, r3
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	b10b      	cbz	r3, 800a12c <_free_r+0x4c>
 800a128:	42a3      	cmp	r3, r4
 800a12a:	d9fa      	bls.n	800a122 <_free_r+0x42>
 800a12c:	6811      	ldr	r1, [r2, #0]
 800a12e:	1850      	adds	r0, r2, r1
 800a130:	42a0      	cmp	r0, r4
 800a132:	d10b      	bne.n	800a14c <_free_r+0x6c>
 800a134:	6820      	ldr	r0, [r4, #0]
 800a136:	4401      	add	r1, r0
 800a138:	1850      	adds	r0, r2, r1
 800a13a:	4283      	cmp	r3, r0
 800a13c:	6011      	str	r1, [r2, #0]
 800a13e:	d1e0      	bne.n	800a102 <_free_r+0x22>
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	4408      	add	r0, r1
 800a146:	6010      	str	r0, [r2, #0]
 800a148:	6053      	str	r3, [r2, #4]
 800a14a:	e7da      	b.n	800a102 <_free_r+0x22>
 800a14c:	d902      	bls.n	800a154 <_free_r+0x74>
 800a14e:	230c      	movs	r3, #12
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	e7d6      	b.n	800a102 <_free_r+0x22>
 800a154:	6820      	ldr	r0, [r4, #0]
 800a156:	1821      	adds	r1, r4, r0
 800a158:	428b      	cmp	r3, r1
 800a15a:	bf01      	itttt	eq
 800a15c:	6819      	ldreq	r1, [r3, #0]
 800a15e:	685b      	ldreq	r3, [r3, #4]
 800a160:	1809      	addeq	r1, r1, r0
 800a162:	6021      	streq	r1, [r4, #0]
 800a164:	6063      	str	r3, [r4, #4]
 800a166:	6054      	str	r4, [r2, #4]
 800a168:	e7cb      	b.n	800a102 <_free_r+0x22>
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20001fe4 	.word	0x20001fe4

0800a170 <malloc>:
 800a170:	4b02      	ldr	r3, [pc, #8]	; (800a17c <malloc+0xc>)
 800a172:	4601      	mov	r1, r0
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	f000 b823 	b.w	800a1c0 <_malloc_r>
 800a17a:	bf00      	nop
 800a17c:	20000068 	.word	0x20000068

0800a180 <sbrk_aligned>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	4e0e      	ldr	r6, [pc, #56]	; (800a1bc <sbrk_aligned+0x3c>)
 800a184:	460c      	mov	r4, r1
 800a186:	6831      	ldr	r1, [r6, #0]
 800a188:	4605      	mov	r5, r0
 800a18a:	b911      	cbnz	r1, 800a192 <sbrk_aligned+0x12>
 800a18c:	f001 ffe4 	bl	800c158 <_sbrk_r>
 800a190:	6030      	str	r0, [r6, #0]
 800a192:	4621      	mov	r1, r4
 800a194:	4628      	mov	r0, r5
 800a196:	f001 ffdf 	bl	800c158 <_sbrk_r>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	d00a      	beq.n	800a1b4 <sbrk_aligned+0x34>
 800a19e:	1cc4      	adds	r4, r0, #3
 800a1a0:	f024 0403 	bic.w	r4, r4, #3
 800a1a4:	42a0      	cmp	r0, r4
 800a1a6:	d007      	beq.n	800a1b8 <sbrk_aligned+0x38>
 800a1a8:	1a21      	subs	r1, r4, r0
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f001 ffd4 	bl	800c158 <_sbrk_r>
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d101      	bne.n	800a1b8 <sbrk_aligned+0x38>
 800a1b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	20001fe8 	.word	0x20001fe8

0800a1c0 <_malloc_r>:
 800a1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c4:	1ccd      	adds	r5, r1, #3
 800a1c6:	f025 0503 	bic.w	r5, r5, #3
 800a1ca:	3508      	adds	r5, #8
 800a1cc:	2d0c      	cmp	r5, #12
 800a1ce:	bf38      	it	cc
 800a1d0:	250c      	movcc	r5, #12
 800a1d2:	2d00      	cmp	r5, #0
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	db01      	blt.n	800a1dc <_malloc_r+0x1c>
 800a1d8:	42a9      	cmp	r1, r5
 800a1da:	d905      	bls.n	800a1e8 <_malloc_r+0x28>
 800a1dc:	230c      	movs	r3, #12
 800a1de:	2600      	movs	r6, #0
 800a1e0:	603b      	str	r3, [r7, #0]
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2bc <_malloc_r+0xfc>
 800a1ec:	f000 f868 	bl	800a2c0 <__malloc_lock>
 800a1f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1f4:	461c      	mov	r4, r3
 800a1f6:	bb5c      	cbnz	r4, 800a250 <_malloc_r+0x90>
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	f7ff ffc0 	bl	800a180 <sbrk_aligned>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	4604      	mov	r4, r0
 800a204:	d155      	bne.n	800a2b2 <_malloc_r+0xf2>
 800a206:	f8d8 4000 	ldr.w	r4, [r8]
 800a20a:	4626      	mov	r6, r4
 800a20c:	2e00      	cmp	r6, #0
 800a20e:	d145      	bne.n	800a29c <_malloc_r+0xdc>
 800a210:	2c00      	cmp	r4, #0
 800a212:	d048      	beq.n	800a2a6 <_malloc_r+0xe6>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	4631      	mov	r1, r6
 800a218:	4638      	mov	r0, r7
 800a21a:	eb04 0903 	add.w	r9, r4, r3
 800a21e:	f001 ff9b 	bl	800c158 <_sbrk_r>
 800a222:	4581      	cmp	r9, r0
 800a224:	d13f      	bne.n	800a2a6 <_malloc_r+0xe6>
 800a226:	6821      	ldr	r1, [r4, #0]
 800a228:	4638      	mov	r0, r7
 800a22a:	1a6d      	subs	r5, r5, r1
 800a22c:	4629      	mov	r1, r5
 800a22e:	f7ff ffa7 	bl	800a180 <sbrk_aligned>
 800a232:	3001      	adds	r0, #1
 800a234:	d037      	beq.n	800a2a6 <_malloc_r+0xe6>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	442b      	add	r3, r5
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	f8d8 3000 	ldr.w	r3, [r8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d038      	beq.n	800a2b6 <_malloc_r+0xf6>
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	42a2      	cmp	r2, r4
 800a248:	d12b      	bne.n	800a2a2 <_malloc_r+0xe2>
 800a24a:	2200      	movs	r2, #0
 800a24c:	605a      	str	r2, [r3, #4]
 800a24e:	e00f      	b.n	800a270 <_malloc_r+0xb0>
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	1b52      	subs	r2, r2, r5
 800a254:	d41f      	bmi.n	800a296 <_malloc_r+0xd6>
 800a256:	2a0b      	cmp	r2, #11
 800a258:	d917      	bls.n	800a28a <_malloc_r+0xca>
 800a25a:	1961      	adds	r1, r4, r5
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	6025      	str	r5, [r4, #0]
 800a260:	bf18      	it	ne
 800a262:	6059      	strne	r1, [r3, #4]
 800a264:	6863      	ldr	r3, [r4, #4]
 800a266:	bf08      	it	eq
 800a268:	f8c8 1000 	streq.w	r1, [r8]
 800a26c:	5162      	str	r2, [r4, r5]
 800a26e:	604b      	str	r3, [r1, #4]
 800a270:	4638      	mov	r0, r7
 800a272:	f104 060b 	add.w	r6, r4, #11
 800a276:	f000 f829 	bl	800a2cc <__malloc_unlock>
 800a27a:	f026 0607 	bic.w	r6, r6, #7
 800a27e:	1d23      	adds	r3, r4, #4
 800a280:	1af2      	subs	r2, r6, r3
 800a282:	d0ae      	beq.n	800a1e2 <_malloc_r+0x22>
 800a284:	1b9b      	subs	r3, r3, r6
 800a286:	50a3      	str	r3, [r4, r2]
 800a288:	e7ab      	b.n	800a1e2 <_malloc_r+0x22>
 800a28a:	42a3      	cmp	r3, r4
 800a28c:	6862      	ldr	r2, [r4, #4]
 800a28e:	d1dd      	bne.n	800a24c <_malloc_r+0x8c>
 800a290:	f8c8 2000 	str.w	r2, [r8]
 800a294:	e7ec      	b.n	800a270 <_malloc_r+0xb0>
 800a296:	4623      	mov	r3, r4
 800a298:	6864      	ldr	r4, [r4, #4]
 800a29a:	e7ac      	b.n	800a1f6 <_malloc_r+0x36>
 800a29c:	4634      	mov	r4, r6
 800a29e:	6876      	ldr	r6, [r6, #4]
 800a2a0:	e7b4      	b.n	800a20c <_malloc_r+0x4c>
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	e7cc      	b.n	800a240 <_malloc_r+0x80>
 800a2a6:	230c      	movs	r3, #12
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	f000 f80e 	bl	800a2cc <__malloc_unlock>
 800a2b0:	e797      	b.n	800a1e2 <_malloc_r+0x22>
 800a2b2:	6025      	str	r5, [r4, #0]
 800a2b4:	e7dc      	b.n	800a270 <_malloc_r+0xb0>
 800a2b6:	605b      	str	r3, [r3, #4]
 800a2b8:	deff      	udf	#255	; 0xff
 800a2ba:	bf00      	nop
 800a2bc:	20001fe4 	.word	0x20001fe4

0800a2c0 <__malloc_lock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_lock+0x8>)
 800a2c2:	f7ff b87c 	b.w	80093be <__retarget_lock_acquire_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	20001fe0 	.word	0x20001fe0

0800a2cc <__malloc_unlock>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	; (800a2d4 <__malloc_unlock+0x8>)
 800a2ce:	f7ff b877 	b.w	80093c0 <__retarget_lock_release_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	20001fe0 	.word	0x20001fe0

0800a2d8 <_Balloc>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	69c6      	ldr	r6, [r0, #28]
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	b976      	cbnz	r6, 800a300 <_Balloc+0x28>
 800a2e2:	2010      	movs	r0, #16
 800a2e4:	f7ff ff44 	bl	800a170 <malloc>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	61e0      	str	r0, [r4, #28]
 800a2ec:	b920      	cbnz	r0, 800a2f8 <_Balloc+0x20>
 800a2ee:	216b      	movs	r1, #107	; 0x6b
 800a2f0:	4b17      	ldr	r3, [pc, #92]	; (800a350 <_Balloc+0x78>)
 800a2f2:	4818      	ldr	r0, [pc, #96]	; (800a354 <_Balloc+0x7c>)
 800a2f4:	f001 ff46 	bl	800c184 <__assert_func>
 800a2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2fc:	6006      	str	r6, [r0, #0]
 800a2fe:	60c6      	str	r6, [r0, #12]
 800a300:	69e6      	ldr	r6, [r4, #28]
 800a302:	68f3      	ldr	r3, [r6, #12]
 800a304:	b183      	cbz	r3, 800a328 <_Balloc+0x50>
 800a306:	69e3      	ldr	r3, [r4, #28]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a30e:	b9b8      	cbnz	r0, 800a340 <_Balloc+0x68>
 800a310:	2101      	movs	r1, #1
 800a312:	fa01 f605 	lsl.w	r6, r1, r5
 800a316:	1d72      	adds	r2, r6, #5
 800a318:	4620      	mov	r0, r4
 800a31a:	0092      	lsls	r2, r2, #2
 800a31c:	f001 ff50 	bl	800c1c0 <_calloc_r>
 800a320:	b160      	cbz	r0, 800a33c <_Balloc+0x64>
 800a322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a326:	e00e      	b.n	800a346 <_Balloc+0x6e>
 800a328:	2221      	movs	r2, #33	; 0x21
 800a32a:	2104      	movs	r1, #4
 800a32c:	4620      	mov	r0, r4
 800a32e:	f001 ff47 	bl	800c1c0 <_calloc_r>
 800a332:	69e3      	ldr	r3, [r4, #28]
 800a334:	60f0      	str	r0, [r6, #12]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e4      	bne.n	800a306 <_Balloc+0x2e>
 800a33c:	2000      	movs	r0, #0
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	6802      	ldr	r2, [r0, #0]
 800a342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a346:	2300      	movs	r3, #0
 800a348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a34c:	e7f7      	b.n	800a33e <_Balloc+0x66>
 800a34e:	bf00      	nop
 800a350:	0800cc70 	.word	0x0800cc70
 800a354:	0800ccf0 	.word	0x0800ccf0

0800a358 <_Bfree>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	69c6      	ldr	r6, [r0, #28]
 800a35c:	4605      	mov	r5, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	b976      	cbnz	r6, 800a380 <_Bfree+0x28>
 800a362:	2010      	movs	r0, #16
 800a364:	f7ff ff04 	bl	800a170 <malloc>
 800a368:	4602      	mov	r2, r0
 800a36a:	61e8      	str	r0, [r5, #28]
 800a36c:	b920      	cbnz	r0, 800a378 <_Bfree+0x20>
 800a36e:	218f      	movs	r1, #143	; 0x8f
 800a370:	4b08      	ldr	r3, [pc, #32]	; (800a394 <_Bfree+0x3c>)
 800a372:	4809      	ldr	r0, [pc, #36]	; (800a398 <_Bfree+0x40>)
 800a374:	f001 ff06 	bl	800c184 <__assert_func>
 800a378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a37c:	6006      	str	r6, [r0, #0]
 800a37e:	60c6      	str	r6, [r0, #12]
 800a380:	b13c      	cbz	r4, 800a392 <_Bfree+0x3a>
 800a382:	69eb      	ldr	r3, [r5, #28]
 800a384:	6862      	ldr	r2, [r4, #4]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a38c:	6021      	str	r1, [r4, #0]
 800a38e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a392:	bd70      	pop	{r4, r5, r6, pc}
 800a394:	0800cc70 	.word	0x0800cc70
 800a398:	0800ccf0 	.word	0x0800ccf0

0800a39c <__multadd>:
 800a39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	461e      	mov	r6, r3
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	690d      	ldr	r5, [r1, #16]
 800a3aa:	f101 0c14 	add.w	ip, r1, #20
 800a3ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	b299      	uxth	r1, r3
 800a3b6:	fb02 6101 	mla	r1, r2, r1, r6
 800a3ba:	0c1e      	lsrs	r6, r3, #16
 800a3bc:	0c0b      	lsrs	r3, r1, #16
 800a3be:	fb02 3306 	mla	r3, r2, r6, r3
 800a3c2:	b289      	uxth	r1, r1
 800a3c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3c8:	4285      	cmp	r5, r0
 800a3ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a3d2:	dcec      	bgt.n	800a3ae <__multadd+0x12>
 800a3d4:	b30e      	cbz	r6, 800a41a <__multadd+0x7e>
 800a3d6:	68a3      	ldr	r3, [r4, #8]
 800a3d8:	42ab      	cmp	r3, r5
 800a3da:	dc19      	bgt.n	800a410 <__multadd+0x74>
 800a3dc:	6861      	ldr	r1, [r4, #4]
 800a3de:	4638      	mov	r0, r7
 800a3e0:	3101      	adds	r1, #1
 800a3e2:	f7ff ff79 	bl	800a2d8 <_Balloc>
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	b928      	cbnz	r0, 800a3f6 <__multadd+0x5a>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	21ba      	movs	r1, #186	; 0xba
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <__multadd+0x84>)
 800a3f0:	480c      	ldr	r0, [pc, #48]	; (800a424 <__multadd+0x88>)
 800a3f2:	f001 fec7 	bl	800c184 <__assert_func>
 800a3f6:	6922      	ldr	r2, [r4, #16]
 800a3f8:	f104 010c 	add.w	r1, r4, #12
 800a3fc:	3202      	adds	r2, #2
 800a3fe:	0092      	lsls	r2, r2, #2
 800a400:	300c      	adds	r0, #12
 800a402:	f7fe ffec 	bl	80093de <memcpy>
 800a406:	4621      	mov	r1, r4
 800a408:	4638      	mov	r0, r7
 800a40a:	f7ff ffa5 	bl	800a358 <_Bfree>
 800a40e:	4644      	mov	r4, r8
 800a410:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a414:	3501      	adds	r5, #1
 800a416:	615e      	str	r6, [r3, #20]
 800a418:	6125      	str	r5, [r4, #16]
 800a41a:	4620      	mov	r0, r4
 800a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a420:	0800ccdf 	.word	0x0800ccdf
 800a424:	0800ccf0 	.word	0x0800ccf0

0800a428 <__s2b>:
 800a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a42c:	4615      	mov	r5, r2
 800a42e:	2209      	movs	r2, #9
 800a430:	461f      	mov	r7, r3
 800a432:	3308      	adds	r3, #8
 800a434:	460c      	mov	r4, r1
 800a436:	fb93 f3f2 	sdiv	r3, r3, r2
 800a43a:	4606      	mov	r6, r0
 800a43c:	2201      	movs	r2, #1
 800a43e:	2100      	movs	r1, #0
 800a440:	429a      	cmp	r2, r3
 800a442:	db09      	blt.n	800a458 <__s2b+0x30>
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff ff47 	bl	800a2d8 <_Balloc>
 800a44a:	b940      	cbnz	r0, 800a45e <__s2b+0x36>
 800a44c:	4602      	mov	r2, r0
 800a44e:	21d3      	movs	r1, #211	; 0xd3
 800a450:	4b18      	ldr	r3, [pc, #96]	; (800a4b4 <__s2b+0x8c>)
 800a452:	4819      	ldr	r0, [pc, #100]	; (800a4b8 <__s2b+0x90>)
 800a454:	f001 fe96 	bl	800c184 <__assert_func>
 800a458:	0052      	lsls	r2, r2, #1
 800a45a:	3101      	adds	r1, #1
 800a45c:	e7f0      	b.n	800a440 <__s2b+0x18>
 800a45e:	9b08      	ldr	r3, [sp, #32]
 800a460:	2d09      	cmp	r5, #9
 800a462:	6143      	str	r3, [r0, #20]
 800a464:	f04f 0301 	mov.w	r3, #1
 800a468:	6103      	str	r3, [r0, #16]
 800a46a:	dd16      	ble.n	800a49a <__s2b+0x72>
 800a46c:	f104 0909 	add.w	r9, r4, #9
 800a470:	46c8      	mov	r8, r9
 800a472:	442c      	add	r4, r5
 800a474:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a478:	4601      	mov	r1, r0
 800a47a:	220a      	movs	r2, #10
 800a47c:	4630      	mov	r0, r6
 800a47e:	3b30      	subs	r3, #48	; 0x30
 800a480:	f7ff ff8c 	bl	800a39c <__multadd>
 800a484:	45a0      	cmp	r8, r4
 800a486:	d1f5      	bne.n	800a474 <__s2b+0x4c>
 800a488:	f1a5 0408 	sub.w	r4, r5, #8
 800a48c:	444c      	add	r4, r9
 800a48e:	1b2d      	subs	r5, r5, r4
 800a490:	1963      	adds	r3, r4, r5
 800a492:	42bb      	cmp	r3, r7
 800a494:	db04      	blt.n	800a4a0 <__s2b+0x78>
 800a496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49a:	2509      	movs	r5, #9
 800a49c:	340a      	adds	r4, #10
 800a49e:	e7f6      	b.n	800a48e <__s2b+0x66>
 800a4a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4a4:	4601      	mov	r1, r0
 800a4a6:	220a      	movs	r2, #10
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	3b30      	subs	r3, #48	; 0x30
 800a4ac:	f7ff ff76 	bl	800a39c <__multadd>
 800a4b0:	e7ee      	b.n	800a490 <__s2b+0x68>
 800a4b2:	bf00      	nop
 800a4b4:	0800ccdf 	.word	0x0800ccdf
 800a4b8:	0800ccf0 	.word	0x0800ccf0

0800a4bc <__hi0bits>:
 800a4bc:	0c02      	lsrs	r2, r0, #16
 800a4be:	0412      	lsls	r2, r2, #16
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	b9ca      	cbnz	r2, 800a4f8 <__hi0bits+0x3c>
 800a4c4:	0403      	lsls	r3, r0, #16
 800a4c6:	2010      	movs	r0, #16
 800a4c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4cc:	bf04      	itt	eq
 800a4ce:	021b      	lsleq	r3, r3, #8
 800a4d0:	3008      	addeq	r0, #8
 800a4d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4d6:	bf04      	itt	eq
 800a4d8:	011b      	lsleq	r3, r3, #4
 800a4da:	3004      	addeq	r0, #4
 800a4dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4e0:	bf04      	itt	eq
 800a4e2:	009b      	lsleq	r3, r3, #2
 800a4e4:	3002      	addeq	r0, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	db05      	blt.n	800a4f6 <__hi0bits+0x3a>
 800a4ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a4ee:	f100 0001 	add.w	r0, r0, #1
 800a4f2:	bf08      	it	eq
 800a4f4:	2020      	moveq	r0, #32
 800a4f6:	4770      	bx	lr
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e7e5      	b.n	800a4c8 <__hi0bits+0xc>

0800a4fc <__lo0bits>:
 800a4fc:	6803      	ldr	r3, [r0, #0]
 800a4fe:	4602      	mov	r2, r0
 800a500:	f013 0007 	ands.w	r0, r3, #7
 800a504:	d00b      	beq.n	800a51e <__lo0bits+0x22>
 800a506:	07d9      	lsls	r1, r3, #31
 800a508:	d421      	bmi.n	800a54e <__lo0bits+0x52>
 800a50a:	0798      	lsls	r0, r3, #30
 800a50c:	bf49      	itett	mi
 800a50e:	085b      	lsrmi	r3, r3, #1
 800a510:	089b      	lsrpl	r3, r3, #2
 800a512:	2001      	movmi	r0, #1
 800a514:	6013      	strmi	r3, [r2, #0]
 800a516:	bf5c      	itt	pl
 800a518:	2002      	movpl	r0, #2
 800a51a:	6013      	strpl	r3, [r2, #0]
 800a51c:	4770      	bx	lr
 800a51e:	b299      	uxth	r1, r3
 800a520:	b909      	cbnz	r1, 800a526 <__lo0bits+0x2a>
 800a522:	2010      	movs	r0, #16
 800a524:	0c1b      	lsrs	r3, r3, #16
 800a526:	b2d9      	uxtb	r1, r3
 800a528:	b909      	cbnz	r1, 800a52e <__lo0bits+0x32>
 800a52a:	3008      	adds	r0, #8
 800a52c:	0a1b      	lsrs	r3, r3, #8
 800a52e:	0719      	lsls	r1, r3, #28
 800a530:	bf04      	itt	eq
 800a532:	091b      	lsreq	r3, r3, #4
 800a534:	3004      	addeq	r0, #4
 800a536:	0799      	lsls	r1, r3, #30
 800a538:	bf04      	itt	eq
 800a53a:	089b      	lsreq	r3, r3, #2
 800a53c:	3002      	addeq	r0, #2
 800a53e:	07d9      	lsls	r1, r3, #31
 800a540:	d403      	bmi.n	800a54a <__lo0bits+0x4e>
 800a542:	085b      	lsrs	r3, r3, #1
 800a544:	f100 0001 	add.w	r0, r0, #1
 800a548:	d003      	beq.n	800a552 <__lo0bits+0x56>
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	4770      	bx	lr
 800a54e:	2000      	movs	r0, #0
 800a550:	4770      	bx	lr
 800a552:	2020      	movs	r0, #32
 800a554:	4770      	bx	lr
	...

0800a558 <__i2b>:
 800a558:	b510      	push	{r4, lr}
 800a55a:	460c      	mov	r4, r1
 800a55c:	2101      	movs	r1, #1
 800a55e:	f7ff febb 	bl	800a2d8 <_Balloc>
 800a562:	4602      	mov	r2, r0
 800a564:	b928      	cbnz	r0, 800a572 <__i2b+0x1a>
 800a566:	f240 1145 	movw	r1, #325	; 0x145
 800a56a:	4b04      	ldr	r3, [pc, #16]	; (800a57c <__i2b+0x24>)
 800a56c:	4804      	ldr	r0, [pc, #16]	; (800a580 <__i2b+0x28>)
 800a56e:	f001 fe09 	bl	800c184 <__assert_func>
 800a572:	2301      	movs	r3, #1
 800a574:	6144      	str	r4, [r0, #20]
 800a576:	6103      	str	r3, [r0, #16]
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	bf00      	nop
 800a57c:	0800ccdf 	.word	0x0800ccdf
 800a580:	0800ccf0 	.word	0x0800ccf0

0800a584 <__multiply>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	4691      	mov	r9, r2
 800a58a:	690a      	ldr	r2, [r1, #16]
 800a58c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a590:	460c      	mov	r4, r1
 800a592:	429a      	cmp	r2, r3
 800a594:	bfbe      	ittt	lt
 800a596:	460b      	movlt	r3, r1
 800a598:	464c      	movlt	r4, r9
 800a59a:	4699      	movlt	r9, r3
 800a59c:	6927      	ldr	r7, [r4, #16]
 800a59e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	6861      	ldr	r1, [r4, #4]
 800a5a6:	eb07 060a 	add.w	r6, r7, sl
 800a5aa:	42b3      	cmp	r3, r6
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	bfb8      	it	lt
 800a5b0:	3101      	addlt	r1, #1
 800a5b2:	f7ff fe91 	bl	800a2d8 <_Balloc>
 800a5b6:	b930      	cbnz	r0, 800a5c6 <__multiply+0x42>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a5be:	4b43      	ldr	r3, [pc, #268]	; (800a6cc <__multiply+0x148>)
 800a5c0:	4843      	ldr	r0, [pc, #268]	; (800a6d0 <__multiply+0x14c>)
 800a5c2:	f001 fddf 	bl	800c184 <__assert_func>
 800a5c6:	f100 0514 	add.w	r5, r0, #20
 800a5ca:	462b      	mov	r3, r5
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5d2:	4543      	cmp	r3, r8
 800a5d4:	d321      	bcc.n	800a61a <__multiply+0x96>
 800a5d6:	f104 0314 	add.w	r3, r4, #20
 800a5da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5de:	f109 0314 	add.w	r3, r9, #20
 800a5e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5e6:	9202      	str	r2, [sp, #8]
 800a5e8:	1b3a      	subs	r2, r7, r4
 800a5ea:	3a15      	subs	r2, #21
 800a5ec:	f022 0203 	bic.w	r2, r2, #3
 800a5f0:	3204      	adds	r2, #4
 800a5f2:	f104 0115 	add.w	r1, r4, #21
 800a5f6:	428f      	cmp	r7, r1
 800a5f8:	bf38      	it	cc
 800a5fa:	2204      	movcc	r2, #4
 800a5fc:	9201      	str	r2, [sp, #4]
 800a5fe:	9a02      	ldr	r2, [sp, #8]
 800a600:	9303      	str	r3, [sp, #12]
 800a602:	429a      	cmp	r2, r3
 800a604:	d80c      	bhi.n	800a620 <__multiply+0x9c>
 800a606:	2e00      	cmp	r6, #0
 800a608:	dd03      	ble.n	800a612 <__multiply+0x8e>
 800a60a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d05a      	beq.n	800a6c8 <__multiply+0x144>
 800a612:	6106      	str	r6, [r0, #16]
 800a614:	b005      	add	sp, #20
 800a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61a:	f843 2b04 	str.w	r2, [r3], #4
 800a61e:	e7d8      	b.n	800a5d2 <__multiply+0x4e>
 800a620:	f8b3 a000 	ldrh.w	sl, [r3]
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	d023      	beq.n	800a672 <__multiply+0xee>
 800a62a:	46a9      	mov	r9, r5
 800a62c:	f04f 0c00 	mov.w	ip, #0
 800a630:	f104 0e14 	add.w	lr, r4, #20
 800a634:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a638:	f8d9 1000 	ldr.w	r1, [r9]
 800a63c:	fa1f fb82 	uxth.w	fp, r2
 800a640:	b289      	uxth	r1, r1
 800a642:	fb0a 110b 	mla	r1, sl, fp, r1
 800a646:	4461      	add	r1, ip
 800a648:	f8d9 c000 	ldr.w	ip, [r9]
 800a64c:	0c12      	lsrs	r2, r2, #16
 800a64e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a652:	fb0a c202 	mla	r2, sl, r2, ip
 800a656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a65a:	b289      	uxth	r1, r1
 800a65c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a660:	4577      	cmp	r7, lr
 800a662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a666:	f849 1b04 	str.w	r1, [r9], #4
 800a66a:	d8e3      	bhi.n	800a634 <__multiply+0xb0>
 800a66c:	9a01      	ldr	r2, [sp, #4]
 800a66e:	f845 c002 	str.w	ip, [r5, r2]
 800a672:	9a03      	ldr	r2, [sp, #12]
 800a674:	3304      	adds	r3, #4
 800a676:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a67a:	f1b9 0f00 	cmp.w	r9, #0
 800a67e:	d021      	beq.n	800a6c4 <__multiply+0x140>
 800a680:	46ae      	mov	lr, r5
 800a682:	f04f 0a00 	mov.w	sl, #0
 800a686:	6829      	ldr	r1, [r5, #0]
 800a688:	f104 0c14 	add.w	ip, r4, #20
 800a68c:	f8bc b000 	ldrh.w	fp, [ip]
 800a690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a694:	b289      	uxth	r1, r1
 800a696:	fb09 220b 	mla	r2, r9, fp, r2
 800a69a:	4452      	add	r2, sl
 800a69c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6a0:	f84e 1b04 	str.w	r1, [lr], #4
 800a6a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6ac:	f8be 1000 	ldrh.w	r1, [lr]
 800a6b0:	4567      	cmp	r7, ip
 800a6b2:	fb09 110a 	mla	r1, r9, sl, r1
 800a6b6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a6ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6be:	d8e5      	bhi.n	800a68c <__multiply+0x108>
 800a6c0:	9a01      	ldr	r2, [sp, #4]
 800a6c2:	50a9      	str	r1, [r5, r2]
 800a6c4:	3504      	adds	r5, #4
 800a6c6:	e79a      	b.n	800a5fe <__multiply+0x7a>
 800a6c8:	3e01      	subs	r6, #1
 800a6ca:	e79c      	b.n	800a606 <__multiply+0x82>
 800a6cc:	0800ccdf 	.word	0x0800ccdf
 800a6d0:	0800ccf0 	.word	0x0800ccf0

0800a6d4 <__pow5mult>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	4615      	mov	r5, r2
 800a6da:	f012 0203 	ands.w	r2, r2, #3
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	d007      	beq.n	800a6f4 <__pow5mult+0x20>
 800a6e4:	4c25      	ldr	r4, [pc, #148]	; (800a77c <__pow5mult+0xa8>)
 800a6e6:	3a01      	subs	r2, #1
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6ee:	f7ff fe55 	bl	800a39c <__multadd>
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	10ad      	asrs	r5, r5, #2
 800a6f6:	d03d      	beq.n	800a774 <__pow5mult+0xa0>
 800a6f8:	69f4      	ldr	r4, [r6, #28]
 800a6fa:	b97c      	cbnz	r4, 800a71c <__pow5mult+0x48>
 800a6fc:	2010      	movs	r0, #16
 800a6fe:	f7ff fd37 	bl	800a170 <malloc>
 800a702:	4602      	mov	r2, r0
 800a704:	61f0      	str	r0, [r6, #28]
 800a706:	b928      	cbnz	r0, 800a714 <__pow5mult+0x40>
 800a708:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a70c:	4b1c      	ldr	r3, [pc, #112]	; (800a780 <__pow5mult+0xac>)
 800a70e:	481d      	ldr	r0, [pc, #116]	; (800a784 <__pow5mult+0xb0>)
 800a710:	f001 fd38 	bl	800c184 <__assert_func>
 800a714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a718:	6004      	str	r4, [r0, #0]
 800a71a:	60c4      	str	r4, [r0, #12]
 800a71c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a724:	b94c      	cbnz	r4, 800a73a <__pow5mult+0x66>
 800a726:	f240 2171 	movw	r1, #625	; 0x271
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7ff ff14 	bl	800a558 <__i2b>
 800a730:	2300      	movs	r3, #0
 800a732:	4604      	mov	r4, r0
 800a734:	f8c8 0008 	str.w	r0, [r8, #8]
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	f04f 0900 	mov.w	r9, #0
 800a73e:	07eb      	lsls	r3, r5, #31
 800a740:	d50a      	bpl.n	800a758 <__pow5mult+0x84>
 800a742:	4639      	mov	r1, r7
 800a744:	4622      	mov	r2, r4
 800a746:	4630      	mov	r0, r6
 800a748:	f7ff ff1c 	bl	800a584 <__multiply>
 800a74c:	4680      	mov	r8, r0
 800a74e:	4639      	mov	r1, r7
 800a750:	4630      	mov	r0, r6
 800a752:	f7ff fe01 	bl	800a358 <_Bfree>
 800a756:	4647      	mov	r7, r8
 800a758:	106d      	asrs	r5, r5, #1
 800a75a:	d00b      	beq.n	800a774 <__pow5mult+0xa0>
 800a75c:	6820      	ldr	r0, [r4, #0]
 800a75e:	b938      	cbnz	r0, 800a770 <__pow5mult+0x9c>
 800a760:	4622      	mov	r2, r4
 800a762:	4621      	mov	r1, r4
 800a764:	4630      	mov	r0, r6
 800a766:	f7ff ff0d 	bl	800a584 <__multiply>
 800a76a:	6020      	str	r0, [r4, #0]
 800a76c:	f8c0 9000 	str.w	r9, [r0]
 800a770:	4604      	mov	r4, r0
 800a772:	e7e4      	b.n	800a73e <__pow5mult+0x6a>
 800a774:	4638      	mov	r0, r7
 800a776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a77a:	bf00      	nop
 800a77c:	0800ce40 	.word	0x0800ce40
 800a780:	0800cc70 	.word	0x0800cc70
 800a784:	0800ccf0 	.word	0x0800ccf0

0800a788 <__lshift>:
 800a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	460c      	mov	r4, r1
 800a78e:	4607      	mov	r7, r0
 800a790:	4691      	mov	r9, r2
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	6849      	ldr	r1, [r1, #4]
 800a796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a79a:	68a3      	ldr	r3, [r4, #8]
 800a79c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7a0:	f108 0601 	add.w	r6, r8, #1
 800a7a4:	42b3      	cmp	r3, r6
 800a7a6:	db0b      	blt.n	800a7c0 <__lshift+0x38>
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f7ff fd95 	bl	800a2d8 <_Balloc>
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	b948      	cbnz	r0, 800a7c6 <__lshift+0x3e>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a7b8:	4b27      	ldr	r3, [pc, #156]	; (800a858 <__lshift+0xd0>)
 800a7ba:	4828      	ldr	r0, [pc, #160]	; (800a85c <__lshift+0xd4>)
 800a7bc:	f001 fce2 	bl	800c184 <__assert_func>
 800a7c0:	3101      	adds	r1, #1
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	e7ee      	b.n	800a7a4 <__lshift+0x1c>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f100 0114 	add.w	r1, r0, #20
 800a7cc:	f100 0210 	add.w	r2, r0, #16
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	4553      	cmp	r3, sl
 800a7d4:	db33      	blt.n	800a83e <__lshift+0xb6>
 800a7d6:	6920      	ldr	r0, [r4, #16]
 800a7d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7dc:	f104 0314 	add.w	r3, r4, #20
 800a7e0:	f019 091f 	ands.w	r9, r9, #31
 800a7e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7ec:	d02b      	beq.n	800a846 <__lshift+0xbe>
 800a7ee:	468a      	mov	sl, r1
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a7f6:	6818      	ldr	r0, [r3, #0]
 800a7f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a7fc:	4310      	orrs	r0, r2
 800a7fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a802:	f853 2b04 	ldr.w	r2, [r3], #4
 800a806:	459c      	cmp	ip, r3
 800a808:	fa22 f20e 	lsr.w	r2, r2, lr
 800a80c:	d8f3      	bhi.n	800a7f6 <__lshift+0x6e>
 800a80e:	ebac 0304 	sub.w	r3, ip, r4
 800a812:	3b15      	subs	r3, #21
 800a814:	f023 0303 	bic.w	r3, r3, #3
 800a818:	3304      	adds	r3, #4
 800a81a:	f104 0015 	add.w	r0, r4, #21
 800a81e:	4584      	cmp	ip, r0
 800a820:	bf38      	it	cc
 800a822:	2304      	movcc	r3, #4
 800a824:	50ca      	str	r2, [r1, r3]
 800a826:	b10a      	cbz	r2, 800a82c <__lshift+0xa4>
 800a828:	f108 0602 	add.w	r6, r8, #2
 800a82c:	3e01      	subs	r6, #1
 800a82e:	4638      	mov	r0, r7
 800a830:	4621      	mov	r1, r4
 800a832:	612e      	str	r6, [r5, #16]
 800a834:	f7ff fd90 	bl	800a358 <_Bfree>
 800a838:	4628      	mov	r0, r5
 800a83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a842:	3301      	adds	r3, #1
 800a844:	e7c5      	b.n	800a7d2 <__lshift+0x4a>
 800a846:	3904      	subs	r1, #4
 800a848:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84c:	459c      	cmp	ip, r3
 800a84e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a852:	d8f9      	bhi.n	800a848 <__lshift+0xc0>
 800a854:	e7ea      	b.n	800a82c <__lshift+0xa4>
 800a856:	bf00      	nop
 800a858:	0800ccdf 	.word	0x0800ccdf
 800a85c:	0800ccf0 	.word	0x0800ccf0

0800a860 <__mcmp>:
 800a860:	4603      	mov	r3, r0
 800a862:	690a      	ldr	r2, [r1, #16]
 800a864:	6900      	ldr	r0, [r0, #16]
 800a866:	b530      	push	{r4, r5, lr}
 800a868:	1a80      	subs	r0, r0, r2
 800a86a:	d10d      	bne.n	800a888 <__mcmp+0x28>
 800a86c:	3314      	adds	r3, #20
 800a86e:	3114      	adds	r1, #20
 800a870:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a874:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a878:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a87c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a880:	4295      	cmp	r5, r2
 800a882:	d002      	beq.n	800a88a <__mcmp+0x2a>
 800a884:	d304      	bcc.n	800a890 <__mcmp+0x30>
 800a886:	2001      	movs	r0, #1
 800a888:	bd30      	pop	{r4, r5, pc}
 800a88a:	42a3      	cmp	r3, r4
 800a88c:	d3f4      	bcc.n	800a878 <__mcmp+0x18>
 800a88e:	e7fb      	b.n	800a888 <__mcmp+0x28>
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	e7f8      	b.n	800a888 <__mcmp+0x28>
	...

0800a898 <__mdiff>:
 800a898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	460d      	mov	r5, r1
 800a89e:	4607      	mov	r7, r0
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	f7ff ffdb 	bl	800a860 <__mcmp>
 800a8aa:	1e06      	subs	r6, r0, #0
 800a8ac:	d111      	bne.n	800a8d2 <__mdiff+0x3a>
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff fd11 	bl	800a2d8 <_Balloc>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	b928      	cbnz	r0, 800a8c6 <__mdiff+0x2e>
 800a8ba:	f240 2137 	movw	r1, #567	; 0x237
 800a8be:	4b3a      	ldr	r3, [pc, #232]	; (800a9a8 <__mdiff+0x110>)
 800a8c0:	483a      	ldr	r0, [pc, #232]	; (800a9ac <__mdiff+0x114>)
 800a8c2:	f001 fc5f 	bl	800c184 <__assert_func>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	bfa4      	itt	ge
 800a8d4:	4623      	movge	r3, r4
 800a8d6:	462c      	movge	r4, r5
 800a8d8:	4638      	mov	r0, r7
 800a8da:	6861      	ldr	r1, [r4, #4]
 800a8dc:	bfa6      	itte	ge
 800a8de:	461d      	movge	r5, r3
 800a8e0:	2600      	movge	r6, #0
 800a8e2:	2601      	movlt	r6, #1
 800a8e4:	f7ff fcf8 	bl	800a2d8 <_Balloc>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	b918      	cbnz	r0, 800a8f4 <__mdiff+0x5c>
 800a8ec:	f240 2145 	movw	r1, #581	; 0x245
 800a8f0:	4b2d      	ldr	r3, [pc, #180]	; (800a9a8 <__mdiff+0x110>)
 800a8f2:	e7e5      	b.n	800a8c0 <__mdiff+0x28>
 800a8f4:	f102 0814 	add.w	r8, r2, #20
 800a8f8:	46c2      	mov	sl, r8
 800a8fa:	f04f 0c00 	mov.w	ip, #0
 800a8fe:	6927      	ldr	r7, [r4, #16]
 800a900:	60c6      	str	r6, [r0, #12]
 800a902:	692e      	ldr	r6, [r5, #16]
 800a904:	f104 0014 	add.w	r0, r4, #20
 800a908:	f105 0914 	add.w	r9, r5, #20
 800a90c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a910:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a914:	3410      	adds	r4, #16
 800a916:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a91a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a91e:	fa1f f18b 	uxth.w	r1, fp
 800a922:	4461      	add	r1, ip
 800a924:	fa1f fc83 	uxth.w	ip, r3
 800a928:	0c1b      	lsrs	r3, r3, #16
 800a92a:	eba1 010c 	sub.w	r1, r1, ip
 800a92e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a932:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a936:	b289      	uxth	r1, r1
 800a938:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a93c:	454e      	cmp	r6, r9
 800a93e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a942:	f84a 1b04 	str.w	r1, [sl], #4
 800a946:	d8e6      	bhi.n	800a916 <__mdiff+0x7e>
 800a948:	1b73      	subs	r3, r6, r5
 800a94a:	3b15      	subs	r3, #21
 800a94c:	f023 0303 	bic.w	r3, r3, #3
 800a950:	3515      	adds	r5, #21
 800a952:	3304      	adds	r3, #4
 800a954:	42ae      	cmp	r6, r5
 800a956:	bf38      	it	cc
 800a958:	2304      	movcc	r3, #4
 800a95a:	4418      	add	r0, r3
 800a95c:	4443      	add	r3, r8
 800a95e:	461e      	mov	r6, r3
 800a960:	4605      	mov	r5, r0
 800a962:	4575      	cmp	r5, lr
 800a964:	d30e      	bcc.n	800a984 <__mdiff+0xec>
 800a966:	f10e 0103 	add.w	r1, lr, #3
 800a96a:	1a09      	subs	r1, r1, r0
 800a96c:	f021 0103 	bic.w	r1, r1, #3
 800a970:	3803      	subs	r0, #3
 800a972:	4586      	cmp	lr, r0
 800a974:	bf38      	it	cc
 800a976:	2100      	movcc	r1, #0
 800a978:	440b      	add	r3, r1
 800a97a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a97e:	b189      	cbz	r1, 800a9a4 <__mdiff+0x10c>
 800a980:	6117      	str	r7, [r2, #16]
 800a982:	e7a3      	b.n	800a8cc <__mdiff+0x34>
 800a984:	f855 8b04 	ldr.w	r8, [r5], #4
 800a988:	fa1f f188 	uxth.w	r1, r8
 800a98c:	4461      	add	r1, ip
 800a98e:	140c      	asrs	r4, r1, #16
 800a990:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a994:	b289      	uxth	r1, r1
 800a996:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a99a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a99e:	f846 1b04 	str.w	r1, [r6], #4
 800a9a2:	e7de      	b.n	800a962 <__mdiff+0xca>
 800a9a4:	3f01      	subs	r7, #1
 800a9a6:	e7e8      	b.n	800a97a <__mdiff+0xe2>
 800a9a8:	0800ccdf 	.word	0x0800ccdf
 800a9ac:	0800ccf0 	.word	0x0800ccf0

0800a9b0 <__ulp>:
 800a9b0:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <__ulp+0x3c>)
 800a9b2:	400b      	ands	r3, r1
 800a9b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	dc08      	bgt.n	800a9ce <__ulp+0x1e>
 800a9bc:	425b      	negs	r3, r3
 800a9be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9c6:	da04      	bge.n	800a9d2 <__ulp+0x22>
 800a9c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9cc:	4113      	asrs	r3, r2
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	e008      	b.n	800a9e4 <__ulp+0x34>
 800a9d2:	f1a2 0314 	sub.w	r3, r2, #20
 800a9d6:	2b1e      	cmp	r3, #30
 800a9d8:	bfd6      	itet	le
 800a9da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9de:	2201      	movgt	r2, #1
 800a9e0:	40da      	lsrle	r2, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	7ff00000 	.word	0x7ff00000

0800a9f0 <__b2d>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	6905      	ldr	r5, [r0, #16]
 800a9f4:	f100 0714 	add.w	r7, r0, #20
 800a9f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9fc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa00:	1f2e      	subs	r6, r5, #4
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff fd5a 	bl	800a4bc <__hi0bits>
 800aa08:	f1c0 0220 	rsb	r2, r0, #32
 800aa0c:	280a      	cmp	r0, #10
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f8df c068 	ldr.w	ip, [pc, #104]	; 800aa7c <__b2d+0x8c>
 800aa14:	600a      	str	r2, [r1, #0]
 800aa16:	dc12      	bgt.n	800aa3e <__b2d+0x4e>
 800aa18:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa1c:	fa24 f20e 	lsr.w	r2, r4, lr
 800aa20:	42b7      	cmp	r7, r6
 800aa22:	ea42 010c 	orr.w	r1, r2, ip
 800aa26:	bf2c      	ite	cs
 800aa28:	2200      	movcs	r2, #0
 800aa2a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aa2e:	3315      	adds	r3, #21
 800aa30:	fa04 f303 	lsl.w	r3, r4, r3
 800aa34:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa3e:	42b7      	cmp	r7, r6
 800aa40:	bf2e      	itee	cs
 800aa42:	2200      	movcs	r2, #0
 800aa44:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800aa48:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa4c:	3b0b      	subs	r3, #11
 800aa4e:	d012      	beq.n	800aa76 <__b2d+0x86>
 800aa50:	f1c3 0520 	rsb	r5, r3, #32
 800aa54:	fa22 f105 	lsr.w	r1, r2, r5
 800aa58:	409c      	lsls	r4, r3
 800aa5a:	430c      	orrs	r4, r1
 800aa5c:	42be      	cmp	r6, r7
 800aa5e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800aa62:	bf94      	ite	ls
 800aa64:	2400      	movls	r4, #0
 800aa66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa6a:	409a      	lsls	r2, r3
 800aa6c:	40ec      	lsrs	r4, r5
 800aa6e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aa72:	4322      	orrs	r2, r4
 800aa74:	e7e1      	b.n	800aa3a <__b2d+0x4a>
 800aa76:	ea44 010c 	orr.w	r1, r4, ip
 800aa7a:	e7de      	b.n	800aa3a <__b2d+0x4a>
 800aa7c:	3ff00000 	.word	0x3ff00000

0800aa80 <__d2b>:
 800aa80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa82:	2101      	movs	r1, #1
 800aa84:	4617      	mov	r7, r2
 800aa86:	461c      	mov	r4, r3
 800aa88:	9e08      	ldr	r6, [sp, #32]
 800aa8a:	f7ff fc25 	bl	800a2d8 <_Balloc>
 800aa8e:	4605      	mov	r5, r0
 800aa90:	b930      	cbnz	r0, 800aaa0 <__d2b+0x20>
 800aa92:	4602      	mov	r2, r0
 800aa94:	f240 310f 	movw	r1, #783	; 0x30f
 800aa98:	4b22      	ldr	r3, [pc, #136]	; (800ab24 <__d2b+0xa4>)
 800aa9a:	4823      	ldr	r0, [pc, #140]	; (800ab28 <__d2b+0xa8>)
 800aa9c:	f001 fb72 	bl	800c184 <__assert_func>
 800aaa0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800aaa4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aaa8:	bb24      	cbnz	r4, 800aaf4 <__d2b+0x74>
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	d026      	beq.n	800aafe <__d2b+0x7e>
 800aab0:	4668      	mov	r0, sp
 800aab2:	9700      	str	r7, [sp, #0]
 800aab4:	f7ff fd22 	bl	800a4fc <__lo0bits>
 800aab8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aabc:	b1e8      	cbz	r0, 800aafa <__d2b+0x7a>
 800aabe:	f1c0 0320 	rsb	r3, r0, #32
 800aac2:	fa02 f303 	lsl.w	r3, r2, r3
 800aac6:	430b      	orrs	r3, r1
 800aac8:	40c2      	lsrs	r2, r0
 800aaca:	616b      	str	r3, [r5, #20]
 800aacc:	9201      	str	r2, [sp, #4]
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	bf14      	ite	ne
 800aad4:	2102      	movne	r1, #2
 800aad6:	2101      	moveq	r1, #1
 800aad8:	61ab      	str	r3, [r5, #24]
 800aada:	6129      	str	r1, [r5, #16]
 800aadc:	b1bc      	cbz	r4, 800ab0e <__d2b+0x8e>
 800aade:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aae2:	4404      	add	r4, r0
 800aae4:	6034      	str	r4, [r6, #0]
 800aae6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaec:	6018      	str	r0, [r3, #0]
 800aaee:	4628      	mov	r0, r5
 800aaf0:	b003      	add	sp, #12
 800aaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaf8:	e7d7      	b.n	800aaaa <__d2b+0x2a>
 800aafa:	6169      	str	r1, [r5, #20]
 800aafc:	e7e7      	b.n	800aace <__d2b+0x4e>
 800aafe:	a801      	add	r0, sp, #4
 800ab00:	f7ff fcfc 	bl	800a4fc <__lo0bits>
 800ab04:	9b01      	ldr	r3, [sp, #4]
 800ab06:	2101      	movs	r1, #1
 800ab08:	616b      	str	r3, [r5, #20]
 800ab0a:	3020      	adds	r0, #32
 800ab0c:	e7e5      	b.n	800aada <__d2b+0x5a>
 800ab0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab12:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ab16:	6030      	str	r0, [r6, #0]
 800ab18:	6918      	ldr	r0, [r3, #16]
 800ab1a:	f7ff fccf 	bl	800a4bc <__hi0bits>
 800ab1e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab22:	e7e2      	b.n	800aaea <__d2b+0x6a>
 800ab24:	0800ccdf 	.word	0x0800ccdf
 800ab28:	0800ccf0 	.word	0x0800ccf0

0800ab2c <__ratio>:
 800ab2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	4688      	mov	r8, r1
 800ab32:	4669      	mov	r1, sp
 800ab34:	4681      	mov	r9, r0
 800ab36:	f7ff ff5b 	bl	800a9f0 <__b2d>
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	460d      	mov	r5, r1
 800ab40:	4640      	mov	r0, r8
 800ab42:	a901      	add	r1, sp, #4
 800ab44:	f7ff ff54 	bl	800a9f0 <__b2d>
 800ab48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab4c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab50:	468b      	mov	fp, r1
 800ab52:	eba3 0c02 	sub.w	ip, r3, r2
 800ab56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfd5      	itete	le
 800ab64:	460a      	movle	r2, r1
 800ab66:	462a      	movgt	r2, r5
 800ab68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab6c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab70:	bfd8      	it	le
 800ab72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab76:	465b      	mov	r3, fp
 800ab78:	4602      	mov	r2, r0
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7f5 fdd5 	bl	800072c <__aeabi_ddiv>
 800ab82:	b003      	add	sp, #12
 800ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab88 <__copybits>:
 800ab88:	3901      	subs	r1, #1
 800ab8a:	b570      	push	{r4, r5, r6, lr}
 800ab8c:	1149      	asrs	r1, r1, #5
 800ab8e:	6914      	ldr	r4, [r2, #16]
 800ab90:	3101      	adds	r1, #1
 800ab92:	f102 0314 	add.w	r3, r2, #20
 800ab96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab9e:	1f05      	subs	r5, r0, #4
 800aba0:	42a3      	cmp	r3, r4
 800aba2:	d30c      	bcc.n	800abbe <__copybits+0x36>
 800aba4:	1aa3      	subs	r3, r4, r2
 800aba6:	3b11      	subs	r3, #17
 800aba8:	f023 0303 	bic.w	r3, r3, #3
 800abac:	3211      	adds	r2, #17
 800abae:	42a2      	cmp	r2, r4
 800abb0:	bf88      	it	hi
 800abb2:	2300      	movhi	r3, #0
 800abb4:	4418      	add	r0, r3
 800abb6:	2300      	movs	r3, #0
 800abb8:	4288      	cmp	r0, r1
 800abba:	d305      	bcc.n	800abc8 <__copybits+0x40>
 800abbc:	bd70      	pop	{r4, r5, r6, pc}
 800abbe:	f853 6b04 	ldr.w	r6, [r3], #4
 800abc2:	f845 6f04 	str.w	r6, [r5, #4]!
 800abc6:	e7eb      	b.n	800aba0 <__copybits+0x18>
 800abc8:	f840 3b04 	str.w	r3, [r0], #4
 800abcc:	e7f4      	b.n	800abb8 <__copybits+0x30>

0800abce <__any_on>:
 800abce:	f100 0214 	add.w	r2, r0, #20
 800abd2:	6900      	ldr	r0, [r0, #16]
 800abd4:	114b      	asrs	r3, r1, #5
 800abd6:	4298      	cmp	r0, r3
 800abd8:	b510      	push	{r4, lr}
 800abda:	db11      	blt.n	800ac00 <__any_on+0x32>
 800abdc:	dd0a      	ble.n	800abf4 <__any_on+0x26>
 800abde:	f011 011f 	ands.w	r1, r1, #31
 800abe2:	d007      	beq.n	800abf4 <__any_on+0x26>
 800abe4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abe8:	fa24 f001 	lsr.w	r0, r4, r1
 800abec:	fa00 f101 	lsl.w	r1, r0, r1
 800abf0:	428c      	cmp	r4, r1
 800abf2:	d10b      	bne.n	800ac0c <__any_on+0x3e>
 800abf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d803      	bhi.n	800ac04 <__any_on+0x36>
 800abfc:	2000      	movs	r0, #0
 800abfe:	bd10      	pop	{r4, pc}
 800ac00:	4603      	mov	r3, r0
 800ac02:	e7f7      	b.n	800abf4 <__any_on+0x26>
 800ac04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	d0f5      	beq.n	800abf8 <__any_on+0x2a>
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	e7f6      	b.n	800abfe <__any_on+0x30>

0800ac10 <sulp>:
 800ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	460f      	mov	r7, r1
 800ac16:	4690      	mov	r8, r2
 800ac18:	f7ff feca 	bl	800a9b0 <__ulp>
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	460d      	mov	r5, r1
 800ac20:	f1b8 0f00 	cmp.w	r8, #0
 800ac24:	d011      	beq.n	800ac4a <sulp+0x3a>
 800ac26:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ac2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	dd0b      	ble.n	800ac4a <sulp+0x3a>
 800ac32:	2400      	movs	r4, #0
 800ac34:	051b      	lsls	r3, r3, #20
 800ac36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac3e:	4622      	mov	r2, r4
 800ac40:	462b      	mov	r3, r5
 800ac42:	f7f5 fc49 	bl	80004d8 <__aeabi_dmul>
 800ac46:	4604      	mov	r4, r0
 800ac48:	460d      	mov	r5, r1
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac52:	0000      	movs	r0, r0
 800ac54:	0000      	movs	r0, r0
	...

0800ac58 <_strtod_l>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	b09f      	sub	sp, #124	; 0x7c
 800ac5e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac60:	2200      	movs	r2, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	921a      	str	r2, [sp, #104]	; 0x68
 800ac66:	460d      	mov	r5, r1
 800ac68:	f04f 0800 	mov.w	r8, #0
 800ac6c:	f04f 0900 	mov.w	r9, #0
 800ac70:	460a      	mov	r2, r1
 800ac72:	9219      	str	r2, [sp, #100]	; 0x64
 800ac74:	7811      	ldrb	r1, [r2, #0]
 800ac76:	292b      	cmp	r1, #43	; 0x2b
 800ac78:	d04a      	beq.n	800ad10 <_strtod_l+0xb8>
 800ac7a:	d838      	bhi.n	800acee <_strtod_l+0x96>
 800ac7c:	290d      	cmp	r1, #13
 800ac7e:	d832      	bhi.n	800ace6 <_strtod_l+0x8e>
 800ac80:	2908      	cmp	r1, #8
 800ac82:	d832      	bhi.n	800acea <_strtod_l+0x92>
 800ac84:	2900      	cmp	r1, #0
 800ac86:	d03b      	beq.n	800ad00 <_strtod_l+0xa8>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	920e      	str	r2, [sp, #56]	; 0x38
 800ac8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ac8e:	7832      	ldrb	r2, [r6, #0]
 800ac90:	2a30      	cmp	r2, #48	; 0x30
 800ac92:	f040 80b2 	bne.w	800adfa <_strtod_l+0x1a2>
 800ac96:	7872      	ldrb	r2, [r6, #1]
 800ac98:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ac9c:	2a58      	cmp	r2, #88	; 0x58
 800ac9e:	d16e      	bne.n	800ad7e <_strtod_l+0x126>
 800aca0:	9302      	str	r3, [sp, #8]
 800aca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aca4:	4620      	mov	r0, r4
 800aca6:	9301      	str	r3, [sp, #4]
 800aca8:	ab1a      	add	r3, sp, #104	; 0x68
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	4a8c      	ldr	r2, [pc, #560]	; (800aee0 <_strtod_l+0x288>)
 800acae:	ab1b      	add	r3, sp, #108	; 0x6c
 800acb0:	a919      	add	r1, sp, #100	; 0x64
 800acb2:	f001 fb01 	bl	800c2b8 <__gethex>
 800acb6:	f010 070f 	ands.w	r7, r0, #15
 800acba:	4605      	mov	r5, r0
 800acbc:	d005      	beq.n	800acca <_strtod_l+0x72>
 800acbe:	2f06      	cmp	r7, #6
 800acc0:	d128      	bne.n	800ad14 <_strtod_l+0xbc>
 800acc2:	2300      	movs	r3, #0
 800acc4:	3601      	adds	r6, #1
 800acc6:	9619      	str	r6, [sp, #100]	; 0x64
 800acc8:	930e      	str	r3, [sp, #56]	; 0x38
 800acca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800accc:	2b00      	cmp	r3, #0
 800acce:	f040 85a0 	bne.w	800b812 <_strtod_l+0xbba>
 800acd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acd4:	b1cb      	cbz	r3, 800ad0a <_strtod_l+0xb2>
 800acd6:	4642      	mov	r2, r8
 800acd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acdc:	4610      	mov	r0, r2
 800acde:	4619      	mov	r1, r3
 800ace0:	b01f      	add	sp, #124	; 0x7c
 800ace2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace6:	2920      	cmp	r1, #32
 800ace8:	d1ce      	bne.n	800ac88 <_strtod_l+0x30>
 800acea:	3201      	adds	r2, #1
 800acec:	e7c1      	b.n	800ac72 <_strtod_l+0x1a>
 800acee:	292d      	cmp	r1, #45	; 0x2d
 800acf0:	d1ca      	bne.n	800ac88 <_strtod_l+0x30>
 800acf2:	2101      	movs	r1, #1
 800acf4:	910e      	str	r1, [sp, #56]	; 0x38
 800acf6:	1c51      	adds	r1, r2, #1
 800acf8:	9119      	str	r1, [sp, #100]	; 0x64
 800acfa:	7852      	ldrb	r2, [r2, #1]
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	d1c5      	bne.n	800ac8c <_strtod_l+0x34>
 800ad00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad02:	9519      	str	r5, [sp, #100]	; 0x64
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f040 8582 	bne.w	800b80e <_strtod_l+0xbb6>
 800ad0a:	4642      	mov	r2, r8
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	e7e5      	b.n	800acdc <_strtod_l+0x84>
 800ad10:	2100      	movs	r1, #0
 800ad12:	e7ef      	b.n	800acf4 <_strtod_l+0x9c>
 800ad14:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad16:	b13a      	cbz	r2, 800ad28 <_strtod_l+0xd0>
 800ad18:	2135      	movs	r1, #53	; 0x35
 800ad1a:	a81c      	add	r0, sp, #112	; 0x70
 800ad1c:	f7ff ff34 	bl	800ab88 <__copybits>
 800ad20:	4620      	mov	r0, r4
 800ad22:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad24:	f7ff fb18 	bl	800a358 <_Bfree>
 800ad28:	3f01      	subs	r7, #1
 800ad2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad2c:	2f04      	cmp	r7, #4
 800ad2e:	d806      	bhi.n	800ad3e <_strtod_l+0xe6>
 800ad30:	e8df f007 	tbb	[pc, r7]
 800ad34:	201d0314 	.word	0x201d0314
 800ad38:	14          	.byte	0x14
 800ad39:	00          	.byte	0x00
 800ad3a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ad3e:	05e9      	lsls	r1, r5, #23
 800ad40:	bf48      	it	mi
 800ad42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ad46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad4a:	0d1b      	lsrs	r3, r3, #20
 800ad4c:	051b      	lsls	r3, r3, #20
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1bb      	bne.n	800acca <_strtod_l+0x72>
 800ad52:	f7fe fb09 	bl	8009368 <__errno>
 800ad56:	2322      	movs	r3, #34	; 0x22
 800ad58:	6003      	str	r3, [r0, #0]
 800ad5a:	e7b6      	b.n	800acca <_strtod_l+0x72>
 800ad5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad60:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ad64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ad6c:	e7e7      	b.n	800ad3e <_strtod_l+0xe6>
 800ad6e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800aee4 <_strtod_l+0x28c>
 800ad72:	e7e4      	b.n	800ad3e <_strtod_l+0xe6>
 800ad74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ad78:	f04f 38ff 	mov.w	r8, #4294967295
 800ad7c:	e7df      	b.n	800ad3e <_strtod_l+0xe6>
 800ad7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	9219      	str	r2, [sp, #100]	; 0x64
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	2b30      	cmp	r3, #48	; 0x30
 800ad88:	d0f9      	beq.n	800ad7e <_strtod_l+0x126>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d09d      	beq.n	800acca <_strtod_l+0x72>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f04f 0a00 	mov.w	sl, #0
 800ad94:	220a      	movs	r2, #10
 800ad96:	46d3      	mov	fp, sl
 800ad98:	9305      	str	r3, [sp, #20]
 800ad9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad9c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800ada0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ada2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ada4:	7806      	ldrb	r6, [r0, #0]
 800ada6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800adaa:	b2d9      	uxtb	r1, r3
 800adac:	2909      	cmp	r1, #9
 800adae:	d926      	bls.n	800adfe <_strtod_l+0x1a6>
 800adb0:	2201      	movs	r2, #1
 800adb2:	494d      	ldr	r1, [pc, #308]	; (800aee8 <_strtod_l+0x290>)
 800adb4:	f001 f9be 	bl	800c134 <strncmp>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d030      	beq.n	800ae1e <_strtod_l+0x1c6>
 800adbc:	2000      	movs	r0, #0
 800adbe:	4632      	mov	r2, r6
 800adc0:	4603      	mov	r3, r0
 800adc2:	465e      	mov	r6, fp
 800adc4:	9008      	str	r0, [sp, #32]
 800adc6:	2a65      	cmp	r2, #101	; 0x65
 800adc8:	d001      	beq.n	800adce <_strtod_l+0x176>
 800adca:	2a45      	cmp	r2, #69	; 0x45
 800adcc:	d113      	bne.n	800adf6 <_strtod_l+0x19e>
 800adce:	b91e      	cbnz	r6, 800add8 <_strtod_l+0x180>
 800add0:	9a05      	ldr	r2, [sp, #20]
 800add2:	4302      	orrs	r2, r0
 800add4:	d094      	beq.n	800ad00 <_strtod_l+0xa8>
 800add6:	2600      	movs	r6, #0
 800add8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800adda:	1c6a      	adds	r2, r5, #1
 800addc:	9219      	str	r2, [sp, #100]	; 0x64
 800adde:	786a      	ldrb	r2, [r5, #1]
 800ade0:	2a2b      	cmp	r2, #43	; 0x2b
 800ade2:	d074      	beq.n	800aece <_strtod_l+0x276>
 800ade4:	2a2d      	cmp	r2, #45	; 0x2d
 800ade6:	d078      	beq.n	800aeda <_strtod_l+0x282>
 800ade8:	f04f 0c00 	mov.w	ip, #0
 800adec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800adf0:	2909      	cmp	r1, #9
 800adf2:	d97f      	bls.n	800aef4 <_strtod_l+0x29c>
 800adf4:	9519      	str	r5, [sp, #100]	; 0x64
 800adf6:	2700      	movs	r7, #0
 800adf8:	e09e      	b.n	800af38 <_strtod_l+0x2e0>
 800adfa:	2300      	movs	r3, #0
 800adfc:	e7c8      	b.n	800ad90 <_strtod_l+0x138>
 800adfe:	f1bb 0f08 	cmp.w	fp, #8
 800ae02:	bfd8      	it	le
 800ae04:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ae06:	f100 0001 	add.w	r0, r0, #1
 800ae0a:	bfd6      	itet	le
 800ae0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae10:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ae14:	930a      	strle	r3, [sp, #40]	; 0x28
 800ae16:	f10b 0b01 	add.w	fp, fp, #1
 800ae1a:	9019      	str	r0, [sp, #100]	; 0x64
 800ae1c:	e7c1      	b.n	800ada2 <_strtod_l+0x14a>
 800ae1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	9219      	str	r2, [sp, #100]	; 0x64
 800ae24:	785a      	ldrb	r2, [r3, #1]
 800ae26:	f1bb 0f00 	cmp.w	fp, #0
 800ae2a:	d037      	beq.n	800ae9c <_strtod_l+0x244>
 800ae2c:	465e      	mov	r6, fp
 800ae2e:	9008      	str	r0, [sp, #32]
 800ae30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae34:	2b09      	cmp	r3, #9
 800ae36:	d912      	bls.n	800ae5e <_strtod_l+0x206>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e7c4      	b.n	800adc6 <_strtod_l+0x16e>
 800ae3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae3e:	3001      	adds	r0, #1
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	9219      	str	r2, [sp, #100]	; 0x64
 800ae44:	785a      	ldrb	r2, [r3, #1]
 800ae46:	2a30      	cmp	r2, #48	; 0x30
 800ae48:	d0f8      	beq.n	800ae3c <_strtod_l+0x1e4>
 800ae4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ae4e:	2b08      	cmp	r3, #8
 800ae50:	f200 84e4 	bhi.w	800b81c <_strtod_l+0xbc4>
 800ae54:	9008      	str	r0, [sp, #32]
 800ae56:	2000      	movs	r0, #0
 800ae58:	4606      	mov	r6, r0
 800ae5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae5e:	3a30      	subs	r2, #48	; 0x30
 800ae60:	f100 0301 	add.w	r3, r0, #1
 800ae64:	d014      	beq.n	800ae90 <_strtod_l+0x238>
 800ae66:	9908      	ldr	r1, [sp, #32]
 800ae68:	eb00 0c06 	add.w	ip, r0, r6
 800ae6c:	4419      	add	r1, r3
 800ae6e:	9108      	str	r1, [sp, #32]
 800ae70:	4633      	mov	r3, r6
 800ae72:	210a      	movs	r1, #10
 800ae74:	4563      	cmp	r3, ip
 800ae76:	d113      	bne.n	800aea0 <_strtod_l+0x248>
 800ae78:	1833      	adds	r3, r6, r0
 800ae7a:	2b08      	cmp	r3, #8
 800ae7c:	f106 0601 	add.w	r6, r6, #1
 800ae80:	4406      	add	r6, r0
 800ae82:	dc1a      	bgt.n	800aeba <_strtod_l+0x262>
 800ae84:	230a      	movs	r3, #10
 800ae86:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae88:	fb03 2301 	mla	r3, r3, r1, r2
 800ae8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae92:	4618      	mov	r0, r3
 800ae94:	1c51      	adds	r1, r2, #1
 800ae96:	9119      	str	r1, [sp, #100]	; 0x64
 800ae98:	7852      	ldrb	r2, [r2, #1]
 800ae9a:	e7c9      	b.n	800ae30 <_strtod_l+0x1d8>
 800ae9c:	4658      	mov	r0, fp
 800ae9e:	e7d2      	b.n	800ae46 <_strtod_l+0x1ee>
 800aea0:	2b08      	cmp	r3, #8
 800aea2:	f103 0301 	add.w	r3, r3, #1
 800aea6:	dc03      	bgt.n	800aeb0 <_strtod_l+0x258>
 800aea8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aeaa:	434f      	muls	r7, r1
 800aeac:	970a      	str	r7, [sp, #40]	; 0x28
 800aeae:	e7e1      	b.n	800ae74 <_strtod_l+0x21c>
 800aeb0:	2b10      	cmp	r3, #16
 800aeb2:	bfd8      	it	le
 800aeb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aeb8:	e7dc      	b.n	800ae74 <_strtod_l+0x21c>
 800aeba:	2e10      	cmp	r6, #16
 800aebc:	bfdc      	itt	le
 800aebe:	230a      	movle	r3, #10
 800aec0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aec4:	e7e3      	b.n	800ae8e <_strtod_l+0x236>
 800aec6:	2300      	movs	r3, #0
 800aec8:	9308      	str	r3, [sp, #32]
 800aeca:	2301      	movs	r3, #1
 800aecc:	e780      	b.n	800add0 <_strtod_l+0x178>
 800aece:	f04f 0c00 	mov.w	ip, #0
 800aed2:	1caa      	adds	r2, r5, #2
 800aed4:	9219      	str	r2, [sp, #100]	; 0x64
 800aed6:	78aa      	ldrb	r2, [r5, #2]
 800aed8:	e788      	b.n	800adec <_strtod_l+0x194>
 800aeda:	f04f 0c01 	mov.w	ip, #1
 800aede:	e7f8      	b.n	800aed2 <_strtod_l+0x27a>
 800aee0:	0800ce50 	.word	0x0800ce50
 800aee4:	7ff00000 	.word	0x7ff00000
 800aee8:	0800ce4c 	.word	0x0800ce4c
 800aeec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aeee:	1c51      	adds	r1, r2, #1
 800aef0:	9119      	str	r1, [sp, #100]	; 0x64
 800aef2:	7852      	ldrb	r2, [r2, #1]
 800aef4:	2a30      	cmp	r2, #48	; 0x30
 800aef6:	d0f9      	beq.n	800aeec <_strtod_l+0x294>
 800aef8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aefc:	2908      	cmp	r1, #8
 800aefe:	f63f af7a 	bhi.w	800adf6 <_strtod_l+0x19e>
 800af02:	3a30      	subs	r2, #48	; 0x30
 800af04:	9209      	str	r2, [sp, #36]	; 0x24
 800af06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af08:	920c      	str	r2, [sp, #48]	; 0x30
 800af0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af0c:	1c57      	adds	r7, r2, #1
 800af0e:	9719      	str	r7, [sp, #100]	; 0x64
 800af10:	7852      	ldrb	r2, [r2, #1]
 800af12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af16:	f1be 0f09 	cmp.w	lr, #9
 800af1a:	d938      	bls.n	800af8e <_strtod_l+0x336>
 800af1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af1e:	1a7f      	subs	r7, r7, r1
 800af20:	2f08      	cmp	r7, #8
 800af22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800af26:	dc03      	bgt.n	800af30 <_strtod_l+0x2d8>
 800af28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af2a:	428f      	cmp	r7, r1
 800af2c:	bfa8      	it	ge
 800af2e:	460f      	movge	r7, r1
 800af30:	f1bc 0f00 	cmp.w	ip, #0
 800af34:	d000      	beq.n	800af38 <_strtod_l+0x2e0>
 800af36:	427f      	negs	r7, r7
 800af38:	2e00      	cmp	r6, #0
 800af3a:	d14f      	bne.n	800afdc <_strtod_l+0x384>
 800af3c:	9905      	ldr	r1, [sp, #20]
 800af3e:	4301      	orrs	r1, r0
 800af40:	f47f aec3 	bne.w	800acca <_strtod_l+0x72>
 800af44:	2b00      	cmp	r3, #0
 800af46:	f47f aedb 	bne.w	800ad00 <_strtod_l+0xa8>
 800af4a:	2a69      	cmp	r2, #105	; 0x69
 800af4c:	d029      	beq.n	800afa2 <_strtod_l+0x34a>
 800af4e:	dc26      	bgt.n	800af9e <_strtod_l+0x346>
 800af50:	2a49      	cmp	r2, #73	; 0x49
 800af52:	d026      	beq.n	800afa2 <_strtod_l+0x34a>
 800af54:	2a4e      	cmp	r2, #78	; 0x4e
 800af56:	f47f aed3 	bne.w	800ad00 <_strtod_l+0xa8>
 800af5a:	499a      	ldr	r1, [pc, #616]	; (800b1c4 <_strtod_l+0x56c>)
 800af5c:	a819      	add	r0, sp, #100	; 0x64
 800af5e:	f001 fbed 	bl	800c73c <__match>
 800af62:	2800      	cmp	r0, #0
 800af64:	f43f aecc 	beq.w	800ad00 <_strtod_l+0xa8>
 800af68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b28      	cmp	r3, #40	; 0x28
 800af6e:	d12f      	bne.n	800afd0 <_strtod_l+0x378>
 800af70:	4995      	ldr	r1, [pc, #596]	; (800b1c8 <_strtod_l+0x570>)
 800af72:	aa1c      	add	r2, sp, #112	; 0x70
 800af74:	a819      	add	r0, sp, #100	; 0x64
 800af76:	f001 fbf5 	bl	800c764 <__hexnan>
 800af7a:	2805      	cmp	r0, #5
 800af7c:	d128      	bne.n	800afd0 <_strtod_l+0x378>
 800af7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800af84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800af88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800af8c:	e69d      	b.n	800acca <_strtod_l+0x72>
 800af8e:	210a      	movs	r1, #10
 800af90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af92:	fb01 2107 	mla	r1, r1, r7, r2
 800af96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800af9a:	9209      	str	r2, [sp, #36]	; 0x24
 800af9c:	e7b5      	b.n	800af0a <_strtod_l+0x2b2>
 800af9e:	2a6e      	cmp	r2, #110	; 0x6e
 800afa0:	e7d9      	b.n	800af56 <_strtod_l+0x2fe>
 800afa2:	498a      	ldr	r1, [pc, #552]	; (800b1cc <_strtod_l+0x574>)
 800afa4:	a819      	add	r0, sp, #100	; 0x64
 800afa6:	f001 fbc9 	bl	800c73c <__match>
 800afaa:	2800      	cmp	r0, #0
 800afac:	f43f aea8 	beq.w	800ad00 <_strtod_l+0xa8>
 800afb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afb2:	4987      	ldr	r1, [pc, #540]	; (800b1d0 <_strtod_l+0x578>)
 800afb4:	3b01      	subs	r3, #1
 800afb6:	a819      	add	r0, sp, #100	; 0x64
 800afb8:	9319      	str	r3, [sp, #100]	; 0x64
 800afba:	f001 fbbf 	bl	800c73c <__match>
 800afbe:	b910      	cbnz	r0, 800afc6 <_strtod_l+0x36e>
 800afc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afc2:	3301      	adds	r3, #1
 800afc4:	9319      	str	r3, [sp, #100]	; 0x64
 800afc6:	f04f 0800 	mov.w	r8, #0
 800afca:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b1d4 <_strtod_l+0x57c>
 800afce:	e67c      	b.n	800acca <_strtod_l+0x72>
 800afd0:	4881      	ldr	r0, [pc, #516]	; (800b1d8 <_strtod_l+0x580>)
 800afd2:	f001 f8d1 	bl	800c178 <nan>
 800afd6:	4680      	mov	r8, r0
 800afd8:	4689      	mov	r9, r1
 800afda:	e676      	b.n	800acca <_strtod_l+0x72>
 800afdc:	9b08      	ldr	r3, [sp, #32]
 800afde:	f1bb 0f00 	cmp.w	fp, #0
 800afe2:	bf08      	it	eq
 800afe4:	46b3      	moveq	fp, r6
 800afe6:	1afb      	subs	r3, r7, r3
 800afe8:	2e10      	cmp	r6, #16
 800afea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afec:	4635      	mov	r5, r6
 800afee:	9309      	str	r3, [sp, #36]	; 0x24
 800aff0:	bfa8      	it	ge
 800aff2:	2510      	movge	r5, #16
 800aff4:	f7f5 f9f6 	bl	80003e4 <__aeabi_ui2d>
 800aff8:	2e09      	cmp	r6, #9
 800affa:	4680      	mov	r8, r0
 800affc:	4689      	mov	r9, r1
 800affe:	dd13      	ble.n	800b028 <_strtod_l+0x3d0>
 800b000:	4b76      	ldr	r3, [pc, #472]	; (800b1dc <_strtod_l+0x584>)
 800b002:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b006:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b00a:	f7f5 fa65 	bl	80004d8 <__aeabi_dmul>
 800b00e:	4680      	mov	r8, r0
 800b010:	4650      	mov	r0, sl
 800b012:	4689      	mov	r9, r1
 800b014:	f7f5 f9e6 	bl	80003e4 <__aeabi_ui2d>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4640      	mov	r0, r8
 800b01e:	4649      	mov	r1, r9
 800b020:	f7f5 f8a4 	bl	800016c <__adddf3>
 800b024:	4680      	mov	r8, r0
 800b026:	4689      	mov	r9, r1
 800b028:	2e0f      	cmp	r6, #15
 800b02a:	dc36      	bgt.n	800b09a <_strtod_l+0x442>
 800b02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f43f ae4b 	beq.w	800acca <_strtod_l+0x72>
 800b034:	dd22      	ble.n	800b07c <_strtod_l+0x424>
 800b036:	2b16      	cmp	r3, #22
 800b038:	dc09      	bgt.n	800b04e <_strtod_l+0x3f6>
 800b03a:	4968      	ldr	r1, [pc, #416]	; (800b1dc <_strtod_l+0x584>)
 800b03c:	4642      	mov	r2, r8
 800b03e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b042:	464b      	mov	r3, r9
 800b044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b048:	f7f5 fa46 	bl	80004d8 <__aeabi_dmul>
 800b04c:	e7c3      	b.n	800afd6 <_strtod_l+0x37e>
 800b04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b050:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b054:	4293      	cmp	r3, r2
 800b056:	db20      	blt.n	800b09a <_strtod_l+0x442>
 800b058:	4c60      	ldr	r4, [pc, #384]	; (800b1dc <_strtod_l+0x584>)
 800b05a:	f1c6 060f 	rsb	r6, r6, #15
 800b05e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b062:	4642      	mov	r2, r8
 800b064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b068:	464b      	mov	r3, r9
 800b06a:	f7f5 fa35 	bl	80004d8 <__aeabi_dmul>
 800b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b070:	1b9e      	subs	r6, r3, r6
 800b072:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b076:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b07a:	e7e5      	b.n	800b048 <_strtod_l+0x3f0>
 800b07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07e:	3316      	adds	r3, #22
 800b080:	db0b      	blt.n	800b09a <_strtod_l+0x442>
 800b082:	9b08      	ldr	r3, [sp, #32]
 800b084:	4640      	mov	r0, r8
 800b086:	1bdf      	subs	r7, r3, r7
 800b088:	4b54      	ldr	r3, [pc, #336]	; (800b1dc <_strtod_l+0x584>)
 800b08a:	4649      	mov	r1, r9
 800b08c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b090:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b094:	f7f5 fb4a 	bl	800072c <__aeabi_ddiv>
 800b098:	e79d      	b.n	800afd6 <_strtod_l+0x37e>
 800b09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09c:	1b75      	subs	r5, r6, r5
 800b09e:	441d      	add	r5, r3
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	dd70      	ble.n	800b186 <_strtod_l+0x52e>
 800b0a4:	f015 030f 	ands.w	r3, r5, #15
 800b0a8:	d00a      	beq.n	800b0c0 <_strtod_l+0x468>
 800b0aa:	494c      	ldr	r1, [pc, #304]	; (800b1dc <_strtod_l+0x584>)
 800b0ac:	4642      	mov	r2, r8
 800b0ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b6:	464b      	mov	r3, r9
 800b0b8:	f7f5 fa0e 	bl	80004d8 <__aeabi_dmul>
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4689      	mov	r9, r1
 800b0c0:	f035 050f 	bics.w	r5, r5, #15
 800b0c4:	d04d      	beq.n	800b162 <_strtod_l+0x50a>
 800b0c6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b0ca:	dd22      	ble.n	800b112 <_strtod_l+0x4ba>
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	46b3      	mov	fp, r6
 800b0d0:	960b      	str	r6, [sp, #44]	; 0x2c
 800b0d2:	9608      	str	r6, [sp, #32]
 800b0d4:	2322      	movs	r3, #34	; 0x22
 800b0d6:	f04f 0800 	mov.w	r8, #0
 800b0da:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b1d4 <_strtod_l+0x57c>
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f43f adf1 	beq.w	800acca <_strtod_l+0x72>
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b0ec:	f7ff f934 	bl	800a358 <_Bfree>
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	9908      	ldr	r1, [sp, #32]
 800b0f4:	f7ff f930 	bl	800a358 <_Bfree>
 800b0f8:	4659      	mov	r1, fp
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f7ff f92c 	bl	800a358 <_Bfree>
 800b100:	4620      	mov	r0, r4
 800b102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b104:	f7ff f928 	bl	800a358 <_Bfree>
 800b108:	4631      	mov	r1, r6
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7ff f924 	bl	800a358 <_Bfree>
 800b110:	e5db      	b.n	800acca <_strtod_l+0x72>
 800b112:	4b33      	ldr	r3, [pc, #204]	; (800b1e0 <_strtod_l+0x588>)
 800b114:	4640      	mov	r0, r8
 800b116:	9305      	str	r3, [sp, #20]
 800b118:	2300      	movs	r3, #0
 800b11a:	4649      	mov	r1, r9
 800b11c:	469a      	mov	sl, r3
 800b11e:	112d      	asrs	r5, r5, #4
 800b120:	2d01      	cmp	r5, #1
 800b122:	dc21      	bgt.n	800b168 <_strtod_l+0x510>
 800b124:	b10b      	cbz	r3, 800b12a <_strtod_l+0x4d2>
 800b126:	4680      	mov	r8, r0
 800b128:	4689      	mov	r9, r1
 800b12a:	492d      	ldr	r1, [pc, #180]	; (800b1e0 <_strtod_l+0x588>)
 800b12c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b130:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b134:	4642      	mov	r2, r8
 800b136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b13a:	464b      	mov	r3, r9
 800b13c:	f7f5 f9cc 	bl	80004d8 <__aeabi_dmul>
 800b140:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <_strtod_l+0x57c>)
 800b142:	460a      	mov	r2, r1
 800b144:	400b      	ands	r3, r1
 800b146:	4927      	ldr	r1, [pc, #156]	; (800b1e4 <_strtod_l+0x58c>)
 800b148:	4680      	mov	r8, r0
 800b14a:	428b      	cmp	r3, r1
 800b14c:	d8be      	bhi.n	800b0cc <_strtod_l+0x474>
 800b14e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b152:	428b      	cmp	r3, r1
 800b154:	bf86      	itte	hi
 800b156:	f04f 38ff 	movhi.w	r8, #4294967295
 800b15a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b1e8 <_strtod_l+0x590>
 800b15e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b162:	2300      	movs	r3, #0
 800b164:	9305      	str	r3, [sp, #20]
 800b166:	e07b      	b.n	800b260 <_strtod_l+0x608>
 800b168:	07ea      	lsls	r2, r5, #31
 800b16a:	d505      	bpl.n	800b178 <_strtod_l+0x520>
 800b16c:	9b05      	ldr	r3, [sp, #20]
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	f7f5 f9b1 	bl	80004d8 <__aeabi_dmul>
 800b176:	2301      	movs	r3, #1
 800b178:	9a05      	ldr	r2, [sp, #20]
 800b17a:	f10a 0a01 	add.w	sl, sl, #1
 800b17e:	3208      	adds	r2, #8
 800b180:	106d      	asrs	r5, r5, #1
 800b182:	9205      	str	r2, [sp, #20]
 800b184:	e7cc      	b.n	800b120 <_strtod_l+0x4c8>
 800b186:	d0ec      	beq.n	800b162 <_strtod_l+0x50a>
 800b188:	426d      	negs	r5, r5
 800b18a:	f015 020f 	ands.w	r2, r5, #15
 800b18e:	d00a      	beq.n	800b1a6 <_strtod_l+0x54e>
 800b190:	4b12      	ldr	r3, [pc, #72]	; (800b1dc <_strtod_l+0x584>)
 800b192:	4640      	mov	r0, r8
 800b194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b198:	4649      	mov	r1, r9
 800b19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19e:	f7f5 fac5 	bl	800072c <__aeabi_ddiv>
 800b1a2:	4680      	mov	r8, r0
 800b1a4:	4689      	mov	r9, r1
 800b1a6:	112d      	asrs	r5, r5, #4
 800b1a8:	d0db      	beq.n	800b162 <_strtod_l+0x50a>
 800b1aa:	2d1f      	cmp	r5, #31
 800b1ac:	dd1e      	ble.n	800b1ec <_strtod_l+0x594>
 800b1ae:	2600      	movs	r6, #0
 800b1b0:	46b3      	mov	fp, r6
 800b1b2:	960b      	str	r6, [sp, #44]	; 0x2c
 800b1b4:	9608      	str	r6, [sp, #32]
 800b1b6:	2322      	movs	r3, #34	; 0x22
 800b1b8:	f04f 0800 	mov.w	r8, #0
 800b1bc:	f04f 0900 	mov.w	r9, #0
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	e78d      	b.n	800b0e0 <_strtod_l+0x488>
 800b1c4:	0800cc37 	.word	0x0800cc37
 800b1c8:	0800ce64 	.word	0x0800ce64
 800b1cc:	0800cc2f 	.word	0x0800cc2f
 800b1d0:	0800cc66 	.word	0x0800cc66
 800b1d4:	7ff00000 	.word	0x7ff00000
 800b1d8:	0800cff5 	.word	0x0800cff5
 800b1dc:	0800cd78 	.word	0x0800cd78
 800b1e0:	0800cd50 	.word	0x0800cd50
 800b1e4:	7ca00000 	.word	0x7ca00000
 800b1e8:	7fefffff 	.word	0x7fefffff
 800b1ec:	f015 0310 	ands.w	r3, r5, #16
 800b1f0:	bf18      	it	ne
 800b1f2:	236a      	movne	r3, #106	; 0x6a
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	9305      	str	r3, [sp, #20]
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b4c8 <_strtod_l+0x870>
 800b200:	07ea      	lsls	r2, r5, #31
 800b202:	d504      	bpl.n	800b20e <_strtod_l+0x5b6>
 800b204:	e9da 2300 	ldrd	r2, r3, [sl]
 800b208:	f7f5 f966 	bl	80004d8 <__aeabi_dmul>
 800b20c:	2301      	movs	r3, #1
 800b20e:	106d      	asrs	r5, r5, #1
 800b210:	f10a 0a08 	add.w	sl, sl, #8
 800b214:	d1f4      	bne.n	800b200 <_strtod_l+0x5a8>
 800b216:	b10b      	cbz	r3, 800b21c <_strtod_l+0x5c4>
 800b218:	4680      	mov	r8, r0
 800b21a:	4689      	mov	r9, r1
 800b21c:	9b05      	ldr	r3, [sp, #20]
 800b21e:	b1bb      	cbz	r3, 800b250 <_strtod_l+0x5f8>
 800b220:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b224:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b228:	2b00      	cmp	r3, #0
 800b22a:	4649      	mov	r1, r9
 800b22c:	dd10      	ble.n	800b250 <_strtod_l+0x5f8>
 800b22e:	2b1f      	cmp	r3, #31
 800b230:	f340 8128 	ble.w	800b484 <_strtod_l+0x82c>
 800b234:	2b34      	cmp	r3, #52	; 0x34
 800b236:	bfd8      	it	le
 800b238:	f04f 33ff 	movle.w	r3, #4294967295
 800b23c:	f04f 0800 	mov.w	r8, #0
 800b240:	bfcf      	iteee	gt
 800b242:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b246:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b24a:	4093      	lslle	r3, r2
 800b24c:	ea03 0901 	andle.w	r9, r3, r1
 800b250:	2200      	movs	r2, #0
 800b252:	2300      	movs	r3, #0
 800b254:	4640      	mov	r0, r8
 800b256:	4649      	mov	r1, r9
 800b258:	f7f5 fba6 	bl	80009a8 <__aeabi_dcmpeq>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d1a6      	bne.n	800b1ae <_strtod_l+0x556>
 800b260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b262:	465a      	mov	r2, fp
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	4620      	mov	r0, r4
 800b268:	4633      	mov	r3, r6
 800b26a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b26c:	f7ff f8dc 	bl	800a428 <__s2b>
 800b270:	900b      	str	r0, [sp, #44]	; 0x2c
 800b272:	2800      	cmp	r0, #0
 800b274:	f43f af2a 	beq.w	800b0cc <_strtod_l+0x474>
 800b278:	2600      	movs	r6, #0
 800b27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b27c:	9b08      	ldr	r3, [sp, #32]
 800b27e:	2a00      	cmp	r2, #0
 800b280:	eba3 0307 	sub.w	r3, r3, r7
 800b284:	bfa8      	it	ge
 800b286:	2300      	movge	r3, #0
 800b288:	46b3      	mov	fp, r6
 800b28a:	9312      	str	r3, [sp, #72]	; 0x48
 800b28c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b290:	9316      	str	r3, [sp, #88]	; 0x58
 800b292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b294:	4620      	mov	r0, r4
 800b296:	6859      	ldr	r1, [r3, #4]
 800b298:	f7ff f81e 	bl	800a2d8 <_Balloc>
 800b29c:	9008      	str	r0, [sp, #32]
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f43f af18 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a6:	300c      	adds	r0, #12
 800b2a8:	691a      	ldr	r2, [r3, #16]
 800b2aa:	f103 010c 	add.w	r1, r3, #12
 800b2ae:	3202      	adds	r2, #2
 800b2b0:	0092      	lsls	r2, r2, #2
 800b2b2:	f7fe f894 	bl	80093de <memcpy>
 800b2b6:	ab1c      	add	r3, sp, #112	; 0x70
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	ab1b      	add	r3, sp, #108	; 0x6c
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	4642      	mov	r2, r8
 800b2c0:	464b      	mov	r3, r9
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b2c8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b2cc:	f7ff fbd8 	bl	800aa80 <__d2b>
 800b2d0:	901a      	str	r0, [sp, #104]	; 0x68
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	f43f aefe 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b2d8:	2101      	movs	r1, #1
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7ff f93c 	bl	800a558 <__i2b>
 800b2e0:	4683      	mov	fp, r0
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	f43f aef6 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b2e8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b2ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b2ec:	2f00      	cmp	r7, #0
 800b2ee:	bfab      	itete	ge
 800b2f0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800b2f2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b2f4:	eb07 0a03 	addge.w	sl, r7, r3
 800b2f8:	1bdd      	sublt	r5, r3, r7
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	bfa8      	it	ge
 800b2fe:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b300:	eba7 0703 	sub.w	r7, r7, r3
 800b304:	4417      	add	r7, r2
 800b306:	4b71      	ldr	r3, [pc, #452]	; (800b4cc <_strtod_l+0x874>)
 800b308:	f107 37ff 	add.w	r7, r7, #4294967295
 800b30c:	bfb8      	it	lt
 800b30e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b312:	429f      	cmp	r7, r3
 800b314:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b318:	f280 80c7 	bge.w	800b4aa <_strtod_l+0x852>
 800b31c:	1bdb      	subs	r3, r3, r7
 800b31e:	2b1f      	cmp	r3, #31
 800b320:	f04f 0101 	mov.w	r1, #1
 800b324:	eba2 0203 	sub.w	r2, r2, r3
 800b328:	f300 80b3 	bgt.w	800b492 <_strtod_l+0x83a>
 800b32c:	fa01 f303 	lsl.w	r3, r1, r3
 800b330:	9313      	str	r3, [sp, #76]	; 0x4c
 800b332:	2300      	movs	r3, #0
 800b334:	9310      	str	r3, [sp, #64]	; 0x40
 800b336:	eb0a 0702 	add.w	r7, sl, r2
 800b33a:	9b05      	ldr	r3, [sp, #20]
 800b33c:	45ba      	cmp	sl, r7
 800b33e:	4415      	add	r5, r2
 800b340:	441d      	add	r5, r3
 800b342:	4653      	mov	r3, sl
 800b344:	bfa8      	it	ge
 800b346:	463b      	movge	r3, r7
 800b348:	42ab      	cmp	r3, r5
 800b34a:	bfa8      	it	ge
 800b34c:	462b      	movge	r3, r5
 800b34e:	2b00      	cmp	r3, #0
 800b350:	bfc2      	ittt	gt
 800b352:	1aff      	subgt	r7, r7, r3
 800b354:	1aed      	subgt	r5, r5, r3
 800b356:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b35a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	dd17      	ble.n	800b390 <_strtod_l+0x738>
 800b360:	4659      	mov	r1, fp
 800b362:	461a      	mov	r2, r3
 800b364:	4620      	mov	r0, r4
 800b366:	f7ff f9b5 	bl	800a6d4 <__pow5mult>
 800b36a:	4683      	mov	fp, r0
 800b36c:	2800      	cmp	r0, #0
 800b36e:	f43f aeb1 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b372:	4601      	mov	r1, r0
 800b374:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b376:	4620      	mov	r0, r4
 800b378:	f7ff f904 	bl	800a584 <__multiply>
 800b37c:	900a      	str	r0, [sp, #40]	; 0x28
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f aea8 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b384:	4620      	mov	r0, r4
 800b386:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b388:	f7fe ffe6 	bl	800a358 <_Bfree>
 800b38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b38e:	931a      	str	r3, [sp, #104]	; 0x68
 800b390:	2f00      	cmp	r7, #0
 800b392:	f300 808f 	bgt.w	800b4b4 <_strtod_l+0x85c>
 800b396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dd08      	ble.n	800b3ae <_strtod_l+0x756>
 800b39c:	4620      	mov	r0, r4
 800b39e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3a0:	9908      	ldr	r1, [sp, #32]
 800b3a2:	f7ff f997 	bl	800a6d4 <__pow5mult>
 800b3a6:	9008      	str	r0, [sp, #32]
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	f43f ae93 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b3ae:	2d00      	cmp	r5, #0
 800b3b0:	dd08      	ble.n	800b3c4 <_strtod_l+0x76c>
 800b3b2:	462a      	mov	r2, r5
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	9908      	ldr	r1, [sp, #32]
 800b3b8:	f7ff f9e6 	bl	800a788 <__lshift>
 800b3bc:	9008      	str	r0, [sp, #32]
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f43f ae88 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b3c4:	f1ba 0f00 	cmp.w	sl, #0
 800b3c8:	dd08      	ble.n	800b3dc <_strtod_l+0x784>
 800b3ca:	4659      	mov	r1, fp
 800b3cc:	4652      	mov	r2, sl
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f7ff f9da 	bl	800a788 <__lshift>
 800b3d4:	4683      	mov	fp, r0
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f43f ae7c 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b3dc:	4620      	mov	r0, r4
 800b3de:	9a08      	ldr	r2, [sp, #32]
 800b3e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3e2:	f7ff fa59 	bl	800a898 <__mdiff>
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	f43f ae73 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b3ee:	2500      	movs	r5, #0
 800b3f0:	68c3      	ldr	r3, [r0, #12]
 800b3f2:	4659      	mov	r1, fp
 800b3f4:	60c5      	str	r5, [r0, #12]
 800b3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3f8:	f7ff fa32 	bl	800a860 <__mcmp>
 800b3fc:	42a8      	cmp	r0, r5
 800b3fe:	da6b      	bge.n	800b4d8 <_strtod_l+0x880>
 800b400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b402:	ea53 0308 	orrs.w	r3, r3, r8
 800b406:	f040 808f 	bne.w	800b528 <_strtod_l+0x8d0>
 800b40a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f040 808a 	bne.w	800b528 <_strtod_l+0x8d0>
 800b414:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b418:	0d1b      	lsrs	r3, r3, #20
 800b41a:	051b      	lsls	r3, r3, #20
 800b41c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b420:	f240 8082 	bls.w	800b528 <_strtod_l+0x8d0>
 800b424:	6973      	ldr	r3, [r6, #20]
 800b426:	b913      	cbnz	r3, 800b42e <_strtod_l+0x7d6>
 800b428:	6933      	ldr	r3, [r6, #16]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	dd7c      	ble.n	800b528 <_strtod_l+0x8d0>
 800b42e:	4631      	mov	r1, r6
 800b430:	2201      	movs	r2, #1
 800b432:	4620      	mov	r0, r4
 800b434:	f7ff f9a8 	bl	800a788 <__lshift>
 800b438:	4659      	mov	r1, fp
 800b43a:	4606      	mov	r6, r0
 800b43c:	f7ff fa10 	bl	800a860 <__mcmp>
 800b440:	2800      	cmp	r0, #0
 800b442:	dd71      	ble.n	800b528 <_strtod_l+0x8d0>
 800b444:	9905      	ldr	r1, [sp, #20]
 800b446:	464b      	mov	r3, r9
 800b448:	4a21      	ldr	r2, [pc, #132]	; (800b4d0 <_strtod_l+0x878>)
 800b44a:	2900      	cmp	r1, #0
 800b44c:	f000 808d 	beq.w	800b56a <_strtod_l+0x912>
 800b450:	ea02 0109 	and.w	r1, r2, r9
 800b454:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b458:	f300 8087 	bgt.w	800b56a <_strtod_l+0x912>
 800b45c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b460:	f77f aea9 	ble.w	800b1b6 <_strtod_l+0x55e>
 800b464:	4640      	mov	r0, r8
 800b466:	4649      	mov	r1, r9
 800b468:	4b1a      	ldr	r3, [pc, #104]	; (800b4d4 <_strtod_l+0x87c>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	f7f5 f834 	bl	80004d8 <__aeabi_dmul>
 800b470:	4b17      	ldr	r3, [pc, #92]	; (800b4d0 <_strtod_l+0x878>)
 800b472:	4680      	mov	r8, r0
 800b474:	400b      	ands	r3, r1
 800b476:	4689      	mov	r9, r1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f47f ae35 	bne.w	800b0e8 <_strtod_l+0x490>
 800b47e:	2322      	movs	r3, #34	; 0x22
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	e631      	b.n	800b0e8 <_strtod_l+0x490>
 800b484:	f04f 32ff 	mov.w	r2, #4294967295
 800b488:	fa02 f303 	lsl.w	r3, r2, r3
 800b48c:	ea03 0808 	and.w	r8, r3, r8
 800b490:	e6de      	b.n	800b250 <_strtod_l+0x5f8>
 800b492:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b496:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b49a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b49e:	37e2      	adds	r7, #226	; 0xe2
 800b4a0:	fa01 f307 	lsl.w	r3, r1, r7
 800b4a4:	9310      	str	r3, [sp, #64]	; 0x40
 800b4a6:	9113      	str	r1, [sp, #76]	; 0x4c
 800b4a8:	e745      	b.n	800b336 <_strtod_l+0x6de>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	9310      	str	r3, [sp, #64]	; 0x40
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b4b2:	e740      	b.n	800b336 <_strtod_l+0x6de>
 800b4b4:	463a      	mov	r2, r7
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b4ba:	f7ff f965 	bl	800a788 <__lshift>
 800b4be:	901a      	str	r0, [sp, #104]	; 0x68
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	f47f af68 	bne.w	800b396 <_strtod_l+0x73e>
 800b4c6:	e605      	b.n	800b0d4 <_strtod_l+0x47c>
 800b4c8:	0800ce78 	.word	0x0800ce78
 800b4cc:	fffffc02 	.word	0xfffffc02
 800b4d0:	7ff00000 	.word	0x7ff00000
 800b4d4:	39500000 	.word	0x39500000
 800b4d8:	46ca      	mov	sl, r9
 800b4da:	d165      	bne.n	800b5a8 <_strtod_l+0x950>
 800b4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4e2:	b352      	cbz	r2, 800b53a <_strtod_l+0x8e2>
 800b4e4:	4a9e      	ldr	r2, [pc, #632]	; (800b760 <_strtod_l+0xb08>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d12a      	bne.n	800b540 <_strtod_l+0x8e8>
 800b4ea:	9b05      	ldr	r3, [sp, #20]
 800b4ec:	4641      	mov	r1, r8
 800b4ee:	b1fb      	cbz	r3, 800b530 <_strtod_l+0x8d8>
 800b4f0:	4b9c      	ldr	r3, [pc, #624]	; (800b764 <_strtod_l+0xb0c>)
 800b4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f6:	ea09 0303 	and.w	r3, r9, r3
 800b4fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b4fe:	d81a      	bhi.n	800b536 <_strtod_l+0x8de>
 800b500:	0d1b      	lsrs	r3, r3, #20
 800b502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b506:	fa02 f303 	lsl.w	r3, r2, r3
 800b50a:	4299      	cmp	r1, r3
 800b50c:	d118      	bne.n	800b540 <_strtod_l+0x8e8>
 800b50e:	4b96      	ldr	r3, [pc, #600]	; (800b768 <_strtod_l+0xb10>)
 800b510:	459a      	cmp	sl, r3
 800b512:	d102      	bne.n	800b51a <_strtod_l+0x8c2>
 800b514:	3101      	adds	r1, #1
 800b516:	f43f addd 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b51a:	f04f 0800 	mov.w	r8, #0
 800b51e:	4b91      	ldr	r3, [pc, #580]	; (800b764 <_strtod_l+0xb0c>)
 800b520:	ea0a 0303 	and.w	r3, sl, r3
 800b524:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b528:	9b05      	ldr	r3, [sp, #20]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d19a      	bne.n	800b464 <_strtod_l+0x80c>
 800b52e:	e5db      	b.n	800b0e8 <_strtod_l+0x490>
 800b530:	f04f 33ff 	mov.w	r3, #4294967295
 800b534:	e7e9      	b.n	800b50a <_strtod_l+0x8b2>
 800b536:	4613      	mov	r3, r2
 800b538:	e7e7      	b.n	800b50a <_strtod_l+0x8b2>
 800b53a:	ea53 0308 	orrs.w	r3, r3, r8
 800b53e:	d081      	beq.n	800b444 <_strtod_l+0x7ec>
 800b540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b542:	b1e3      	cbz	r3, 800b57e <_strtod_l+0x926>
 800b544:	ea13 0f0a 	tst.w	r3, sl
 800b548:	d0ee      	beq.n	800b528 <_strtod_l+0x8d0>
 800b54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	9a05      	ldr	r2, [sp, #20]
 800b552:	b1c3      	cbz	r3, 800b586 <_strtod_l+0x92e>
 800b554:	f7ff fb5c 	bl	800ac10 <sulp>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b55e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b560:	f7f4 fe04 	bl	800016c <__adddf3>
 800b564:	4680      	mov	r8, r0
 800b566:	4689      	mov	r9, r1
 800b568:	e7de      	b.n	800b528 <_strtod_l+0x8d0>
 800b56a:	4013      	ands	r3, r2
 800b56c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b570:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b574:	f04f 38ff 	mov.w	r8, #4294967295
 800b578:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b57c:	e7d4      	b.n	800b528 <_strtod_l+0x8d0>
 800b57e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b580:	ea13 0f08 	tst.w	r3, r8
 800b584:	e7e0      	b.n	800b548 <_strtod_l+0x8f0>
 800b586:	f7ff fb43 	bl	800ac10 <sulp>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b590:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b592:	f7f4 fde9 	bl	8000168 <__aeabi_dsub>
 800b596:	2200      	movs	r2, #0
 800b598:	2300      	movs	r3, #0
 800b59a:	4680      	mov	r8, r0
 800b59c:	4689      	mov	r9, r1
 800b59e:	f7f5 fa03 	bl	80009a8 <__aeabi_dcmpeq>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d0c0      	beq.n	800b528 <_strtod_l+0x8d0>
 800b5a6:	e606      	b.n	800b1b6 <_strtod_l+0x55e>
 800b5a8:	4659      	mov	r1, fp
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff fabe 	bl	800ab2c <__ratio>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5be:	f7f5 fa07 	bl	80009d0 <__aeabi_dcmple>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d06f      	beq.n	800b6a6 <_strtod_l+0xa4e>
 800b5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d17c      	bne.n	800b6c6 <_strtod_l+0xa6e>
 800b5cc:	f1b8 0f00 	cmp.w	r8, #0
 800b5d0:	d159      	bne.n	800b686 <_strtod_l+0xa2e>
 800b5d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d17b      	bne.n	800b6d2 <_strtod_l+0xa7a>
 800b5da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5de:	2200      	movs	r2, #0
 800b5e0:	4b62      	ldr	r3, [pc, #392]	; (800b76c <_strtod_l+0xb14>)
 800b5e2:	f7f5 f9eb 	bl	80009bc <__aeabi_dcmplt>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d15a      	bne.n	800b6a0 <_strtod_l+0xa48>
 800b5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	4b5f      	ldr	r3, [pc, #380]	; (800b770 <_strtod_l+0xb18>)
 800b5f2:	f7f4 ff71 	bl	80004d8 <__aeabi_dmul>
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b5fe:	9506      	str	r5, [sp, #24]
 800b600:	9307      	str	r3, [sp, #28]
 800b602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b606:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b60a:	4b56      	ldr	r3, [pc, #344]	; (800b764 <_strtod_l+0xb0c>)
 800b60c:	4a55      	ldr	r2, [pc, #340]	; (800b764 <_strtod_l+0xb0c>)
 800b60e:	ea0a 0303 	and.w	r3, sl, r3
 800b612:	9313      	str	r3, [sp, #76]	; 0x4c
 800b614:	4b57      	ldr	r3, [pc, #348]	; (800b774 <_strtod_l+0xb1c>)
 800b616:	ea0a 0202 	and.w	r2, sl, r2
 800b61a:	429a      	cmp	r2, r3
 800b61c:	f040 80b0 	bne.w	800b780 <_strtod_l+0xb28>
 800b620:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b624:	4640      	mov	r0, r8
 800b626:	4649      	mov	r1, r9
 800b628:	f7ff f9c2 	bl	800a9b0 <__ulp>
 800b62c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b630:	f7f4 ff52 	bl	80004d8 <__aeabi_dmul>
 800b634:	4642      	mov	r2, r8
 800b636:	464b      	mov	r3, r9
 800b638:	f7f4 fd98 	bl	800016c <__adddf3>
 800b63c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b764 <_strtod_l+0xb0c>
 800b640:	4a4d      	ldr	r2, [pc, #308]	; (800b778 <_strtod_l+0xb20>)
 800b642:	ea01 0a0a 	and.w	sl, r1, sl
 800b646:	4592      	cmp	sl, r2
 800b648:	4680      	mov	r8, r0
 800b64a:	d948      	bls.n	800b6de <_strtod_l+0xa86>
 800b64c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b64e:	4b46      	ldr	r3, [pc, #280]	; (800b768 <_strtod_l+0xb10>)
 800b650:	429a      	cmp	r2, r3
 800b652:	d103      	bne.n	800b65c <_strtod_l+0xa04>
 800b654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b656:	3301      	adds	r3, #1
 800b658:	f43f ad3c 	beq.w	800b0d4 <_strtod_l+0x47c>
 800b65c:	f04f 38ff 	mov.w	r8, #4294967295
 800b660:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b768 <_strtod_l+0xb10>
 800b664:	4620      	mov	r0, r4
 800b666:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b668:	f7fe fe76 	bl	800a358 <_Bfree>
 800b66c:	4620      	mov	r0, r4
 800b66e:	9908      	ldr	r1, [sp, #32]
 800b670:	f7fe fe72 	bl	800a358 <_Bfree>
 800b674:	4659      	mov	r1, fp
 800b676:	4620      	mov	r0, r4
 800b678:	f7fe fe6e 	bl	800a358 <_Bfree>
 800b67c:	4631      	mov	r1, r6
 800b67e:	4620      	mov	r0, r4
 800b680:	f7fe fe6a 	bl	800a358 <_Bfree>
 800b684:	e605      	b.n	800b292 <_strtod_l+0x63a>
 800b686:	f1b8 0f01 	cmp.w	r8, #1
 800b68a:	d103      	bne.n	800b694 <_strtod_l+0xa3c>
 800b68c:	f1b9 0f00 	cmp.w	r9, #0
 800b690:	f43f ad91 	beq.w	800b1b6 <_strtod_l+0x55e>
 800b694:	2200      	movs	r2, #0
 800b696:	4b39      	ldr	r3, [pc, #228]	; (800b77c <_strtod_l+0xb24>)
 800b698:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b69a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b69e:	e016      	b.n	800b6ce <_strtod_l+0xa76>
 800b6a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b6a2:	4f33      	ldr	r7, [pc, #204]	; (800b770 <_strtod_l+0xb18>)
 800b6a4:	e7a9      	b.n	800b5fa <_strtod_l+0x9a2>
 800b6a6:	4b32      	ldr	r3, [pc, #200]	; (800b770 <_strtod_l+0xb18>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6ae:	f7f4 ff13 	bl	80004d8 <__aeabi_dmul>
 800b6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d09e      	beq.n	800b5fa <_strtod_l+0x9a2>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6c4:	e79d      	b.n	800b602 <_strtod_l+0x9aa>
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4b28      	ldr	r3, [pc, #160]	; (800b76c <_strtod_l+0xb14>)
 800b6ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6ce:	4f27      	ldr	r7, [pc, #156]	; (800b76c <_strtod_l+0xb14>)
 800b6d0:	e797      	b.n	800b602 <_strtod_l+0x9aa>
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	4b29      	ldr	r3, [pc, #164]	; (800b77c <_strtod_l+0xb24>)
 800b6d6:	4645      	mov	r5, r8
 800b6d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6dc:	e7f7      	b.n	800b6ce <_strtod_l+0xa76>
 800b6de:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b6e2:	9b05      	ldr	r3, [sp, #20]
 800b6e4:	46ca      	mov	sl, r9
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1bc      	bne.n	800b664 <_strtod_l+0xa0c>
 800b6ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b6f0:	0d1b      	lsrs	r3, r3, #20
 800b6f2:	051b      	lsls	r3, r3, #20
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d1b5      	bne.n	800b664 <_strtod_l+0xa0c>
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	f7f5 fc92 	bl	8001024 <__aeabi_d2lz>
 800b700:	f7f4 febc 	bl	800047c <__aeabi_l2d>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4628      	mov	r0, r5
 800b70a:	4639      	mov	r1, r7
 800b70c:	f7f4 fd2c 	bl	8000168 <__aeabi_dsub>
 800b710:	460b      	mov	r3, r1
 800b712:	4602      	mov	r2, r0
 800b714:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b718:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71e:	ea4a 0a08 	orr.w	sl, sl, r8
 800b722:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b726:	d06c      	beq.n	800b802 <_strtod_l+0xbaa>
 800b728:	a309      	add	r3, pc, #36	; (adr r3, 800b750 <_strtod_l+0xaf8>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f5 f945 	bl	80009bc <__aeabi_dcmplt>
 800b732:	2800      	cmp	r0, #0
 800b734:	f47f acd8 	bne.w	800b0e8 <_strtod_l+0x490>
 800b738:	a307      	add	r3, pc, #28	; (adr r3, 800b758 <_strtod_l+0xb00>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b742:	f7f5 f959 	bl	80009f8 <__aeabi_dcmpgt>
 800b746:	2800      	cmp	r0, #0
 800b748:	d08c      	beq.n	800b664 <_strtod_l+0xa0c>
 800b74a:	e4cd      	b.n	800b0e8 <_strtod_l+0x490>
 800b74c:	f3af 8000 	nop.w
 800b750:	94a03595 	.word	0x94a03595
 800b754:	3fdfffff 	.word	0x3fdfffff
 800b758:	35afe535 	.word	0x35afe535
 800b75c:	3fe00000 	.word	0x3fe00000
 800b760:	000fffff 	.word	0x000fffff
 800b764:	7ff00000 	.word	0x7ff00000
 800b768:	7fefffff 	.word	0x7fefffff
 800b76c:	3ff00000 	.word	0x3ff00000
 800b770:	3fe00000 	.word	0x3fe00000
 800b774:	7fe00000 	.word	0x7fe00000
 800b778:	7c9fffff 	.word	0x7c9fffff
 800b77c:	bff00000 	.word	0xbff00000
 800b780:	9b05      	ldr	r3, [sp, #20]
 800b782:	b333      	cbz	r3, 800b7d2 <_strtod_l+0xb7a>
 800b784:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b786:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b78a:	d822      	bhi.n	800b7d2 <_strtod_l+0xb7a>
 800b78c:	a328      	add	r3, pc, #160	; (adr r3, 800b830 <_strtod_l+0xbd8>)
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	4628      	mov	r0, r5
 800b794:	4639      	mov	r1, r7
 800b796:	f7f5 f91b 	bl	80009d0 <__aeabi_dcmple>
 800b79a:	b1a0      	cbz	r0, 800b7c6 <_strtod_l+0xb6e>
 800b79c:	4639      	mov	r1, r7
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7f5 f972 	bl	8000a88 <__aeabi_d2uiz>
 800b7a4:	2801      	cmp	r0, #1
 800b7a6:	bf38      	it	cc
 800b7a8:	2001      	movcc	r0, #1
 800b7aa:	f7f4 fe1b 	bl	80003e4 <__aeabi_ui2d>
 800b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	460f      	mov	r7, r1
 800b7b4:	bb03      	cbnz	r3, 800b7f8 <_strtod_l+0xba0>
 800b7b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ba:	9014      	str	r0, [sp, #80]	; 0x50
 800b7bc:	9315      	str	r3, [sp, #84]	; 0x54
 800b7be:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7c2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b7c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7ca:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b7ce:	1a9b      	subs	r3, r3, r2
 800b7d0:	9311      	str	r3, [sp, #68]	; 0x44
 800b7d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b7d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b7d6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b7da:	f7ff f8e9 	bl	800a9b0 <__ulp>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	f7f4 fe77 	bl	80004d8 <__aeabi_dmul>
 800b7ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7ee:	f7f4 fcbd 	bl	800016c <__adddf3>
 800b7f2:	4680      	mov	r8, r0
 800b7f4:	4689      	mov	r9, r1
 800b7f6:	e774      	b.n	800b6e2 <_strtod_l+0xa8a>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b800:	e7dd      	b.n	800b7be <_strtod_l+0xb66>
 800b802:	a30d      	add	r3, pc, #52	; (adr r3, 800b838 <_strtod_l+0xbe0>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f5 f8d8 	bl	80009bc <__aeabi_dcmplt>
 800b80c:	e79b      	b.n	800b746 <_strtod_l+0xaee>
 800b80e:	2300      	movs	r3, #0
 800b810:	930e      	str	r3, [sp, #56]	; 0x38
 800b812:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b814:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	f7ff ba5b 	b.w	800acd2 <_strtod_l+0x7a>
 800b81c:	2a65      	cmp	r2, #101	; 0x65
 800b81e:	f43f ab52 	beq.w	800aec6 <_strtod_l+0x26e>
 800b822:	2a45      	cmp	r2, #69	; 0x45
 800b824:	f43f ab4f 	beq.w	800aec6 <_strtod_l+0x26e>
 800b828:	2301      	movs	r3, #1
 800b82a:	f7ff bb87 	b.w	800af3c <_strtod_l+0x2e4>
 800b82e:	bf00      	nop
 800b830:	ffc00000 	.word	0xffc00000
 800b834:	41dfffff 	.word	0x41dfffff
 800b838:	94a03595 	.word	0x94a03595
 800b83c:	3fcfffff 	.word	0x3fcfffff

0800b840 <_strtod_r>:
 800b840:	4b01      	ldr	r3, [pc, #4]	; (800b848 <_strtod_r+0x8>)
 800b842:	f7ff ba09 	b.w	800ac58 <_strtod_l>
 800b846:	bf00      	nop
 800b848:	2000006c 	.word	0x2000006c

0800b84c <_strtol_l.constprop.0>:
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b852:	4686      	mov	lr, r0
 800b854:	4690      	mov	r8, r2
 800b856:	d001      	beq.n	800b85c <_strtol_l.constprop.0+0x10>
 800b858:	2b24      	cmp	r3, #36	; 0x24
 800b85a:	d906      	bls.n	800b86a <_strtol_l.constprop.0+0x1e>
 800b85c:	f7fd fd84 	bl	8009368 <__errno>
 800b860:	2316      	movs	r3, #22
 800b862:	6003      	str	r3, [r0, #0]
 800b864:	2000      	movs	r0, #0
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	460d      	mov	r5, r1
 800b86c:	4835      	ldr	r0, [pc, #212]	; (800b944 <_strtol_l.constprop.0+0xf8>)
 800b86e:	462a      	mov	r2, r5
 800b870:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b874:	5d06      	ldrb	r6, [r0, r4]
 800b876:	f016 0608 	ands.w	r6, r6, #8
 800b87a:	d1f8      	bne.n	800b86e <_strtol_l.constprop.0+0x22>
 800b87c:	2c2d      	cmp	r4, #45	; 0x2d
 800b87e:	d12e      	bne.n	800b8de <_strtol_l.constprop.0+0x92>
 800b880:	2601      	movs	r6, #1
 800b882:	782c      	ldrb	r4, [r5, #0]
 800b884:	1c95      	adds	r5, r2, #2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d057      	beq.n	800b93a <_strtol_l.constprop.0+0xee>
 800b88a:	2b10      	cmp	r3, #16
 800b88c:	d109      	bne.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b88e:	2c30      	cmp	r4, #48	; 0x30
 800b890:	d107      	bne.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b892:	782a      	ldrb	r2, [r5, #0]
 800b894:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b898:	2a58      	cmp	r2, #88	; 0x58
 800b89a:	d149      	bne.n	800b930 <_strtol_l.constprop.0+0xe4>
 800b89c:	2310      	movs	r3, #16
 800b89e:	786c      	ldrb	r4, [r5, #1]
 800b8a0:	3502      	adds	r5, #2
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b8a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8ac:	fbbc f9f3 	udiv	r9, ip, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	fb03 ca19 	mls	sl, r3, r9, ip
 800b8b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b8ba:	2f09      	cmp	r7, #9
 800b8bc:	d814      	bhi.n	800b8e8 <_strtol_l.constprop.0+0x9c>
 800b8be:	463c      	mov	r4, r7
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	dd20      	ble.n	800b906 <_strtol_l.constprop.0+0xba>
 800b8c4:	1c57      	adds	r7, r2, #1
 800b8c6:	d007      	beq.n	800b8d8 <_strtol_l.constprop.0+0x8c>
 800b8c8:	4581      	cmp	r9, r0
 800b8ca:	d319      	bcc.n	800b900 <_strtol_l.constprop.0+0xb4>
 800b8cc:	d101      	bne.n	800b8d2 <_strtol_l.constprop.0+0x86>
 800b8ce:	45a2      	cmp	sl, r4
 800b8d0:	db16      	blt.n	800b900 <_strtol_l.constprop.0+0xb4>
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	fb00 4003 	mla	r0, r0, r3, r4
 800b8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8dc:	e7eb      	b.n	800b8b6 <_strtol_l.constprop.0+0x6a>
 800b8de:	2c2b      	cmp	r4, #43	; 0x2b
 800b8e0:	bf04      	itt	eq
 800b8e2:	782c      	ldrbeq	r4, [r5, #0]
 800b8e4:	1c95      	addeq	r5, r2, #2
 800b8e6:	e7ce      	b.n	800b886 <_strtol_l.constprop.0+0x3a>
 800b8e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b8ec:	2f19      	cmp	r7, #25
 800b8ee:	d801      	bhi.n	800b8f4 <_strtol_l.constprop.0+0xa8>
 800b8f0:	3c37      	subs	r4, #55	; 0x37
 800b8f2:	e7e5      	b.n	800b8c0 <_strtol_l.constprop.0+0x74>
 800b8f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b8f8:	2f19      	cmp	r7, #25
 800b8fa:	d804      	bhi.n	800b906 <_strtol_l.constprop.0+0xba>
 800b8fc:	3c57      	subs	r4, #87	; 0x57
 800b8fe:	e7df      	b.n	800b8c0 <_strtol_l.constprop.0+0x74>
 800b900:	f04f 32ff 	mov.w	r2, #4294967295
 800b904:	e7e8      	b.n	800b8d8 <_strtol_l.constprop.0+0x8c>
 800b906:	1c53      	adds	r3, r2, #1
 800b908:	d108      	bne.n	800b91c <_strtol_l.constprop.0+0xd0>
 800b90a:	2322      	movs	r3, #34	; 0x22
 800b90c:	4660      	mov	r0, ip
 800b90e:	f8ce 3000 	str.w	r3, [lr]
 800b912:	f1b8 0f00 	cmp.w	r8, #0
 800b916:	d0a6      	beq.n	800b866 <_strtol_l.constprop.0+0x1a>
 800b918:	1e69      	subs	r1, r5, #1
 800b91a:	e006      	b.n	800b92a <_strtol_l.constprop.0+0xde>
 800b91c:	b106      	cbz	r6, 800b920 <_strtol_l.constprop.0+0xd4>
 800b91e:	4240      	negs	r0, r0
 800b920:	f1b8 0f00 	cmp.w	r8, #0
 800b924:	d09f      	beq.n	800b866 <_strtol_l.constprop.0+0x1a>
 800b926:	2a00      	cmp	r2, #0
 800b928:	d1f6      	bne.n	800b918 <_strtol_l.constprop.0+0xcc>
 800b92a:	f8c8 1000 	str.w	r1, [r8]
 800b92e:	e79a      	b.n	800b866 <_strtol_l.constprop.0+0x1a>
 800b930:	2430      	movs	r4, #48	; 0x30
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1b5      	bne.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b936:	2308      	movs	r3, #8
 800b938:	e7b3      	b.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b93a:	2c30      	cmp	r4, #48	; 0x30
 800b93c:	d0a9      	beq.n	800b892 <_strtol_l.constprop.0+0x46>
 800b93e:	230a      	movs	r3, #10
 800b940:	e7af      	b.n	800b8a2 <_strtol_l.constprop.0+0x56>
 800b942:	bf00      	nop
 800b944:	0800cea1 	.word	0x0800cea1

0800b948 <_strtol_r>:
 800b948:	f7ff bf80 	b.w	800b84c <_strtol_l.constprop.0>

0800b94c <__ssputs_r>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	461f      	mov	r7, r3
 800b952:	688e      	ldr	r6, [r1, #8]
 800b954:	4682      	mov	sl, r0
 800b956:	42be      	cmp	r6, r7
 800b958:	460c      	mov	r4, r1
 800b95a:	4690      	mov	r8, r2
 800b95c:	680b      	ldr	r3, [r1, #0]
 800b95e:	d82c      	bhi.n	800b9ba <__ssputs_r+0x6e>
 800b960:	898a      	ldrh	r2, [r1, #12]
 800b962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b966:	d026      	beq.n	800b9b6 <__ssputs_r+0x6a>
 800b968:	6965      	ldr	r5, [r4, #20]
 800b96a:	6909      	ldr	r1, [r1, #16]
 800b96c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b970:	eba3 0901 	sub.w	r9, r3, r1
 800b974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b978:	1c7b      	adds	r3, r7, #1
 800b97a:	444b      	add	r3, r9
 800b97c:	106d      	asrs	r5, r5, #1
 800b97e:	429d      	cmp	r5, r3
 800b980:	bf38      	it	cc
 800b982:	461d      	movcc	r5, r3
 800b984:	0553      	lsls	r3, r2, #21
 800b986:	d527      	bpl.n	800b9d8 <__ssputs_r+0x8c>
 800b988:	4629      	mov	r1, r5
 800b98a:	f7fe fc19 	bl	800a1c0 <_malloc_r>
 800b98e:	4606      	mov	r6, r0
 800b990:	b360      	cbz	r0, 800b9ec <__ssputs_r+0xa0>
 800b992:	464a      	mov	r2, r9
 800b994:	6921      	ldr	r1, [r4, #16]
 800b996:	f7fd fd22 	bl	80093de <memcpy>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	6126      	str	r6, [r4, #16]
 800b9a8:	444e      	add	r6, r9
 800b9aa:	6026      	str	r6, [r4, #0]
 800b9ac:	463e      	mov	r6, r7
 800b9ae:	6165      	str	r5, [r4, #20]
 800b9b0:	eba5 0509 	sub.w	r5, r5, r9
 800b9b4:	60a5      	str	r5, [r4, #8]
 800b9b6:	42be      	cmp	r6, r7
 800b9b8:	d900      	bls.n	800b9bc <__ssputs_r+0x70>
 800b9ba:	463e      	mov	r6, r7
 800b9bc:	4632      	mov	r2, r6
 800b9be:	4641      	mov	r1, r8
 800b9c0:	6820      	ldr	r0, [r4, #0]
 800b9c2:	f000 fb9d 	bl	800c100 <memmove>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	1b9b      	subs	r3, r3, r6
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	4433      	add	r3, r6
 800b9d2:	6023      	str	r3, [r4, #0]
 800b9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d8:	462a      	mov	r2, r5
 800b9da:	f000 ff70 	bl	800c8be <_realloc_r>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d1e0      	bne.n	800b9a6 <__ssputs_r+0x5a>
 800b9e4:	4650      	mov	r0, sl
 800b9e6:	6921      	ldr	r1, [r4, #16]
 800b9e8:	f7fe fb7a 	bl	800a0e0 <_free_r>
 800b9ec:	230c      	movs	r3, #12
 800b9ee:	f8ca 3000 	str.w	r3, [sl]
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	e7e9      	b.n	800b9d4 <__ssputs_r+0x88>

0800ba00 <_svfiprintf_r>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4698      	mov	r8, r3
 800ba06:	898b      	ldrh	r3, [r1, #12]
 800ba08:	4607      	mov	r7, r0
 800ba0a:	061b      	lsls	r3, r3, #24
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	4614      	mov	r4, r2
 800ba10:	b09d      	sub	sp, #116	; 0x74
 800ba12:	d50e      	bpl.n	800ba32 <_svfiprintf_r+0x32>
 800ba14:	690b      	ldr	r3, [r1, #16]
 800ba16:	b963      	cbnz	r3, 800ba32 <_svfiprintf_r+0x32>
 800ba18:	2140      	movs	r1, #64	; 0x40
 800ba1a:	f7fe fbd1 	bl	800a1c0 <_malloc_r>
 800ba1e:	6028      	str	r0, [r5, #0]
 800ba20:	6128      	str	r0, [r5, #16]
 800ba22:	b920      	cbnz	r0, 800ba2e <_svfiprintf_r+0x2e>
 800ba24:	230c      	movs	r3, #12
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2c:	e0d0      	b.n	800bbd0 <_svfiprintf_r+0x1d0>
 800ba2e:	2340      	movs	r3, #64	; 0x40
 800ba30:	616b      	str	r3, [r5, #20]
 800ba32:	2300      	movs	r3, #0
 800ba34:	9309      	str	r3, [sp, #36]	; 0x24
 800ba36:	2320      	movs	r3, #32
 800ba38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba3c:	2330      	movs	r3, #48	; 0x30
 800ba3e:	f04f 0901 	mov.w	r9, #1
 800ba42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba46:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bbe8 <_svfiprintf_r+0x1e8>
 800ba4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba4e:	4623      	mov	r3, r4
 800ba50:	469a      	mov	sl, r3
 800ba52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba56:	b10a      	cbz	r2, 800ba5c <_svfiprintf_r+0x5c>
 800ba58:	2a25      	cmp	r2, #37	; 0x25
 800ba5a:	d1f9      	bne.n	800ba50 <_svfiprintf_r+0x50>
 800ba5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba60:	d00b      	beq.n	800ba7a <_svfiprintf_r+0x7a>
 800ba62:	465b      	mov	r3, fp
 800ba64:	4622      	mov	r2, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	4638      	mov	r0, r7
 800ba6a:	f7ff ff6f 	bl	800b94c <__ssputs_r>
 800ba6e:	3001      	adds	r0, #1
 800ba70:	f000 80a9 	beq.w	800bbc6 <_svfiprintf_r+0x1c6>
 800ba74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba76:	445a      	add	r2, fp
 800ba78:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 80a1 	beq.w	800bbc6 <_svfiprintf_r+0x1c6>
 800ba84:	2300      	movs	r3, #0
 800ba86:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba8e:	f10a 0a01 	add.w	sl, sl, #1
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	9307      	str	r3, [sp, #28]
 800ba96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba9c:	4654      	mov	r4, sl
 800ba9e:	2205      	movs	r2, #5
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	4850      	ldr	r0, [pc, #320]	; (800bbe8 <_svfiprintf_r+0x1e8>)
 800baa6:	f7fd fc8c 	bl	80093c2 <memchr>
 800baaa:	9a04      	ldr	r2, [sp, #16]
 800baac:	b9d8      	cbnz	r0, 800bae6 <_svfiprintf_r+0xe6>
 800baae:	06d0      	lsls	r0, r2, #27
 800bab0:	bf44      	itt	mi
 800bab2:	2320      	movmi	r3, #32
 800bab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bab8:	0711      	lsls	r1, r2, #28
 800baba:	bf44      	itt	mi
 800babc:	232b      	movmi	r3, #43	; 0x2b
 800babe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac2:	f89a 3000 	ldrb.w	r3, [sl]
 800bac6:	2b2a      	cmp	r3, #42	; 0x2a
 800bac8:	d015      	beq.n	800baf6 <_svfiprintf_r+0xf6>
 800baca:	4654      	mov	r4, sl
 800bacc:	2000      	movs	r0, #0
 800bace:	f04f 0c0a 	mov.w	ip, #10
 800bad2:	9a07      	ldr	r2, [sp, #28]
 800bad4:	4621      	mov	r1, r4
 800bad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bada:	3b30      	subs	r3, #48	; 0x30
 800badc:	2b09      	cmp	r3, #9
 800bade:	d94d      	bls.n	800bb7c <_svfiprintf_r+0x17c>
 800bae0:	b1b0      	cbz	r0, 800bb10 <_svfiprintf_r+0x110>
 800bae2:	9207      	str	r2, [sp, #28]
 800bae4:	e014      	b.n	800bb10 <_svfiprintf_r+0x110>
 800bae6:	eba0 0308 	sub.w	r3, r0, r8
 800baea:	fa09 f303 	lsl.w	r3, r9, r3
 800baee:	4313      	orrs	r3, r2
 800baf0:	46a2      	mov	sl, r4
 800baf2:	9304      	str	r3, [sp, #16]
 800baf4:	e7d2      	b.n	800ba9c <_svfiprintf_r+0x9c>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	1d19      	adds	r1, r3, #4
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	9103      	str	r1, [sp, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bfbb      	ittet	lt
 800bb02:	425b      	neglt	r3, r3
 800bb04:	f042 0202 	orrlt.w	r2, r2, #2
 800bb08:	9307      	strge	r3, [sp, #28]
 800bb0a:	9307      	strlt	r3, [sp, #28]
 800bb0c:	bfb8      	it	lt
 800bb0e:	9204      	strlt	r2, [sp, #16]
 800bb10:	7823      	ldrb	r3, [r4, #0]
 800bb12:	2b2e      	cmp	r3, #46	; 0x2e
 800bb14:	d10c      	bne.n	800bb30 <_svfiprintf_r+0x130>
 800bb16:	7863      	ldrb	r3, [r4, #1]
 800bb18:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1a:	d134      	bne.n	800bb86 <_svfiprintf_r+0x186>
 800bb1c:	9b03      	ldr	r3, [sp, #12]
 800bb1e:	3402      	adds	r4, #2
 800bb20:	1d1a      	adds	r2, r3, #4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	9203      	str	r2, [sp, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfb8      	it	lt
 800bb2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb2e:	9305      	str	r3, [sp, #20]
 800bb30:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bbec <_svfiprintf_r+0x1ec>
 800bb34:	2203      	movs	r2, #3
 800bb36:	4650      	mov	r0, sl
 800bb38:	7821      	ldrb	r1, [r4, #0]
 800bb3a:	f7fd fc42 	bl	80093c2 <memchr>
 800bb3e:	b138      	cbz	r0, 800bb50 <_svfiprintf_r+0x150>
 800bb40:	2240      	movs	r2, #64	; 0x40
 800bb42:	9b04      	ldr	r3, [sp, #16]
 800bb44:	eba0 000a 	sub.w	r0, r0, sl
 800bb48:	4082      	lsls	r2, r0
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	3401      	adds	r4, #1
 800bb4e:	9304      	str	r3, [sp, #16]
 800bb50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb54:	2206      	movs	r2, #6
 800bb56:	4826      	ldr	r0, [pc, #152]	; (800bbf0 <_svfiprintf_r+0x1f0>)
 800bb58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb5c:	f7fd fc31 	bl	80093c2 <memchr>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d038      	beq.n	800bbd6 <_svfiprintf_r+0x1d6>
 800bb64:	4b23      	ldr	r3, [pc, #140]	; (800bbf4 <_svfiprintf_r+0x1f4>)
 800bb66:	bb1b      	cbnz	r3, 800bbb0 <_svfiprintf_r+0x1b0>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	3307      	adds	r3, #7
 800bb6c:	f023 0307 	bic.w	r3, r3, #7
 800bb70:	3308      	adds	r3, #8
 800bb72:	9303      	str	r3, [sp, #12]
 800bb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb76:	4433      	add	r3, r6
 800bb78:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7a:	e768      	b.n	800ba4e <_svfiprintf_r+0x4e>
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	2001      	movs	r0, #1
 800bb80:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb84:	e7a6      	b.n	800bad4 <_svfiprintf_r+0xd4>
 800bb86:	2300      	movs	r3, #0
 800bb88:	f04f 0c0a 	mov.w	ip, #10
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	3401      	adds	r4, #1
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	4620      	mov	r0, r4
 800bb94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb98:	3a30      	subs	r2, #48	; 0x30
 800bb9a:	2a09      	cmp	r2, #9
 800bb9c:	d903      	bls.n	800bba6 <_svfiprintf_r+0x1a6>
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d0c6      	beq.n	800bb30 <_svfiprintf_r+0x130>
 800bba2:	9105      	str	r1, [sp, #20]
 800bba4:	e7c4      	b.n	800bb30 <_svfiprintf_r+0x130>
 800bba6:	4604      	mov	r4, r0
 800bba8:	2301      	movs	r3, #1
 800bbaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbae:	e7f0      	b.n	800bb92 <_svfiprintf_r+0x192>
 800bbb0:	ab03      	add	r3, sp, #12
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	4b0f      	ldr	r3, [pc, #60]	; (800bbf8 <_svfiprintf_r+0x1f8>)
 800bbba:	a904      	add	r1, sp, #16
 800bbbc:	f7fc fc7a 	bl	80084b4 <_printf_float>
 800bbc0:	1c42      	adds	r2, r0, #1
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	d1d6      	bne.n	800bb74 <_svfiprintf_r+0x174>
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	065b      	lsls	r3, r3, #25
 800bbca:	f53f af2d 	bmi.w	800ba28 <_svfiprintf_r+0x28>
 800bbce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd0:	b01d      	add	sp, #116	; 0x74
 800bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd6:	ab03      	add	r3, sp, #12
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4638      	mov	r0, r7
 800bbde:	4b06      	ldr	r3, [pc, #24]	; (800bbf8 <_svfiprintf_r+0x1f8>)
 800bbe0:	a904      	add	r1, sp, #16
 800bbe2:	f7fc ff07 	bl	80089f4 <_printf_i>
 800bbe6:	e7eb      	b.n	800bbc0 <_svfiprintf_r+0x1c0>
 800bbe8:	0800cfa1 	.word	0x0800cfa1
 800bbec:	0800cfa7 	.word	0x0800cfa7
 800bbf0:	0800cfab 	.word	0x0800cfab
 800bbf4:	080084b5 	.word	0x080084b5
 800bbf8:	0800b94d 	.word	0x0800b94d

0800bbfc <__sfputc_r>:
 800bbfc:	6893      	ldr	r3, [r2, #8]
 800bbfe:	b410      	push	{r4}
 800bc00:	3b01      	subs	r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	6093      	str	r3, [r2, #8]
 800bc06:	da07      	bge.n	800bc18 <__sfputc_r+0x1c>
 800bc08:	6994      	ldr	r4, [r2, #24]
 800bc0a:	42a3      	cmp	r3, r4
 800bc0c:	db01      	blt.n	800bc12 <__sfputc_r+0x16>
 800bc0e:	290a      	cmp	r1, #10
 800bc10:	d102      	bne.n	800bc18 <__sfputc_r+0x1c>
 800bc12:	bc10      	pop	{r4}
 800bc14:	f000 b9de 	b.w	800bfd4 <__swbuf_r>
 800bc18:	6813      	ldr	r3, [r2, #0]
 800bc1a:	1c58      	adds	r0, r3, #1
 800bc1c:	6010      	str	r0, [r2, #0]
 800bc1e:	7019      	strb	r1, [r3, #0]
 800bc20:	4608      	mov	r0, r1
 800bc22:	bc10      	pop	{r4}
 800bc24:	4770      	bx	lr

0800bc26 <__sfputs_r>:
 800bc26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc28:	4606      	mov	r6, r0
 800bc2a:	460f      	mov	r7, r1
 800bc2c:	4614      	mov	r4, r2
 800bc2e:	18d5      	adds	r5, r2, r3
 800bc30:	42ac      	cmp	r4, r5
 800bc32:	d101      	bne.n	800bc38 <__sfputs_r+0x12>
 800bc34:	2000      	movs	r0, #0
 800bc36:	e007      	b.n	800bc48 <__sfputs_r+0x22>
 800bc38:	463a      	mov	r2, r7
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc40:	f7ff ffdc 	bl	800bbfc <__sfputc_r>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d1f3      	bne.n	800bc30 <__sfputs_r+0xa>
 800bc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc4c <_vfiprintf_r>:
 800bc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc50:	460d      	mov	r5, r1
 800bc52:	4614      	mov	r4, r2
 800bc54:	4698      	mov	r8, r3
 800bc56:	4606      	mov	r6, r0
 800bc58:	b09d      	sub	sp, #116	; 0x74
 800bc5a:	b118      	cbz	r0, 800bc64 <_vfiprintf_r+0x18>
 800bc5c:	6a03      	ldr	r3, [r0, #32]
 800bc5e:	b90b      	cbnz	r3, 800bc64 <_vfiprintf_r+0x18>
 800bc60:	f7fd fa84 	bl	800916c <__sinit>
 800bc64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc66:	07d9      	lsls	r1, r3, #31
 800bc68:	d405      	bmi.n	800bc76 <_vfiprintf_r+0x2a>
 800bc6a:	89ab      	ldrh	r3, [r5, #12]
 800bc6c:	059a      	lsls	r2, r3, #22
 800bc6e:	d402      	bmi.n	800bc76 <_vfiprintf_r+0x2a>
 800bc70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc72:	f7fd fba4 	bl	80093be <__retarget_lock_acquire_recursive>
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	071b      	lsls	r3, r3, #28
 800bc7a:	d501      	bpl.n	800bc80 <_vfiprintf_r+0x34>
 800bc7c:	692b      	ldr	r3, [r5, #16]
 800bc7e:	b99b      	cbnz	r3, 800bca8 <_vfiprintf_r+0x5c>
 800bc80:	4629      	mov	r1, r5
 800bc82:	4630      	mov	r0, r6
 800bc84:	f000 f9e4 	bl	800c050 <__swsetup_r>
 800bc88:	b170      	cbz	r0, 800bca8 <_vfiprintf_r+0x5c>
 800bc8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc8c:	07dc      	lsls	r4, r3, #31
 800bc8e:	d504      	bpl.n	800bc9a <_vfiprintf_r+0x4e>
 800bc90:	f04f 30ff 	mov.w	r0, #4294967295
 800bc94:	b01d      	add	sp, #116	; 0x74
 800bc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9a:	89ab      	ldrh	r3, [r5, #12]
 800bc9c:	0598      	lsls	r0, r3, #22
 800bc9e:	d4f7      	bmi.n	800bc90 <_vfiprintf_r+0x44>
 800bca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bca2:	f7fd fb8d 	bl	80093c0 <__retarget_lock_release_recursive>
 800bca6:	e7f3      	b.n	800bc90 <_vfiprintf_r+0x44>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcac:	2320      	movs	r3, #32
 800bcae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcb2:	2330      	movs	r3, #48	; 0x30
 800bcb4:	f04f 0901 	mov.w	r9, #1
 800bcb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800be6c <_vfiprintf_r+0x220>
 800bcc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcc4:	4623      	mov	r3, r4
 800bcc6:	469a      	mov	sl, r3
 800bcc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bccc:	b10a      	cbz	r2, 800bcd2 <_vfiprintf_r+0x86>
 800bcce:	2a25      	cmp	r2, #37	; 0x25
 800bcd0:	d1f9      	bne.n	800bcc6 <_vfiprintf_r+0x7a>
 800bcd2:	ebba 0b04 	subs.w	fp, sl, r4
 800bcd6:	d00b      	beq.n	800bcf0 <_vfiprintf_r+0xa4>
 800bcd8:	465b      	mov	r3, fp
 800bcda:	4622      	mov	r2, r4
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4630      	mov	r0, r6
 800bce0:	f7ff ffa1 	bl	800bc26 <__sfputs_r>
 800bce4:	3001      	adds	r0, #1
 800bce6:	f000 80a9 	beq.w	800be3c <_vfiprintf_r+0x1f0>
 800bcea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcec:	445a      	add	r2, fp
 800bcee:	9209      	str	r2, [sp, #36]	; 0x24
 800bcf0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 80a1 	beq.w	800be3c <_vfiprintf_r+0x1f0>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bd00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd04:	f10a 0a01 	add.w	sl, sl, #1
 800bd08:	9304      	str	r3, [sp, #16]
 800bd0a:	9307      	str	r3, [sp, #28]
 800bd0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd10:	931a      	str	r3, [sp, #104]	; 0x68
 800bd12:	4654      	mov	r4, sl
 800bd14:	2205      	movs	r2, #5
 800bd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1a:	4854      	ldr	r0, [pc, #336]	; (800be6c <_vfiprintf_r+0x220>)
 800bd1c:	f7fd fb51 	bl	80093c2 <memchr>
 800bd20:	9a04      	ldr	r2, [sp, #16]
 800bd22:	b9d8      	cbnz	r0, 800bd5c <_vfiprintf_r+0x110>
 800bd24:	06d1      	lsls	r1, r2, #27
 800bd26:	bf44      	itt	mi
 800bd28:	2320      	movmi	r3, #32
 800bd2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd2e:	0713      	lsls	r3, r2, #28
 800bd30:	bf44      	itt	mi
 800bd32:	232b      	movmi	r3, #43	; 0x2b
 800bd34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd38:	f89a 3000 	ldrb.w	r3, [sl]
 800bd3c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd3e:	d015      	beq.n	800bd6c <_vfiprintf_r+0x120>
 800bd40:	4654      	mov	r4, sl
 800bd42:	2000      	movs	r0, #0
 800bd44:	f04f 0c0a 	mov.w	ip, #10
 800bd48:	9a07      	ldr	r2, [sp, #28]
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd50:	3b30      	subs	r3, #48	; 0x30
 800bd52:	2b09      	cmp	r3, #9
 800bd54:	d94d      	bls.n	800bdf2 <_vfiprintf_r+0x1a6>
 800bd56:	b1b0      	cbz	r0, 800bd86 <_vfiprintf_r+0x13a>
 800bd58:	9207      	str	r2, [sp, #28]
 800bd5a:	e014      	b.n	800bd86 <_vfiprintf_r+0x13a>
 800bd5c:	eba0 0308 	sub.w	r3, r0, r8
 800bd60:	fa09 f303 	lsl.w	r3, r9, r3
 800bd64:	4313      	orrs	r3, r2
 800bd66:	46a2      	mov	sl, r4
 800bd68:	9304      	str	r3, [sp, #16]
 800bd6a:	e7d2      	b.n	800bd12 <_vfiprintf_r+0xc6>
 800bd6c:	9b03      	ldr	r3, [sp, #12]
 800bd6e:	1d19      	adds	r1, r3, #4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	9103      	str	r1, [sp, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	bfbb      	ittet	lt
 800bd78:	425b      	neglt	r3, r3
 800bd7a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd7e:	9307      	strge	r3, [sp, #28]
 800bd80:	9307      	strlt	r3, [sp, #28]
 800bd82:	bfb8      	it	lt
 800bd84:	9204      	strlt	r2, [sp, #16]
 800bd86:	7823      	ldrb	r3, [r4, #0]
 800bd88:	2b2e      	cmp	r3, #46	; 0x2e
 800bd8a:	d10c      	bne.n	800bda6 <_vfiprintf_r+0x15a>
 800bd8c:	7863      	ldrb	r3, [r4, #1]
 800bd8e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd90:	d134      	bne.n	800bdfc <_vfiprintf_r+0x1b0>
 800bd92:	9b03      	ldr	r3, [sp, #12]
 800bd94:	3402      	adds	r4, #2
 800bd96:	1d1a      	adds	r2, r3, #4
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	9203      	str	r2, [sp, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	bfb8      	it	lt
 800bda0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bda4:	9305      	str	r3, [sp, #20]
 800bda6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be70 <_vfiprintf_r+0x224>
 800bdaa:	2203      	movs	r2, #3
 800bdac:	4650      	mov	r0, sl
 800bdae:	7821      	ldrb	r1, [r4, #0]
 800bdb0:	f7fd fb07 	bl	80093c2 <memchr>
 800bdb4:	b138      	cbz	r0, 800bdc6 <_vfiprintf_r+0x17a>
 800bdb6:	2240      	movs	r2, #64	; 0x40
 800bdb8:	9b04      	ldr	r3, [sp, #16]
 800bdba:	eba0 000a 	sub.w	r0, r0, sl
 800bdbe:	4082      	lsls	r2, r0
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	3401      	adds	r4, #1
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdca:	2206      	movs	r2, #6
 800bdcc:	4829      	ldr	r0, [pc, #164]	; (800be74 <_vfiprintf_r+0x228>)
 800bdce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdd2:	f7fd faf6 	bl	80093c2 <memchr>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d03f      	beq.n	800be5a <_vfiprintf_r+0x20e>
 800bdda:	4b27      	ldr	r3, [pc, #156]	; (800be78 <_vfiprintf_r+0x22c>)
 800bddc:	bb1b      	cbnz	r3, 800be26 <_vfiprintf_r+0x1da>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	3307      	adds	r3, #7
 800bde2:	f023 0307 	bic.w	r3, r3, #7
 800bde6:	3308      	adds	r3, #8
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdec:	443b      	add	r3, r7
 800bdee:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf0:	e768      	b.n	800bcc4 <_vfiprintf_r+0x78>
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdfa:	e7a6      	b.n	800bd4a <_vfiprintf_r+0xfe>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f04f 0c0a 	mov.w	ip, #10
 800be02:	4619      	mov	r1, r3
 800be04:	3401      	adds	r4, #1
 800be06:	9305      	str	r3, [sp, #20]
 800be08:	4620      	mov	r0, r4
 800be0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be0e:	3a30      	subs	r2, #48	; 0x30
 800be10:	2a09      	cmp	r2, #9
 800be12:	d903      	bls.n	800be1c <_vfiprintf_r+0x1d0>
 800be14:	2b00      	cmp	r3, #0
 800be16:	d0c6      	beq.n	800bda6 <_vfiprintf_r+0x15a>
 800be18:	9105      	str	r1, [sp, #20]
 800be1a:	e7c4      	b.n	800bda6 <_vfiprintf_r+0x15a>
 800be1c:	4604      	mov	r4, r0
 800be1e:	2301      	movs	r3, #1
 800be20:	fb0c 2101 	mla	r1, ip, r1, r2
 800be24:	e7f0      	b.n	800be08 <_vfiprintf_r+0x1bc>
 800be26:	ab03      	add	r3, sp, #12
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	462a      	mov	r2, r5
 800be2c:	4630      	mov	r0, r6
 800be2e:	4b13      	ldr	r3, [pc, #76]	; (800be7c <_vfiprintf_r+0x230>)
 800be30:	a904      	add	r1, sp, #16
 800be32:	f7fc fb3f 	bl	80084b4 <_printf_float>
 800be36:	4607      	mov	r7, r0
 800be38:	1c78      	adds	r0, r7, #1
 800be3a:	d1d6      	bne.n	800bdea <_vfiprintf_r+0x19e>
 800be3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be3e:	07d9      	lsls	r1, r3, #31
 800be40:	d405      	bmi.n	800be4e <_vfiprintf_r+0x202>
 800be42:	89ab      	ldrh	r3, [r5, #12]
 800be44:	059a      	lsls	r2, r3, #22
 800be46:	d402      	bmi.n	800be4e <_vfiprintf_r+0x202>
 800be48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be4a:	f7fd fab9 	bl	80093c0 <__retarget_lock_release_recursive>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	065b      	lsls	r3, r3, #25
 800be52:	f53f af1d 	bmi.w	800bc90 <_vfiprintf_r+0x44>
 800be56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be58:	e71c      	b.n	800bc94 <_vfiprintf_r+0x48>
 800be5a:	ab03      	add	r3, sp, #12
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	462a      	mov	r2, r5
 800be60:	4630      	mov	r0, r6
 800be62:	4b06      	ldr	r3, [pc, #24]	; (800be7c <_vfiprintf_r+0x230>)
 800be64:	a904      	add	r1, sp, #16
 800be66:	f7fc fdc5 	bl	80089f4 <_printf_i>
 800be6a:	e7e4      	b.n	800be36 <_vfiprintf_r+0x1ea>
 800be6c:	0800cfa1 	.word	0x0800cfa1
 800be70:	0800cfa7 	.word	0x0800cfa7
 800be74:	0800cfab 	.word	0x0800cfab
 800be78:	080084b5 	.word	0x080084b5
 800be7c:	0800bc27 	.word	0x0800bc27

0800be80 <__sflush_r>:
 800be80:	898a      	ldrh	r2, [r1, #12]
 800be82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be84:	4605      	mov	r5, r0
 800be86:	0710      	lsls	r0, r2, #28
 800be88:	460c      	mov	r4, r1
 800be8a:	d457      	bmi.n	800bf3c <__sflush_r+0xbc>
 800be8c:	684b      	ldr	r3, [r1, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dc04      	bgt.n	800be9c <__sflush_r+0x1c>
 800be92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	dc01      	bgt.n	800be9c <__sflush_r+0x1c>
 800be98:	2000      	movs	r0, #0
 800be9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	d0fa      	beq.n	800be98 <__sflush_r+0x18>
 800bea2:	2300      	movs	r3, #0
 800bea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bea8:	682f      	ldr	r7, [r5, #0]
 800beaa:	6a21      	ldr	r1, [r4, #32]
 800beac:	602b      	str	r3, [r5, #0]
 800beae:	d032      	beq.n	800bf16 <__sflush_r+0x96>
 800beb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	075a      	lsls	r2, r3, #29
 800beb6:	d505      	bpl.n	800bec4 <__sflush_r+0x44>
 800beb8:	6863      	ldr	r3, [r4, #4]
 800beba:	1ac0      	subs	r0, r0, r3
 800bebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bebe:	b10b      	cbz	r3, 800bec4 <__sflush_r+0x44>
 800bec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bec2:	1ac0      	subs	r0, r0, r3
 800bec4:	2300      	movs	r3, #0
 800bec6:	4602      	mov	r2, r0
 800bec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beca:	4628      	mov	r0, r5
 800becc:	6a21      	ldr	r1, [r4, #32]
 800bece:	47b0      	blx	r6
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	d106      	bne.n	800bee4 <__sflush_r+0x64>
 800bed6:	6829      	ldr	r1, [r5, #0]
 800bed8:	291d      	cmp	r1, #29
 800beda:	d82b      	bhi.n	800bf34 <__sflush_r+0xb4>
 800bedc:	4a28      	ldr	r2, [pc, #160]	; (800bf80 <__sflush_r+0x100>)
 800bede:	410a      	asrs	r2, r1
 800bee0:	07d6      	lsls	r6, r2, #31
 800bee2:	d427      	bmi.n	800bf34 <__sflush_r+0xb4>
 800bee4:	2200      	movs	r2, #0
 800bee6:	6062      	str	r2, [r4, #4]
 800bee8:	6922      	ldr	r2, [r4, #16]
 800beea:	04d9      	lsls	r1, r3, #19
 800beec:	6022      	str	r2, [r4, #0]
 800beee:	d504      	bpl.n	800befa <__sflush_r+0x7a>
 800bef0:	1c42      	adds	r2, r0, #1
 800bef2:	d101      	bne.n	800bef8 <__sflush_r+0x78>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b903      	cbnz	r3, 800befa <__sflush_r+0x7a>
 800bef8:	6560      	str	r0, [r4, #84]	; 0x54
 800befa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800befc:	602f      	str	r7, [r5, #0]
 800befe:	2900      	cmp	r1, #0
 800bf00:	d0ca      	beq.n	800be98 <__sflush_r+0x18>
 800bf02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf06:	4299      	cmp	r1, r3
 800bf08:	d002      	beq.n	800bf10 <__sflush_r+0x90>
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f7fe f8e8 	bl	800a0e0 <_free_r>
 800bf10:	2000      	movs	r0, #0
 800bf12:	6360      	str	r0, [r4, #52]	; 0x34
 800bf14:	e7c1      	b.n	800be9a <__sflush_r+0x1a>
 800bf16:	2301      	movs	r3, #1
 800bf18:	4628      	mov	r0, r5
 800bf1a:	47b0      	blx	r6
 800bf1c:	1c41      	adds	r1, r0, #1
 800bf1e:	d1c8      	bne.n	800beb2 <__sflush_r+0x32>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0c5      	beq.n	800beb2 <__sflush_r+0x32>
 800bf26:	2b1d      	cmp	r3, #29
 800bf28:	d001      	beq.n	800bf2e <__sflush_r+0xae>
 800bf2a:	2b16      	cmp	r3, #22
 800bf2c:	d101      	bne.n	800bf32 <__sflush_r+0xb2>
 800bf2e:	602f      	str	r7, [r5, #0]
 800bf30:	e7b2      	b.n	800be98 <__sflush_r+0x18>
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf38:	81a3      	strh	r3, [r4, #12]
 800bf3a:	e7ae      	b.n	800be9a <__sflush_r+0x1a>
 800bf3c:	690f      	ldr	r7, [r1, #16]
 800bf3e:	2f00      	cmp	r7, #0
 800bf40:	d0aa      	beq.n	800be98 <__sflush_r+0x18>
 800bf42:	0793      	lsls	r3, r2, #30
 800bf44:	bf18      	it	ne
 800bf46:	2300      	movne	r3, #0
 800bf48:	680e      	ldr	r6, [r1, #0]
 800bf4a:	bf08      	it	eq
 800bf4c:	694b      	ldreq	r3, [r1, #20]
 800bf4e:	1bf6      	subs	r6, r6, r7
 800bf50:	600f      	str	r7, [r1, #0]
 800bf52:	608b      	str	r3, [r1, #8]
 800bf54:	2e00      	cmp	r6, #0
 800bf56:	dd9f      	ble.n	800be98 <__sflush_r+0x18>
 800bf58:	4633      	mov	r3, r6
 800bf5a:	463a      	mov	r2, r7
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	6a21      	ldr	r1, [r4, #32]
 800bf60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bf64:	47e0      	blx	ip
 800bf66:	2800      	cmp	r0, #0
 800bf68:	dc06      	bgt.n	800bf78 <__sflush_r+0xf8>
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf74:	81a3      	strh	r3, [r4, #12]
 800bf76:	e790      	b.n	800be9a <__sflush_r+0x1a>
 800bf78:	4407      	add	r7, r0
 800bf7a:	1a36      	subs	r6, r6, r0
 800bf7c:	e7ea      	b.n	800bf54 <__sflush_r+0xd4>
 800bf7e:	bf00      	nop
 800bf80:	dfbffffe 	.word	0xdfbffffe

0800bf84 <_fflush_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	690b      	ldr	r3, [r1, #16]
 800bf88:	4605      	mov	r5, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	b913      	cbnz	r3, 800bf94 <_fflush_r+0x10>
 800bf8e:	2500      	movs	r5, #0
 800bf90:	4628      	mov	r0, r5
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	b118      	cbz	r0, 800bf9e <_fflush_r+0x1a>
 800bf96:	6a03      	ldr	r3, [r0, #32]
 800bf98:	b90b      	cbnz	r3, 800bf9e <_fflush_r+0x1a>
 800bf9a:	f7fd f8e7 	bl	800916c <__sinit>
 800bf9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0f3      	beq.n	800bf8e <_fflush_r+0xa>
 800bfa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfa8:	07d0      	lsls	r0, r2, #31
 800bfaa:	d404      	bmi.n	800bfb6 <_fflush_r+0x32>
 800bfac:	0599      	lsls	r1, r3, #22
 800bfae:	d402      	bmi.n	800bfb6 <_fflush_r+0x32>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb2:	f7fd fa04 	bl	80093be <__retarget_lock_acquire_recursive>
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f7ff ff61 	bl	800be80 <__sflush_r>
 800bfbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	07da      	lsls	r2, r3, #31
 800bfc4:	d4e4      	bmi.n	800bf90 <_fflush_r+0xc>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	059b      	lsls	r3, r3, #22
 800bfca:	d4e1      	bmi.n	800bf90 <_fflush_r+0xc>
 800bfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfce:	f7fd f9f7 	bl	80093c0 <__retarget_lock_release_recursive>
 800bfd2:	e7dd      	b.n	800bf90 <_fflush_r+0xc>

0800bfd4 <__swbuf_r>:
 800bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd6:	460e      	mov	r6, r1
 800bfd8:	4614      	mov	r4, r2
 800bfda:	4605      	mov	r5, r0
 800bfdc:	b118      	cbz	r0, 800bfe6 <__swbuf_r+0x12>
 800bfde:	6a03      	ldr	r3, [r0, #32]
 800bfe0:	b90b      	cbnz	r3, 800bfe6 <__swbuf_r+0x12>
 800bfe2:	f7fd f8c3 	bl	800916c <__sinit>
 800bfe6:	69a3      	ldr	r3, [r4, #24]
 800bfe8:	60a3      	str	r3, [r4, #8]
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	071a      	lsls	r2, r3, #28
 800bfee:	d525      	bpl.n	800c03c <__swbuf_r+0x68>
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	b31b      	cbz	r3, 800c03c <__swbuf_r+0x68>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	6922      	ldr	r2, [r4, #16]
 800bff8:	b2f6      	uxtb	r6, r6
 800bffa:	1a98      	subs	r0, r3, r2
 800bffc:	6963      	ldr	r3, [r4, #20]
 800bffe:	4637      	mov	r7, r6
 800c000:	4283      	cmp	r3, r0
 800c002:	dc04      	bgt.n	800c00e <__swbuf_r+0x3a>
 800c004:	4621      	mov	r1, r4
 800c006:	4628      	mov	r0, r5
 800c008:	f7ff ffbc 	bl	800bf84 <_fflush_r>
 800c00c:	b9e0      	cbnz	r0, 800c048 <__swbuf_r+0x74>
 800c00e:	68a3      	ldr	r3, [r4, #8]
 800c010:	3b01      	subs	r3, #1
 800c012:	60a3      	str	r3, [r4, #8]
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	6022      	str	r2, [r4, #0]
 800c01a:	701e      	strb	r6, [r3, #0]
 800c01c:	6962      	ldr	r2, [r4, #20]
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	429a      	cmp	r2, r3
 800c022:	d004      	beq.n	800c02e <__swbuf_r+0x5a>
 800c024:	89a3      	ldrh	r3, [r4, #12]
 800c026:	07db      	lsls	r3, r3, #31
 800c028:	d506      	bpl.n	800c038 <__swbuf_r+0x64>
 800c02a:	2e0a      	cmp	r6, #10
 800c02c:	d104      	bne.n	800c038 <__swbuf_r+0x64>
 800c02e:	4621      	mov	r1, r4
 800c030:	4628      	mov	r0, r5
 800c032:	f7ff ffa7 	bl	800bf84 <_fflush_r>
 800c036:	b938      	cbnz	r0, 800c048 <__swbuf_r+0x74>
 800c038:	4638      	mov	r0, r7
 800c03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c03c:	4621      	mov	r1, r4
 800c03e:	4628      	mov	r0, r5
 800c040:	f000 f806 	bl	800c050 <__swsetup_r>
 800c044:	2800      	cmp	r0, #0
 800c046:	d0d5      	beq.n	800bff4 <__swbuf_r+0x20>
 800c048:	f04f 37ff 	mov.w	r7, #4294967295
 800c04c:	e7f4      	b.n	800c038 <__swbuf_r+0x64>
	...

0800c050 <__swsetup_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4b2a      	ldr	r3, [pc, #168]	; (800c0fc <__swsetup_r+0xac>)
 800c054:	4605      	mov	r5, r0
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	460c      	mov	r4, r1
 800c05a:	b118      	cbz	r0, 800c064 <__swsetup_r+0x14>
 800c05c:	6a03      	ldr	r3, [r0, #32]
 800c05e:	b90b      	cbnz	r3, 800c064 <__swsetup_r+0x14>
 800c060:	f7fd f884 	bl	800916c <__sinit>
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c06a:	0718      	lsls	r0, r3, #28
 800c06c:	d422      	bmi.n	800c0b4 <__swsetup_r+0x64>
 800c06e:	06d9      	lsls	r1, r3, #27
 800c070:	d407      	bmi.n	800c082 <__swsetup_r+0x32>
 800c072:	2309      	movs	r3, #9
 800c074:	602b      	str	r3, [r5, #0]
 800c076:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c07a:	f04f 30ff 	mov.w	r0, #4294967295
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	e034      	b.n	800c0ec <__swsetup_r+0x9c>
 800c082:	0758      	lsls	r0, r3, #29
 800c084:	d512      	bpl.n	800c0ac <__swsetup_r+0x5c>
 800c086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c088:	b141      	cbz	r1, 800c09c <__swsetup_r+0x4c>
 800c08a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c08e:	4299      	cmp	r1, r3
 800c090:	d002      	beq.n	800c098 <__swsetup_r+0x48>
 800c092:	4628      	mov	r0, r5
 800c094:	f7fe f824 	bl	800a0e0 <_free_r>
 800c098:	2300      	movs	r3, #0
 800c09a:	6363      	str	r3, [r4, #52]	; 0x34
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	6063      	str	r3, [r4, #4]
 800c0a8:	6923      	ldr	r3, [r4, #16]
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	f043 0308 	orr.w	r3, r3, #8
 800c0b2:	81a3      	strh	r3, [r4, #12]
 800c0b4:	6923      	ldr	r3, [r4, #16]
 800c0b6:	b94b      	cbnz	r3, 800c0cc <__swsetup_r+0x7c>
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0c2:	d003      	beq.n	800c0cc <__swsetup_r+0x7c>
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f000 fc6d 	bl	800c9a6 <__smakebuf_r>
 800c0cc:	89a0      	ldrh	r0, [r4, #12]
 800c0ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0d2:	f010 0301 	ands.w	r3, r0, #1
 800c0d6:	d00a      	beq.n	800c0ee <__swsetup_r+0x9e>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60a3      	str	r3, [r4, #8]
 800c0dc:	6963      	ldr	r3, [r4, #20]
 800c0de:	425b      	negs	r3, r3
 800c0e0:	61a3      	str	r3, [r4, #24]
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	b943      	cbnz	r3, 800c0f8 <__swsetup_r+0xa8>
 800c0e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0ea:	d1c4      	bne.n	800c076 <__swsetup_r+0x26>
 800c0ec:	bd38      	pop	{r3, r4, r5, pc}
 800c0ee:	0781      	lsls	r1, r0, #30
 800c0f0:	bf58      	it	pl
 800c0f2:	6963      	ldrpl	r3, [r4, #20]
 800c0f4:	60a3      	str	r3, [r4, #8]
 800c0f6:	e7f4      	b.n	800c0e2 <__swsetup_r+0x92>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e7f7      	b.n	800c0ec <__swsetup_r+0x9c>
 800c0fc:	20000068 	.word	0x20000068

0800c100 <memmove>:
 800c100:	4288      	cmp	r0, r1
 800c102:	b510      	push	{r4, lr}
 800c104:	eb01 0402 	add.w	r4, r1, r2
 800c108:	d902      	bls.n	800c110 <memmove+0x10>
 800c10a:	4284      	cmp	r4, r0
 800c10c:	4623      	mov	r3, r4
 800c10e:	d807      	bhi.n	800c120 <memmove+0x20>
 800c110:	1e43      	subs	r3, r0, #1
 800c112:	42a1      	cmp	r1, r4
 800c114:	d008      	beq.n	800c128 <memmove+0x28>
 800c116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c11a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c11e:	e7f8      	b.n	800c112 <memmove+0x12>
 800c120:	4601      	mov	r1, r0
 800c122:	4402      	add	r2, r0
 800c124:	428a      	cmp	r2, r1
 800c126:	d100      	bne.n	800c12a <memmove+0x2a>
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c12e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c132:	e7f7      	b.n	800c124 <memmove+0x24>

0800c134 <strncmp>:
 800c134:	b510      	push	{r4, lr}
 800c136:	b16a      	cbz	r2, 800c154 <strncmp+0x20>
 800c138:	3901      	subs	r1, #1
 800c13a:	1884      	adds	r4, r0, r2
 800c13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c140:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c144:	429a      	cmp	r2, r3
 800c146:	d103      	bne.n	800c150 <strncmp+0x1c>
 800c148:	42a0      	cmp	r0, r4
 800c14a:	d001      	beq.n	800c150 <strncmp+0x1c>
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	d1f5      	bne.n	800c13c <strncmp+0x8>
 800c150:	1ad0      	subs	r0, r2, r3
 800c152:	bd10      	pop	{r4, pc}
 800c154:	4610      	mov	r0, r2
 800c156:	e7fc      	b.n	800c152 <strncmp+0x1e>

0800c158 <_sbrk_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	2300      	movs	r3, #0
 800c15c:	4d05      	ldr	r5, [pc, #20]	; (800c174 <_sbrk_r+0x1c>)
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	602b      	str	r3, [r5, #0]
 800c164:	f7f5 fc50 	bl	8001a08 <_sbrk>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d102      	bne.n	800c172 <_sbrk_r+0x1a>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	b103      	cbz	r3, 800c172 <_sbrk_r+0x1a>
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	20001fdc 	.word	0x20001fdc

0800c178 <nan>:
 800c178:	2000      	movs	r0, #0
 800c17a:	4901      	ldr	r1, [pc, #4]	; (800c180 <nan+0x8>)
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	7ff80000 	.word	0x7ff80000

0800c184 <__assert_func>:
 800c184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c186:	4614      	mov	r4, r2
 800c188:	461a      	mov	r2, r3
 800c18a:	4b09      	ldr	r3, [pc, #36]	; (800c1b0 <__assert_func+0x2c>)
 800c18c:	4605      	mov	r5, r0
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68d8      	ldr	r0, [r3, #12]
 800c192:	b14c      	cbz	r4, 800c1a8 <__assert_func+0x24>
 800c194:	4b07      	ldr	r3, [pc, #28]	; (800c1b4 <__assert_func+0x30>)
 800c196:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c19a:	9100      	str	r1, [sp, #0]
 800c19c:	462b      	mov	r3, r5
 800c19e:	4906      	ldr	r1, [pc, #24]	; (800c1b8 <__assert_func+0x34>)
 800c1a0:	f000 fbca 	bl	800c938 <fiprintf>
 800c1a4:	f000 fc5e 	bl	800ca64 <abort>
 800c1a8:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <__assert_func+0x38>)
 800c1aa:	461c      	mov	r4, r3
 800c1ac:	e7f3      	b.n	800c196 <__assert_func+0x12>
 800c1ae:	bf00      	nop
 800c1b0:	20000068 	.word	0x20000068
 800c1b4:	0800cfba 	.word	0x0800cfba
 800c1b8:	0800cfc7 	.word	0x0800cfc7
 800c1bc:	0800cff5 	.word	0x0800cff5

0800c1c0 <_calloc_r>:
 800c1c0:	b570      	push	{r4, r5, r6, lr}
 800c1c2:	fba1 5402 	umull	r5, r4, r1, r2
 800c1c6:	b934      	cbnz	r4, 800c1d6 <_calloc_r+0x16>
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	f7fd fff9 	bl	800a1c0 <_malloc_r>
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	b928      	cbnz	r0, 800c1de <_calloc_r+0x1e>
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	bd70      	pop	{r4, r5, r6, pc}
 800c1d6:	220c      	movs	r2, #12
 800c1d8:	2600      	movs	r6, #0
 800c1da:	6002      	str	r2, [r0, #0]
 800c1dc:	e7f9      	b.n	800c1d2 <_calloc_r+0x12>
 800c1de:	462a      	mov	r2, r5
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	f7fd f86e 	bl	80092c2 <memset>
 800c1e6:	e7f4      	b.n	800c1d2 <_calloc_r+0x12>

0800c1e8 <rshift>:
 800c1e8:	6903      	ldr	r3, [r0, #16]
 800c1ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c1f2:	f100 0414 	add.w	r4, r0, #20
 800c1f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1fa:	dd46      	ble.n	800c28a <rshift+0xa2>
 800c1fc:	f011 011f 	ands.w	r1, r1, #31
 800c200:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c204:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c208:	d10c      	bne.n	800c224 <rshift+0x3c>
 800c20a:	4629      	mov	r1, r5
 800c20c:	f100 0710 	add.w	r7, r0, #16
 800c210:	42b1      	cmp	r1, r6
 800c212:	d335      	bcc.n	800c280 <rshift+0x98>
 800c214:	1a9b      	subs	r3, r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	1eea      	subs	r2, r5, #3
 800c21a:	4296      	cmp	r6, r2
 800c21c:	bf38      	it	cc
 800c21e:	2300      	movcc	r3, #0
 800c220:	4423      	add	r3, r4
 800c222:	e015      	b.n	800c250 <rshift+0x68>
 800c224:	46a1      	mov	r9, r4
 800c226:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c22a:	f1c1 0820 	rsb	r8, r1, #32
 800c22e:	40cf      	lsrs	r7, r1
 800c230:	f105 0e04 	add.w	lr, r5, #4
 800c234:	4576      	cmp	r6, lr
 800c236:	46f4      	mov	ip, lr
 800c238:	d816      	bhi.n	800c268 <rshift+0x80>
 800c23a:	1a9a      	subs	r2, r3, r2
 800c23c:	0092      	lsls	r2, r2, #2
 800c23e:	3a04      	subs	r2, #4
 800c240:	3501      	adds	r5, #1
 800c242:	42ae      	cmp	r6, r5
 800c244:	bf38      	it	cc
 800c246:	2200      	movcc	r2, #0
 800c248:	18a3      	adds	r3, r4, r2
 800c24a:	50a7      	str	r7, [r4, r2]
 800c24c:	b107      	cbz	r7, 800c250 <rshift+0x68>
 800c24e:	3304      	adds	r3, #4
 800c250:	42a3      	cmp	r3, r4
 800c252:	eba3 0204 	sub.w	r2, r3, r4
 800c256:	bf08      	it	eq
 800c258:	2300      	moveq	r3, #0
 800c25a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c25e:	6102      	str	r2, [r0, #16]
 800c260:	bf08      	it	eq
 800c262:	6143      	streq	r3, [r0, #20]
 800c264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c268:	f8dc c000 	ldr.w	ip, [ip]
 800c26c:	fa0c fc08 	lsl.w	ip, ip, r8
 800c270:	ea4c 0707 	orr.w	r7, ip, r7
 800c274:	f849 7b04 	str.w	r7, [r9], #4
 800c278:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c27c:	40cf      	lsrs	r7, r1
 800c27e:	e7d9      	b.n	800c234 <rshift+0x4c>
 800c280:	f851 cb04 	ldr.w	ip, [r1], #4
 800c284:	f847 cf04 	str.w	ip, [r7, #4]!
 800c288:	e7c2      	b.n	800c210 <rshift+0x28>
 800c28a:	4623      	mov	r3, r4
 800c28c:	e7e0      	b.n	800c250 <rshift+0x68>

0800c28e <__hexdig_fun>:
 800c28e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c292:	2b09      	cmp	r3, #9
 800c294:	d802      	bhi.n	800c29c <__hexdig_fun+0xe>
 800c296:	3820      	subs	r0, #32
 800c298:	b2c0      	uxtb	r0, r0
 800c29a:	4770      	bx	lr
 800c29c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c2a0:	2b05      	cmp	r3, #5
 800c2a2:	d801      	bhi.n	800c2a8 <__hexdig_fun+0x1a>
 800c2a4:	3847      	subs	r0, #71	; 0x47
 800c2a6:	e7f7      	b.n	800c298 <__hexdig_fun+0xa>
 800c2a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c2ac:	2b05      	cmp	r3, #5
 800c2ae:	d801      	bhi.n	800c2b4 <__hexdig_fun+0x26>
 800c2b0:	3827      	subs	r0, #39	; 0x27
 800c2b2:	e7f1      	b.n	800c298 <__hexdig_fun+0xa>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	4770      	bx	lr

0800c2b8 <__gethex>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	4681      	mov	r9, r0
 800c2be:	468a      	mov	sl, r1
 800c2c0:	4617      	mov	r7, r2
 800c2c2:	680a      	ldr	r2, [r1, #0]
 800c2c4:	b085      	sub	sp, #20
 800c2c6:	f102 0b02 	add.w	fp, r2, #2
 800c2ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c2ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c2d2:	9302      	str	r3, [sp, #8]
 800c2d4:	32fe      	adds	r2, #254	; 0xfe
 800c2d6:	eb02 030b 	add.w	r3, r2, fp
 800c2da:	46d8      	mov	r8, fp
 800c2dc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c2e0:	9301      	str	r3, [sp, #4]
 800c2e2:	2830      	cmp	r0, #48	; 0x30
 800c2e4:	d0f7      	beq.n	800c2d6 <__gethex+0x1e>
 800c2e6:	f7ff ffd2 	bl	800c28e <__hexdig_fun>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d138      	bne.n	800c362 <__gethex+0xaa>
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	49a7      	ldr	r1, [pc, #668]	; (800c594 <__gethex+0x2dc>)
 800c2f6:	f7ff ff1d 	bl	800c134 <strncmp>
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d169      	bne.n	800c3d4 <__gethex+0x11c>
 800c300:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c304:	465d      	mov	r5, fp
 800c306:	f7ff ffc2 	bl	800c28e <__hexdig_fun>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d064      	beq.n	800c3d8 <__gethex+0x120>
 800c30e:	465a      	mov	r2, fp
 800c310:	7810      	ldrb	r0, [r2, #0]
 800c312:	4690      	mov	r8, r2
 800c314:	2830      	cmp	r0, #48	; 0x30
 800c316:	f102 0201 	add.w	r2, r2, #1
 800c31a:	d0f9      	beq.n	800c310 <__gethex+0x58>
 800c31c:	f7ff ffb7 	bl	800c28e <__hexdig_fun>
 800c320:	2301      	movs	r3, #1
 800c322:	fab0 f480 	clz	r4, r0
 800c326:	465e      	mov	r6, fp
 800c328:	0964      	lsrs	r4, r4, #5
 800c32a:	9301      	str	r3, [sp, #4]
 800c32c:	4642      	mov	r2, r8
 800c32e:	4615      	mov	r5, r2
 800c330:	7828      	ldrb	r0, [r5, #0]
 800c332:	3201      	adds	r2, #1
 800c334:	f7ff ffab 	bl	800c28e <__hexdig_fun>
 800c338:	2800      	cmp	r0, #0
 800c33a:	d1f8      	bne.n	800c32e <__gethex+0x76>
 800c33c:	2201      	movs	r2, #1
 800c33e:	4628      	mov	r0, r5
 800c340:	4994      	ldr	r1, [pc, #592]	; (800c594 <__gethex+0x2dc>)
 800c342:	f7ff fef7 	bl	800c134 <strncmp>
 800c346:	b978      	cbnz	r0, 800c368 <__gethex+0xb0>
 800c348:	b946      	cbnz	r6, 800c35c <__gethex+0xa4>
 800c34a:	1c6e      	adds	r6, r5, #1
 800c34c:	4632      	mov	r2, r6
 800c34e:	4615      	mov	r5, r2
 800c350:	7828      	ldrb	r0, [r5, #0]
 800c352:	3201      	adds	r2, #1
 800c354:	f7ff ff9b 	bl	800c28e <__hexdig_fun>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d1f8      	bne.n	800c34e <__gethex+0x96>
 800c35c:	1b73      	subs	r3, r6, r5
 800c35e:	009e      	lsls	r6, r3, #2
 800c360:	e004      	b.n	800c36c <__gethex+0xb4>
 800c362:	2400      	movs	r4, #0
 800c364:	4626      	mov	r6, r4
 800c366:	e7e1      	b.n	800c32c <__gethex+0x74>
 800c368:	2e00      	cmp	r6, #0
 800c36a:	d1f7      	bne.n	800c35c <__gethex+0xa4>
 800c36c:	782b      	ldrb	r3, [r5, #0]
 800c36e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c372:	2b50      	cmp	r3, #80	; 0x50
 800c374:	d13d      	bne.n	800c3f2 <__gethex+0x13a>
 800c376:	786b      	ldrb	r3, [r5, #1]
 800c378:	2b2b      	cmp	r3, #43	; 0x2b
 800c37a:	d02f      	beq.n	800c3dc <__gethex+0x124>
 800c37c:	2b2d      	cmp	r3, #45	; 0x2d
 800c37e:	d031      	beq.n	800c3e4 <__gethex+0x12c>
 800c380:	f04f 0b00 	mov.w	fp, #0
 800c384:	1c69      	adds	r1, r5, #1
 800c386:	7808      	ldrb	r0, [r1, #0]
 800c388:	f7ff ff81 	bl	800c28e <__hexdig_fun>
 800c38c:	1e42      	subs	r2, r0, #1
 800c38e:	b2d2      	uxtb	r2, r2
 800c390:	2a18      	cmp	r2, #24
 800c392:	d82e      	bhi.n	800c3f2 <__gethex+0x13a>
 800c394:	f1a0 0210 	sub.w	r2, r0, #16
 800c398:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c39c:	f7ff ff77 	bl	800c28e <__hexdig_fun>
 800c3a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800c3a4:	fa5f fc8c 	uxtb.w	ip, ip
 800c3a8:	f1bc 0f18 	cmp.w	ip, #24
 800c3ac:	d91d      	bls.n	800c3ea <__gethex+0x132>
 800c3ae:	f1bb 0f00 	cmp.w	fp, #0
 800c3b2:	d000      	beq.n	800c3b6 <__gethex+0xfe>
 800c3b4:	4252      	negs	r2, r2
 800c3b6:	4416      	add	r6, r2
 800c3b8:	f8ca 1000 	str.w	r1, [sl]
 800c3bc:	b1dc      	cbz	r4, 800c3f6 <__gethex+0x13e>
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	bf14      	ite	ne
 800c3c4:	f04f 0800 	movne.w	r8, #0
 800c3c8:	f04f 0806 	moveq.w	r8, #6
 800c3cc:	4640      	mov	r0, r8
 800c3ce:	b005      	add	sp, #20
 800c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d4:	4645      	mov	r5, r8
 800c3d6:	4626      	mov	r6, r4
 800c3d8:	2401      	movs	r4, #1
 800c3da:	e7c7      	b.n	800c36c <__gethex+0xb4>
 800c3dc:	f04f 0b00 	mov.w	fp, #0
 800c3e0:	1ca9      	adds	r1, r5, #2
 800c3e2:	e7d0      	b.n	800c386 <__gethex+0xce>
 800c3e4:	f04f 0b01 	mov.w	fp, #1
 800c3e8:	e7fa      	b.n	800c3e0 <__gethex+0x128>
 800c3ea:	230a      	movs	r3, #10
 800c3ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c3f0:	e7d0      	b.n	800c394 <__gethex+0xdc>
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	e7e0      	b.n	800c3b8 <__gethex+0x100>
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	eba5 0308 	sub.w	r3, r5, r8
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	2b07      	cmp	r3, #7
 800c400:	dc0a      	bgt.n	800c418 <__gethex+0x160>
 800c402:	4648      	mov	r0, r9
 800c404:	f7fd ff68 	bl	800a2d8 <_Balloc>
 800c408:	4604      	mov	r4, r0
 800c40a:	b940      	cbnz	r0, 800c41e <__gethex+0x166>
 800c40c:	4602      	mov	r2, r0
 800c40e:	21e4      	movs	r1, #228	; 0xe4
 800c410:	4b61      	ldr	r3, [pc, #388]	; (800c598 <__gethex+0x2e0>)
 800c412:	4862      	ldr	r0, [pc, #392]	; (800c59c <__gethex+0x2e4>)
 800c414:	f7ff feb6 	bl	800c184 <__assert_func>
 800c418:	3101      	adds	r1, #1
 800c41a:	105b      	asrs	r3, r3, #1
 800c41c:	e7ef      	b.n	800c3fe <__gethex+0x146>
 800c41e:	2300      	movs	r3, #0
 800c420:	469b      	mov	fp, r3
 800c422:	f100 0a14 	add.w	sl, r0, #20
 800c426:	f8cd a004 	str.w	sl, [sp, #4]
 800c42a:	45a8      	cmp	r8, r5
 800c42c:	d344      	bcc.n	800c4b8 <__gethex+0x200>
 800c42e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c432:	4658      	mov	r0, fp
 800c434:	f848 bb04 	str.w	fp, [r8], #4
 800c438:	eba8 080a 	sub.w	r8, r8, sl
 800c43c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c440:	6122      	str	r2, [r4, #16]
 800c442:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800c446:	f7fe f839 	bl	800a4bc <__hi0bits>
 800c44a:	683d      	ldr	r5, [r7, #0]
 800c44c:	eba8 0800 	sub.w	r8, r8, r0
 800c450:	45a8      	cmp	r8, r5
 800c452:	dd59      	ble.n	800c508 <__gethex+0x250>
 800c454:	eba8 0805 	sub.w	r8, r8, r5
 800c458:	4641      	mov	r1, r8
 800c45a:	4620      	mov	r0, r4
 800c45c:	f7fe fbb7 	bl	800abce <__any_on>
 800c460:	4683      	mov	fp, r0
 800c462:	b1b8      	cbz	r0, 800c494 <__gethex+0x1dc>
 800c464:	f04f 0b01 	mov.w	fp, #1
 800c468:	f108 33ff 	add.w	r3, r8, #4294967295
 800c46c:	1159      	asrs	r1, r3, #5
 800c46e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c472:	f003 021f 	and.w	r2, r3, #31
 800c476:	fa0b f202 	lsl.w	r2, fp, r2
 800c47a:	420a      	tst	r2, r1
 800c47c:	d00a      	beq.n	800c494 <__gethex+0x1dc>
 800c47e:	455b      	cmp	r3, fp
 800c480:	dd06      	ble.n	800c490 <__gethex+0x1d8>
 800c482:	4620      	mov	r0, r4
 800c484:	f1a8 0102 	sub.w	r1, r8, #2
 800c488:	f7fe fba1 	bl	800abce <__any_on>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d138      	bne.n	800c502 <__gethex+0x24a>
 800c490:	f04f 0b02 	mov.w	fp, #2
 800c494:	4641      	mov	r1, r8
 800c496:	4620      	mov	r0, r4
 800c498:	f7ff fea6 	bl	800c1e8 <rshift>
 800c49c:	4446      	add	r6, r8
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	42b3      	cmp	r3, r6
 800c4a2:	da41      	bge.n	800c528 <__gethex+0x270>
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4648      	mov	r0, r9
 800c4a8:	f7fd ff56 	bl	800a358 <_Bfree>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c4b4:	6013      	str	r3, [r2, #0]
 800c4b6:	e789      	b.n	800c3cc <__gethex+0x114>
 800c4b8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c4bc:	2a2e      	cmp	r2, #46	; 0x2e
 800c4be:	d014      	beq.n	800c4ea <__gethex+0x232>
 800c4c0:	2b20      	cmp	r3, #32
 800c4c2:	d106      	bne.n	800c4d2 <__gethex+0x21a>
 800c4c4:	9b01      	ldr	r3, [sp, #4]
 800c4c6:	f843 bb04 	str.w	fp, [r3], #4
 800c4ca:	f04f 0b00 	mov.w	fp, #0
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	465b      	mov	r3, fp
 800c4d2:	7828      	ldrb	r0, [r5, #0]
 800c4d4:	9303      	str	r3, [sp, #12]
 800c4d6:	f7ff feda 	bl	800c28e <__hexdig_fun>
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	f000 000f 	and.w	r0, r0, #15
 800c4e0:	4098      	lsls	r0, r3
 800c4e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c4e6:	3304      	adds	r3, #4
 800c4e8:	e79f      	b.n	800c42a <__gethex+0x172>
 800c4ea:	45a8      	cmp	r8, r5
 800c4ec:	d8e8      	bhi.n	800c4c0 <__gethex+0x208>
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	4928      	ldr	r1, [pc, #160]	; (800c594 <__gethex+0x2dc>)
 800c4f4:	9303      	str	r3, [sp, #12]
 800c4f6:	f7ff fe1d 	bl	800c134 <strncmp>
 800c4fa:	9b03      	ldr	r3, [sp, #12]
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d1df      	bne.n	800c4c0 <__gethex+0x208>
 800c500:	e793      	b.n	800c42a <__gethex+0x172>
 800c502:	f04f 0b03 	mov.w	fp, #3
 800c506:	e7c5      	b.n	800c494 <__gethex+0x1dc>
 800c508:	da0b      	bge.n	800c522 <__gethex+0x26a>
 800c50a:	eba5 0808 	sub.w	r8, r5, r8
 800c50e:	4621      	mov	r1, r4
 800c510:	4642      	mov	r2, r8
 800c512:	4648      	mov	r0, r9
 800c514:	f7fe f938 	bl	800a788 <__lshift>
 800c518:	4604      	mov	r4, r0
 800c51a:	eba6 0608 	sub.w	r6, r6, r8
 800c51e:	f100 0a14 	add.w	sl, r0, #20
 800c522:	f04f 0b00 	mov.w	fp, #0
 800c526:	e7ba      	b.n	800c49e <__gethex+0x1e6>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	42b3      	cmp	r3, r6
 800c52c:	dd74      	ble.n	800c618 <__gethex+0x360>
 800c52e:	1b9e      	subs	r6, r3, r6
 800c530:	42b5      	cmp	r5, r6
 800c532:	dc35      	bgt.n	800c5a0 <__gethex+0x2e8>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b02      	cmp	r3, #2
 800c538:	d023      	beq.n	800c582 <__gethex+0x2ca>
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d025      	beq.n	800c58a <__gethex+0x2d2>
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d115      	bne.n	800c56e <__gethex+0x2b6>
 800c542:	42b5      	cmp	r5, r6
 800c544:	d113      	bne.n	800c56e <__gethex+0x2b6>
 800c546:	2d01      	cmp	r5, #1
 800c548:	d10b      	bne.n	800c562 <__gethex+0x2aa>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	9a02      	ldr	r2, [sp, #8]
 800c54e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	2301      	movs	r3, #1
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	f8ca 3000 	str.w	r3, [sl]
 800c55c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c55e:	601c      	str	r4, [r3, #0]
 800c560:	e734      	b.n	800c3cc <__gethex+0x114>
 800c562:	4620      	mov	r0, r4
 800c564:	1e69      	subs	r1, r5, #1
 800c566:	f7fe fb32 	bl	800abce <__any_on>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d1ed      	bne.n	800c54a <__gethex+0x292>
 800c56e:	4621      	mov	r1, r4
 800c570:	4648      	mov	r0, r9
 800c572:	f7fd fef1 	bl	800a358 <_Bfree>
 800c576:	2300      	movs	r3, #0
 800c578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c57a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	e724      	b.n	800c3cc <__gethex+0x114>
 800c582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1f2      	bne.n	800c56e <__gethex+0x2b6>
 800c588:	e7df      	b.n	800c54a <__gethex+0x292>
 800c58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1dc      	bne.n	800c54a <__gethex+0x292>
 800c590:	e7ed      	b.n	800c56e <__gethex+0x2b6>
 800c592:	bf00      	nop
 800c594:	0800ce4c 	.word	0x0800ce4c
 800c598:	0800ccdf 	.word	0x0800ccdf
 800c59c:	0800cff6 	.word	0x0800cff6
 800c5a0:	f106 38ff 	add.w	r8, r6, #4294967295
 800c5a4:	f1bb 0f00 	cmp.w	fp, #0
 800c5a8:	d133      	bne.n	800c612 <__gethex+0x35a>
 800c5aa:	f1b8 0f00 	cmp.w	r8, #0
 800c5ae:	d004      	beq.n	800c5ba <__gethex+0x302>
 800c5b0:	4641      	mov	r1, r8
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f7fe fb0b 	bl	800abce <__any_on>
 800c5b8:	4683      	mov	fp, r0
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c5c0:	f008 081f 	and.w	r8, r8, #31
 800c5c4:	fa03 f308 	lsl.w	r3, r3, r8
 800c5c8:	f04f 0802 	mov.w	r8, #2
 800c5cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c5d0:	4631      	mov	r1, r6
 800c5d2:	4213      	tst	r3, r2
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	bf18      	it	ne
 800c5d8:	f04b 0b02 	orrne.w	fp, fp, #2
 800c5dc:	1bad      	subs	r5, r5, r6
 800c5de:	f7ff fe03 	bl	800c1e8 <rshift>
 800c5e2:	687e      	ldr	r6, [r7, #4]
 800c5e4:	f1bb 0f00 	cmp.w	fp, #0
 800c5e8:	d04a      	beq.n	800c680 <__gethex+0x3c8>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d016      	beq.n	800c61e <__gethex+0x366>
 800c5f0:	2b03      	cmp	r3, #3
 800c5f2:	d018      	beq.n	800c626 <__gethex+0x36e>
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d109      	bne.n	800c60c <__gethex+0x354>
 800c5f8:	f01b 0f02 	tst.w	fp, #2
 800c5fc:	d006      	beq.n	800c60c <__gethex+0x354>
 800c5fe:	f8da 3000 	ldr.w	r3, [sl]
 800c602:	ea4b 0b03 	orr.w	fp, fp, r3
 800c606:	f01b 0f01 	tst.w	fp, #1
 800c60a:	d10f      	bne.n	800c62c <__gethex+0x374>
 800c60c:	f048 0810 	orr.w	r8, r8, #16
 800c610:	e036      	b.n	800c680 <__gethex+0x3c8>
 800c612:	f04f 0b01 	mov.w	fp, #1
 800c616:	e7d0      	b.n	800c5ba <__gethex+0x302>
 800c618:	f04f 0801 	mov.w	r8, #1
 800c61c:	e7e2      	b.n	800c5e4 <__gethex+0x32c>
 800c61e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c620:	f1c3 0301 	rsb	r3, r3, #1
 800c624:	930f      	str	r3, [sp, #60]	; 0x3c
 800c626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d0ef      	beq.n	800c60c <__gethex+0x354>
 800c62c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c630:	f104 0214 	add.w	r2, r4, #20
 800c634:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	2300      	movs	r3, #0
 800c63c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c640:	4694      	mov	ip, r2
 800c642:	f852 1b04 	ldr.w	r1, [r2], #4
 800c646:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c64a:	d01e      	beq.n	800c68a <__gethex+0x3d2>
 800c64c:	3101      	adds	r1, #1
 800c64e:	f8cc 1000 	str.w	r1, [ip]
 800c652:	f1b8 0f02 	cmp.w	r8, #2
 800c656:	f104 0214 	add.w	r2, r4, #20
 800c65a:	d13d      	bne.n	800c6d8 <__gethex+0x420>
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	3b01      	subs	r3, #1
 800c660:	42ab      	cmp	r3, r5
 800c662:	d10b      	bne.n	800c67c <__gethex+0x3c4>
 800c664:	2301      	movs	r3, #1
 800c666:	1169      	asrs	r1, r5, #5
 800c668:	f005 051f 	and.w	r5, r5, #31
 800c66c:	fa03 f505 	lsl.w	r5, r3, r5
 800c670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c674:	421d      	tst	r5, r3
 800c676:	bf18      	it	ne
 800c678:	f04f 0801 	movne.w	r8, #1
 800c67c:	f048 0820 	orr.w	r8, r8, #32
 800c680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c682:	601c      	str	r4, [r3, #0]
 800c684:	9b02      	ldr	r3, [sp, #8]
 800c686:	601e      	str	r6, [r3, #0]
 800c688:	e6a0      	b.n	800c3cc <__gethex+0x114>
 800c68a:	4290      	cmp	r0, r2
 800c68c:	f842 3c04 	str.w	r3, [r2, #-4]
 800c690:	d8d6      	bhi.n	800c640 <__gethex+0x388>
 800c692:	68a2      	ldr	r2, [r4, #8]
 800c694:	4593      	cmp	fp, r2
 800c696:	db17      	blt.n	800c6c8 <__gethex+0x410>
 800c698:	6861      	ldr	r1, [r4, #4]
 800c69a:	4648      	mov	r0, r9
 800c69c:	3101      	adds	r1, #1
 800c69e:	f7fd fe1b 	bl	800a2d8 <_Balloc>
 800c6a2:	4682      	mov	sl, r0
 800c6a4:	b918      	cbnz	r0, 800c6ae <__gethex+0x3f6>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	2184      	movs	r1, #132	; 0x84
 800c6aa:	4b1a      	ldr	r3, [pc, #104]	; (800c714 <__gethex+0x45c>)
 800c6ac:	e6b1      	b.n	800c412 <__gethex+0x15a>
 800c6ae:	6922      	ldr	r2, [r4, #16]
 800c6b0:	f104 010c 	add.w	r1, r4, #12
 800c6b4:	3202      	adds	r2, #2
 800c6b6:	0092      	lsls	r2, r2, #2
 800c6b8:	300c      	adds	r0, #12
 800c6ba:	f7fc fe90 	bl	80093de <memcpy>
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4648      	mov	r0, r9
 800c6c2:	f7fd fe49 	bl	800a358 <_Bfree>
 800c6c6:	4654      	mov	r4, sl
 800c6c8:	6922      	ldr	r2, [r4, #16]
 800c6ca:	1c51      	adds	r1, r2, #1
 800c6cc:	6121      	str	r1, [r4, #16]
 800c6ce:	2101      	movs	r1, #1
 800c6d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c6d4:	6151      	str	r1, [r2, #20]
 800c6d6:	e7bc      	b.n	800c652 <__gethex+0x39a>
 800c6d8:	6921      	ldr	r1, [r4, #16]
 800c6da:	4559      	cmp	r1, fp
 800c6dc:	dd0b      	ble.n	800c6f6 <__gethex+0x43e>
 800c6de:	2101      	movs	r1, #1
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f7ff fd81 	bl	800c1e8 <rshift>
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	3601      	adds	r6, #1
 800c6ea:	42b3      	cmp	r3, r6
 800c6ec:	f6ff aeda 	blt.w	800c4a4 <__gethex+0x1ec>
 800c6f0:	f04f 0801 	mov.w	r8, #1
 800c6f4:	e7c2      	b.n	800c67c <__gethex+0x3c4>
 800c6f6:	f015 051f 	ands.w	r5, r5, #31
 800c6fa:	d0f9      	beq.n	800c6f0 <__gethex+0x438>
 800c6fc:	9b01      	ldr	r3, [sp, #4]
 800c6fe:	f1c5 0520 	rsb	r5, r5, #32
 800c702:	441a      	add	r2, r3
 800c704:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c708:	f7fd fed8 	bl	800a4bc <__hi0bits>
 800c70c:	42a8      	cmp	r0, r5
 800c70e:	dbe6      	blt.n	800c6de <__gethex+0x426>
 800c710:	e7ee      	b.n	800c6f0 <__gethex+0x438>
 800c712:	bf00      	nop
 800c714:	0800ccdf 	.word	0x0800ccdf

0800c718 <L_shift>:
 800c718:	f1c2 0208 	rsb	r2, r2, #8
 800c71c:	0092      	lsls	r2, r2, #2
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	f1c2 0620 	rsb	r6, r2, #32
 800c724:	6843      	ldr	r3, [r0, #4]
 800c726:	6804      	ldr	r4, [r0, #0]
 800c728:	fa03 f506 	lsl.w	r5, r3, r6
 800c72c:	432c      	orrs	r4, r5
 800c72e:	40d3      	lsrs	r3, r2
 800c730:	6004      	str	r4, [r0, #0]
 800c732:	f840 3f04 	str.w	r3, [r0, #4]!
 800c736:	4288      	cmp	r0, r1
 800c738:	d3f4      	bcc.n	800c724 <L_shift+0xc>
 800c73a:	bd70      	pop	{r4, r5, r6, pc}

0800c73c <__match>:
 800c73c:	b530      	push	{r4, r5, lr}
 800c73e:	6803      	ldr	r3, [r0, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c746:	b914      	cbnz	r4, 800c74e <__match+0x12>
 800c748:	6003      	str	r3, [r0, #0]
 800c74a:	2001      	movs	r0, #1
 800c74c:	bd30      	pop	{r4, r5, pc}
 800c74e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c752:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c756:	2d19      	cmp	r5, #25
 800c758:	bf98      	it	ls
 800c75a:	3220      	addls	r2, #32
 800c75c:	42a2      	cmp	r2, r4
 800c75e:	d0f0      	beq.n	800c742 <__match+0x6>
 800c760:	2000      	movs	r0, #0
 800c762:	e7f3      	b.n	800c74c <__match+0x10>

0800c764 <__hexnan>:
 800c764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	2500      	movs	r5, #0
 800c76a:	680b      	ldr	r3, [r1, #0]
 800c76c:	4682      	mov	sl, r0
 800c76e:	115e      	asrs	r6, r3, #5
 800c770:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c774:	f013 031f 	ands.w	r3, r3, #31
 800c778:	bf18      	it	ne
 800c77a:	3604      	addne	r6, #4
 800c77c:	1f37      	subs	r7, r6, #4
 800c77e:	4690      	mov	r8, r2
 800c780:	46b9      	mov	r9, r7
 800c782:	463c      	mov	r4, r7
 800c784:	46ab      	mov	fp, r5
 800c786:	b087      	sub	sp, #28
 800c788:	6801      	ldr	r1, [r0, #0]
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c790:	9502      	str	r5, [sp, #8]
 800c792:	784a      	ldrb	r2, [r1, #1]
 800c794:	1c4b      	adds	r3, r1, #1
 800c796:	9303      	str	r3, [sp, #12]
 800c798:	b342      	cbz	r2, 800c7ec <__hexnan+0x88>
 800c79a:	4610      	mov	r0, r2
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	9204      	str	r2, [sp, #16]
 800c7a0:	f7ff fd75 	bl	800c28e <__hexdig_fun>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d14f      	bne.n	800c848 <__hexnan+0xe4>
 800c7a8:	9a04      	ldr	r2, [sp, #16]
 800c7aa:	9905      	ldr	r1, [sp, #20]
 800c7ac:	2a20      	cmp	r2, #32
 800c7ae:	d818      	bhi.n	800c7e2 <__hexnan+0x7e>
 800c7b0:	9b02      	ldr	r3, [sp, #8]
 800c7b2:	459b      	cmp	fp, r3
 800c7b4:	dd13      	ble.n	800c7de <__hexnan+0x7a>
 800c7b6:	454c      	cmp	r4, r9
 800c7b8:	d206      	bcs.n	800c7c8 <__hexnan+0x64>
 800c7ba:	2d07      	cmp	r5, #7
 800c7bc:	dc04      	bgt.n	800c7c8 <__hexnan+0x64>
 800c7be:	462a      	mov	r2, r5
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f7ff ffa8 	bl	800c718 <L_shift>
 800c7c8:	4544      	cmp	r4, r8
 800c7ca:	d950      	bls.n	800c86e <__hexnan+0x10a>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f1a4 0904 	sub.w	r9, r4, #4
 800c7d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7d6:	461d      	mov	r5, r3
 800c7d8:	464c      	mov	r4, r9
 800c7da:	f8cd b008 	str.w	fp, [sp, #8]
 800c7de:	9903      	ldr	r1, [sp, #12]
 800c7e0:	e7d7      	b.n	800c792 <__hexnan+0x2e>
 800c7e2:	2a29      	cmp	r2, #41	; 0x29
 800c7e4:	d155      	bne.n	800c892 <__hexnan+0x12e>
 800c7e6:	3102      	adds	r1, #2
 800c7e8:	f8ca 1000 	str.w	r1, [sl]
 800c7ec:	f1bb 0f00 	cmp.w	fp, #0
 800c7f0:	d04f      	beq.n	800c892 <__hexnan+0x12e>
 800c7f2:	454c      	cmp	r4, r9
 800c7f4:	d206      	bcs.n	800c804 <__hexnan+0xa0>
 800c7f6:	2d07      	cmp	r5, #7
 800c7f8:	dc04      	bgt.n	800c804 <__hexnan+0xa0>
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7ff ff8a 	bl	800c718 <L_shift>
 800c804:	4544      	cmp	r4, r8
 800c806:	d934      	bls.n	800c872 <__hexnan+0x10e>
 800c808:	4623      	mov	r3, r4
 800c80a:	f1a8 0204 	sub.w	r2, r8, #4
 800c80e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c812:	429f      	cmp	r7, r3
 800c814:	f842 1f04 	str.w	r1, [r2, #4]!
 800c818:	d2f9      	bcs.n	800c80e <__hexnan+0xaa>
 800c81a:	1b3b      	subs	r3, r7, r4
 800c81c:	f023 0303 	bic.w	r3, r3, #3
 800c820:	3304      	adds	r3, #4
 800c822:	3e03      	subs	r6, #3
 800c824:	3401      	adds	r4, #1
 800c826:	42a6      	cmp	r6, r4
 800c828:	bf38      	it	cc
 800c82a:	2304      	movcc	r3, #4
 800c82c:	2200      	movs	r2, #0
 800c82e:	4443      	add	r3, r8
 800c830:	f843 2b04 	str.w	r2, [r3], #4
 800c834:	429f      	cmp	r7, r3
 800c836:	d2fb      	bcs.n	800c830 <__hexnan+0xcc>
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	b91b      	cbnz	r3, 800c844 <__hexnan+0xe0>
 800c83c:	4547      	cmp	r7, r8
 800c83e:	d126      	bne.n	800c88e <__hexnan+0x12a>
 800c840:	2301      	movs	r3, #1
 800c842:	603b      	str	r3, [r7, #0]
 800c844:	2005      	movs	r0, #5
 800c846:	e025      	b.n	800c894 <__hexnan+0x130>
 800c848:	3501      	adds	r5, #1
 800c84a:	2d08      	cmp	r5, #8
 800c84c:	f10b 0b01 	add.w	fp, fp, #1
 800c850:	dd06      	ble.n	800c860 <__hexnan+0xfc>
 800c852:	4544      	cmp	r4, r8
 800c854:	d9c3      	bls.n	800c7de <__hexnan+0x7a>
 800c856:	2300      	movs	r3, #0
 800c858:	2501      	movs	r5, #1
 800c85a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c85e:	3c04      	subs	r4, #4
 800c860:	6822      	ldr	r2, [r4, #0]
 800c862:	f000 000f 	and.w	r0, r0, #15
 800c866:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c86a:	6020      	str	r0, [r4, #0]
 800c86c:	e7b7      	b.n	800c7de <__hexnan+0x7a>
 800c86e:	2508      	movs	r5, #8
 800c870:	e7b5      	b.n	800c7de <__hexnan+0x7a>
 800c872:	9b01      	ldr	r3, [sp, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d0df      	beq.n	800c838 <__hexnan+0xd4>
 800c878:	f04f 32ff 	mov.w	r2, #4294967295
 800c87c:	f1c3 0320 	rsb	r3, r3, #32
 800c880:	40da      	lsrs	r2, r3
 800c882:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c886:	4013      	ands	r3, r2
 800c888:	f846 3c04 	str.w	r3, [r6, #-4]
 800c88c:	e7d4      	b.n	800c838 <__hexnan+0xd4>
 800c88e:	3f04      	subs	r7, #4
 800c890:	e7d2      	b.n	800c838 <__hexnan+0xd4>
 800c892:	2004      	movs	r0, #4
 800c894:	b007      	add	sp, #28
 800c896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c89a <__ascii_mbtowc>:
 800c89a:	b082      	sub	sp, #8
 800c89c:	b901      	cbnz	r1, 800c8a0 <__ascii_mbtowc+0x6>
 800c89e:	a901      	add	r1, sp, #4
 800c8a0:	b142      	cbz	r2, 800c8b4 <__ascii_mbtowc+0x1a>
 800c8a2:	b14b      	cbz	r3, 800c8b8 <__ascii_mbtowc+0x1e>
 800c8a4:	7813      	ldrb	r3, [r2, #0]
 800c8a6:	600b      	str	r3, [r1, #0]
 800c8a8:	7812      	ldrb	r2, [r2, #0]
 800c8aa:	1e10      	subs	r0, r2, #0
 800c8ac:	bf18      	it	ne
 800c8ae:	2001      	movne	r0, #1
 800c8b0:	b002      	add	sp, #8
 800c8b2:	4770      	bx	lr
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	e7fb      	b.n	800c8b0 <__ascii_mbtowc+0x16>
 800c8b8:	f06f 0001 	mvn.w	r0, #1
 800c8bc:	e7f8      	b.n	800c8b0 <__ascii_mbtowc+0x16>

0800c8be <_realloc_r>:
 800c8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c2:	4680      	mov	r8, r0
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	460e      	mov	r6, r1
 800c8c8:	b921      	cbnz	r1, 800c8d4 <_realloc_r+0x16>
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d0:	f7fd bc76 	b.w	800a1c0 <_malloc_r>
 800c8d4:	b92a      	cbnz	r2, 800c8e2 <_realloc_r+0x24>
 800c8d6:	f7fd fc03 	bl	800a0e0 <_free_r>
 800c8da:	4625      	mov	r5, r4
 800c8dc:	4628      	mov	r0, r5
 800c8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e2:	f000 f8c6 	bl	800ca72 <_malloc_usable_size_r>
 800c8e6:	4284      	cmp	r4, r0
 800c8e8:	4607      	mov	r7, r0
 800c8ea:	d802      	bhi.n	800c8f2 <_realloc_r+0x34>
 800c8ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8f0:	d812      	bhi.n	800c918 <_realloc_r+0x5a>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	f7fd fc63 	bl	800a1c0 <_malloc_r>
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d0ed      	beq.n	800c8dc <_realloc_r+0x1e>
 800c900:	42bc      	cmp	r4, r7
 800c902:	4622      	mov	r2, r4
 800c904:	4631      	mov	r1, r6
 800c906:	bf28      	it	cs
 800c908:	463a      	movcs	r2, r7
 800c90a:	f7fc fd68 	bl	80093de <memcpy>
 800c90e:	4631      	mov	r1, r6
 800c910:	4640      	mov	r0, r8
 800c912:	f7fd fbe5 	bl	800a0e0 <_free_r>
 800c916:	e7e1      	b.n	800c8dc <_realloc_r+0x1e>
 800c918:	4635      	mov	r5, r6
 800c91a:	e7df      	b.n	800c8dc <_realloc_r+0x1e>

0800c91c <__ascii_wctomb>:
 800c91c:	4603      	mov	r3, r0
 800c91e:	4608      	mov	r0, r1
 800c920:	b141      	cbz	r1, 800c934 <__ascii_wctomb+0x18>
 800c922:	2aff      	cmp	r2, #255	; 0xff
 800c924:	d904      	bls.n	800c930 <__ascii_wctomb+0x14>
 800c926:	228a      	movs	r2, #138	; 0x8a
 800c928:	f04f 30ff 	mov.w	r0, #4294967295
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	4770      	bx	lr
 800c930:	2001      	movs	r0, #1
 800c932:	700a      	strb	r2, [r1, #0]
 800c934:	4770      	bx	lr
	...

0800c938 <fiprintf>:
 800c938:	b40e      	push	{r1, r2, r3}
 800c93a:	b503      	push	{r0, r1, lr}
 800c93c:	4601      	mov	r1, r0
 800c93e:	ab03      	add	r3, sp, #12
 800c940:	4805      	ldr	r0, [pc, #20]	; (800c958 <fiprintf+0x20>)
 800c942:	f853 2b04 	ldr.w	r2, [r3], #4
 800c946:	6800      	ldr	r0, [r0, #0]
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	f7ff f97f 	bl	800bc4c <_vfiprintf_r>
 800c94e:	b002      	add	sp, #8
 800c950:	f85d eb04 	ldr.w	lr, [sp], #4
 800c954:	b003      	add	sp, #12
 800c956:	4770      	bx	lr
 800c958:	20000068 	.word	0x20000068

0800c95c <__swhatbuf_r>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	460c      	mov	r4, r1
 800c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c964:	4615      	mov	r5, r2
 800c966:	2900      	cmp	r1, #0
 800c968:	461e      	mov	r6, r3
 800c96a:	b096      	sub	sp, #88	; 0x58
 800c96c:	da0c      	bge.n	800c988 <__swhatbuf_r+0x2c>
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	2100      	movs	r1, #0
 800c972:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c976:	bf0c      	ite	eq
 800c978:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c97c:	2340      	movne	r3, #64	; 0x40
 800c97e:	2000      	movs	r0, #0
 800c980:	6031      	str	r1, [r6, #0]
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	b016      	add	sp, #88	; 0x58
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	466a      	mov	r2, sp
 800c98a:	f000 f849 	bl	800ca20 <_fstat_r>
 800c98e:	2800      	cmp	r0, #0
 800c990:	dbed      	blt.n	800c96e <__swhatbuf_r+0x12>
 800c992:	9901      	ldr	r1, [sp, #4]
 800c994:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c998:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c99c:	4259      	negs	r1, r3
 800c99e:	4159      	adcs	r1, r3
 800c9a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9a4:	e7eb      	b.n	800c97e <__swhatbuf_r+0x22>

0800c9a6 <__smakebuf_r>:
 800c9a6:	898b      	ldrh	r3, [r1, #12]
 800c9a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9aa:	079d      	lsls	r5, r3, #30
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	460c      	mov	r4, r1
 800c9b0:	d507      	bpl.n	800c9c2 <__smakebuf_r+0x1c>
 800c9b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9b6:	6023      	str	r3, [r4, #0]
 800c9b8:	6123      	str	r3, [r4, #16]
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	6163      	str	r3, [r4, #20]
 800c9be:	b002      	add	sp, #8
 800c9c0:	bd70      	pop	{r4, r5, r6, pc}
 800c9c2:	466a      	mov	r2, sp
 800c9c4:	ab01      	add	r3, sp, #4
 800c9c6:	f7ff ffc9 	bl	800c95c <__swhatbuf_r>
 800c9ca:	9900      	ldr	r1, [sp, #0]
 800c9cc:	4605      	mov	r5, r0
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f7fd fbf6 	bl	800a1c0 <_malloc_r>
 800c9d4:	b948      	cbnz	r0, 800c9ea <__smakebuf_r+0x44>
 800c9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9da:	059a      	lsls	r2, r3, #22
 800c9dc:	d4ef      	bmi.n	800c9be <__smakebuf_r+0x18>
 800c9de:	f023 0303 	bic.w	r3, r3, #3
 800c9e2:	f043 0302 	orr.w	r3, r3, #2
 800c9e6:	81a3      	strh	r3, [r4, #12]
 800c9e8:	e7e3      	b.n	800c9b2 <__smakebuf_r+0xc>
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	6020      	str	r0, [r4, #0]
 800c9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	9b00      	ldr	r3, [sp, #0]
 800c9f6:	6120      	str	r0, [r4, #16]
 800c9f8:	6163      	str	r3, [r4, #20]
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	b15b      	cbz	r3, 800ca16 <__smakebuf_r+0x70>
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca04:	f000 f81e 	bl	800ca44 <_isatty_r>
 800ca08:	b128      	cbz	r0, 800ca16 <__smakebuf_r+0x70>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f023 0303 	bic.w	r3, r3, #3
 800ca10:	f043 0301 	orr.w	r3, r3, #1
 800ca14:	81a3      	strh	r3, [r4, #12]
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	431d      	orrs	r5, r3
 800ca1a:	81a5      	strh	r5, [r4, #12]
 800ca1c:	e7cf      	b.n	800c9be <__smakebuf_r+0x18>
	...

0800ca20 <_fstat_r>:
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	2300      	movs	r3, #0
 800ca24:	4d06      	ldr	r5, [pc, #24]	; (800ca40 <_fstat_r+0x20>)
 800ca26:	4604      	mov	r4, r0
 800ca28:	4608      	mov	r0, r1
 800ca2a:	4611      	mov	r1, r2
 800ca2c:	602b      	str	r3, [r5, #0]
 800ca2e:	f7f4 ffc6 	bl	80019be <_fstat>
 800ca32:	1c43      	adds	r3, r0, #1
 800ca34:	d102      	bne.n	800ca3c <_fstat_r+0x1c>
 800ca36:	682b      	ldr	r3, [r5, #0]
 800ca38:	b103      	cbz	r3, 800ca3c <_fstat_r+0x1c>
 800ca3a:	6023      	str	r3, [r4, #0]
 800ca3c:	bd38      	pop	{r3, r4, r5, pc}
 800ca3e:	bf00      	nop
 800ca40:	20001fdc 	.word	0x20001fdc

0800ca44 <_isatty_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	2300      	movs	r3, #0
 800ca48:	4d05      	ldr	r5, [pc, #20]	; (800ca60 <_isatty_r+0x1c>)
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	602b      	str	r3, [r5, #0]
 800ca50:	f7f4 ffc4 	bl	80019dc <_isatty>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	d102      	bne.n	800ca5e <_isatty_r+0x1a>
 800ca58:	682b      	ldr	r3, [r5, #0]
 800ca5a:	b103      	cbz	r3, 800ca5e <_isatty_r+0x1a>
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
 800ca60:	20001fdc 	.word	0x20001fdc

0800ca64 <abort>:
 800ca64:	2006      	movs	r0, #6
 800ca66:	b508      	push	{r3, lr}
 800ca68:	f000 f834 	bl	800cad4 <raise>
 800ca6c:	2001      	movs	r0, #1
 800ca6e:	f7f4 ff74 	bl	800195a <_exit>

0800ca72 <_malloc_usable_size_r>:
 800ca72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca76:	1f18      	subs	r0, r3, #4
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	bfbc      	itt	lt
 800ca7c:	580b      	ldrlt	r3, [r1, r0]
 800ca7e:	18c0      	addlt	r0, r0, r3
 800ca80:	4770      	bx	lr

0800ca82 <_raise_r>:
 800ca82:	291f      	cmp	r1, #31
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4604      	mov	r4, r0
 800ca88:	460d      	mov	r5, r1
 800ca8a:	d904      	bls.n	800ca96 <_raise_r+0x14>
 800ca8c:	2316      	movs	r3, #22
 800ca8e:	6003      	str	r3, [r0, #0]
 800ca90:	f04f 30ff 	mov.w	r0, #4294967295
 800ca94:	bd38      	pop	{r3, r4, r5, pc}
 800ca96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca98:	b112      	cbz	r2, 800caa0 <_raise_r+0x1e>
 800ca9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca9e:	b94b      	cbnz	r3, 800cab4 <_raise_r+0x32>
 800caa0:	4620      	mov	r0, r4
 800caa2:	f000 f831 	bl	800cb08 <_getpid_r>
 800caa6:	462a      	mov	r2, r5
 800caa8:	4601      	mov	r1, r0
 800caaa:	4620      	mov	r0, r4
 800caac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab0:	f000 b818 	b.w	800cae4 <_kill_r>
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d00a      	beq.n	800cace <_raise_r+0x4c>
 800cab8:	1c59      	adds	r1, r3, #1
 800caba:	d103      	bne.n	800cac4 <_raise_r+0x42>
 800cabc:	2316      	movs	r3, #22
 800cabe:	6003      	str	r3, [r0, #0]
 800cac0:	2001      	movs	r0, #1
 800cac2:	e7e7      	b.n	800ca94 <_raise_r+0x12>
 800cac4:	2400      	movs	r4, #0
 800cac6:	4628      	mov	r0, r5
 800cac8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cacc:	4798      	blx	r3
 800cace:	2000      	movs	r0, #0
 800cad0:	e7e0      	b.n	800ca94 <_raise_r+0x12>
	...

0800cad4 <raise>:
 800cad4:	4b02      	ldr	r3, [pc, #8]	; (800cae0 <raise+0xc>)
 800cad6:	4601      	mov	r1, r0
 800cad8:	6818      	ldr	r0, [r3, #0]
 800cada:	f7ff bfd2 	b.w	800ca82 <_raise_r>
 800cade:	bf00      	nop
 800cae0:	20000068 	.word	0x20000068

0800cae4 <_kill_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	2300      	movs	r3, #0
 800cae8:	4d06      	ldr	r5, [pc, #24]	; (800cb04 <_kill_r+0x20>)
 800caea:	4604      	mov	r4, r0
 800caec:	4608      	mov	r0, r1
 800caee:	4611      	mov	r1, r2
 800caf0:	602b      	str	r3, [r5, #0]
 800caf2:	f7f4 ff22 	bl	800193a <_kill>
 800caf6:	1c43      	adds	r3, r0, #1
 800caf8:	d102      	bne.n	800cb00 <_kill_r+0x1c>
 800cafa:	682b      	ldr	r3, [r5, #0]
 800cafc:	b103      	cbz	r3, 800cb00 <_kill_r+0x1c>
 800cafe:	6023      	str	r3, [r4, #0]
 800cb00:	bd38      	pop	{r3, r4, r5, pc}
 800cb02:	bf00      	nop
 800cb04:	20001fdc 	.word	0x20001fdc

0800cb08 <_getpid_r>:
 800cb08:	f7f4 bf10 	b.w	800192c <_getpid>

0800cb0c <_init>:
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	bf00      	nop
 800cb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb12:	bc08      	pop	{r3}
 800cb14:	469e      	mov	lr, r3
 800cb16:	4770      	bx	lr

0800cb18 <_fini>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	bf00      	nop
 800cb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb1e:	bc08      	pop	{r3}
 800cb20:	469e      	mov	lr, r3
 800cb22:	4770      	bx	lr
